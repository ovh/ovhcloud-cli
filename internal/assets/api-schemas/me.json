{
  "openapi": "3.0.0",
  "info": {
    "title": "OVHcloud API specification",
    "description": "Specification for OVHcloud API",
    "version": "1.0",
    "contact": {
      "name": "OVH",
      "email": "api@ml.ovh.net"
    }
  },
  "servers": [
    {
      "url": "https://eu.api.ovh.com/v1"
    }
  ],
  "components": {
    "schemas": {
      "agreements.AgreementStateEnum": {
        "type": "string",
        "description": "The current state of a contract agreement",
        "enum": [
          "ko",
          "obsolete",
          "ok",
          "todo"
        ]
      },
      "agreements.Contract": {
        "type": "object",
        "description": "Contract of service",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Is this contract currently active or not ?",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date the contract was created on",
            "format": "date",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of of the contract",
            "readOnly": true
          },
          "pdf": {
            "type": "string",
            "description": "URL you can download the contract at",
            "readOnly": true
          },
          "text": {
            "type": "string",
            "description": "Full text of the contract",
            "readOnly": true
          }
        }
      },
      "agreements.ContractAgreement": {
        "type": "object",
        "description": "Contract agreement",
        "properties": {
          "agreed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/agreements.AgreementStateEnum"
              }
            ],
            "description": "State of the agreement",
            "readOnly": true
          },
          "contractId": {
            "type": "integer",
            "description": "Id of the agreed contract",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date the agreed contract was effective",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Id of the contract",
            "readOnly": true
          }
        }
      },
      "any": {
        "description": "Can be anything (text, int, bool, json, html, etc.)",
        "example": "This is a content of any type !"
      },
      "api.Application": {
        "type": "object",
        "description": "API Application",
        "properties": {
          "applicationId": {
            "type": "integer",
            "readOnly": true
          },
          "applicationKey": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/api.ApplicationStatusEnum"
              }
            ],
            "readOnly": true
          }
        }
      },
      "api.ApplicationStatusEnum": {
        "type": "string",
        "description": "List of state of an Api Application",
        "enum": [
          "active",
          "blocked",
          "inactive",
          "trusted"
        ]
      },
      "api.Credential": {
        "type": "object",
        "description": "API Credential",
        "properties": {
          "allowedIPs": {
            "type": "array",
            "description": "If defined, list of ip blocks which are allowed to call API with this credential",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          },
          "applicationId": {
            "type": "integer",
            "readOnly": true
          },
          "creation": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "credentialId": {
            "type": "integer",
            "readOnly": true
          },
          "expiration": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "lastUse": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "ovhSupport": {
            "type": "boolean",
            "description": "States whether this credential has been created by yourself or by the OVH support team",
            "readOnly": true
          },
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/auth.AccessRule"
            },
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.CredentialStateEnum"
              }
            ],
            "readOnly": true
          }
        }
      },
      "api.Log": {
        "type": "object",
        "description": "API Log",
        "properties": {
          "account": {
            "type": "string",
            "description": "Account which did the Request",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date of the request",
            "format": "date-time",
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ip"
              }
            ],
            "description": "Source IP of the request",
            "nullable": true,
            "readOnly": true
          },
          "logId": {
            "type": "integer",
            "readOnly": true
          },
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/http.MethodEnum"
              }
            ],
            "description": "HTTP Method of the request",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "HTTP URI of the request",
            "readOnly": true
          },
          "route": {
            "type": "string",
            "description": "API Route called",
            "readOnly": true
          }
        }
      },
      "audit.Log": {
        "type": "object",
        "description": "An audit Log",
        "properties": {
          "authDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogAuthDetails"
              }
            ],
            "description": "authentication details",
            "nullable": true,
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "event's date",
            "format": "date-time",
            "readOnly": true
          },
          "groupCreatedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupCreatedDetails"
              }
            ],
            "description": "specific fields for GROUP_CREATED events",
            "nullable": true,
            "readOnly": true
          },
          "groupDeletedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupDeletedDetails"
              }
            ],
            "description": "specific fields for GROUP_DELETED events",
            "nullable": true,
            "readOnly": true
          },
          "groupModifiedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupModifiedDetails"
              }
            ],
            "description": "specific fields for GROUP_MODIFIED events",
            "nullable": true,
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ip"
              }
            ],
            "description": "IP associated to this event",
            "nullable": true,
            "readOnly": true
          },
          "loginSuccessDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogLoginSuccessDetails"
              }
            ],
            "description": "specific fields for LOGIN_SUCCESS events",
            "nullable": true,
            "readOnly": true
          },
          "policyCreatedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyCreatedDetails"
              }
            ],
            "description": "specific fields for POLICY_CREATED events",
            "nullable": true,
            "readOnly": true
          },
          "policyDeletedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyDeletedDetails"
              }
            ],
            "description": "specific fields for POLICY_DELETED events",
            "nullable": true,
            "readOnly": true
          },
          "policyModifiedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyModifiedDetails"
              }
            ],
            "description": "specific fields for POLICY_MODIFIED events",
            "nullable": true,
            "readOnly": true
          },
          "providerCreatedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderCreatedDetails"
              }
            ],
            "description": "specific fields for PROVIDER_CREATED events",
            "nullable": true,
            "readOnly": true
          },
          "providerDeletedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderDeletedDetails"
              }
            ],
            "description": "specific fields for PROVIDER_DELETED events",
            "nullable": true,
            "readOnly": true
          },
          "providerModifiedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderModifiedDetails"
              }
            ],
            "description": "specific fields for PROVIDER_MODIFIED events",
            "nullable": true,
            "readOnly": true
          },
          "resourceGroupCreatedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupCreatedDetails"
              }
            ],
            "description": "specific fields for RESOURCE_GROUP_CREATED events",
            "nullable": true,
            "readOnly": true
          },
          "resourceGroupDeletedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupDeletedDetails"
              }
            ],
            "description": "specific fields for RESOURCE_GROUP_DELETED events",
            "nullable": true,
            "readOnly": true
          },
          "resourceGroupModifiedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupModifiedDetails"
              }
            ],
            "description": "specific fields for RESOURCE_GROUP_MODIFIED events",
            "nullable": true,
            "readOnly": true
          },
          "tokenCreatedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenCreatedDetails"
              }
            ],
            "description": "specific fields for TOKEN_CREATED events",
            "nullable": true,
            "readOnly": true
          },
          "tokenDeletedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenDeletedDetails"
              }
            ],
            "description": "specific fields for TOKEN_DELETED events",
            "nullable": true,
            "readOnly": true
          },
          "tokenModifiedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenModifiedDetails"
              }
            ],
            "description": "specific fields for TOKEN_MODIFIED events",
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTypeEnum"
              }
            ],
            "description": "type of event",
            "readOnly": true
          },
          "userCreatedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserCreatedDetails"
              }
            ],
            "description": "specific fields for USER_CREATED events",
            "nullable": true,
            "readOnly": true
          },
          "userDeletedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserDeletedDetails"
              }
            ],
            "description": "specific fields for USER_DELETED events",
            "nullable": true,
            "readOnly": true
          },
          "userModifiedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserModifiedDetails"
              }
            ],
            "description": "specific fields for USER_MODIFIED events",
            "nullable": true,
            "readOnly": true
          },
          "userPasswordChangedDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserPasswordChangedDetails"
              }
            ],
            "description": "specific fields for USER_PASSWORD_CHANGED events",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogAuthDetails": {
        "type": "object",
        "description": "Authentication details",
        "properties": {
          "userDetails": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogAuthUserDetails"
              }
            ],
            "description": "authenticated user details",
            "readOnly": true
          }
        }
      },
      "audit.LogAuthMFATypeEnum": {
        "type": "string",
        "description": "Authentication MFA type",
        "enum": [
          "BACKUP_CODE",
          "MAIL",
          "NONE",
          "SMS",
          "TOTP",
          "U2F",
          "UNKNOWN"
        ]
      },
      "audit.LogAuthUserDetails": {
        "type": "object",
        "description": "Authenticated user details",
        "properties": {
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogAuthUserTypeEnum"
              }
            ],
            "description": "authentication type",
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "authenticated user name",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogAuthUserTypeEnum": {
        "type": "string",
        "description": "Authentication type",
        "enum": [
          "ACCOUNT",
          "PROVIDER",
          "USER"
        ]
      },
      "audit.LogGroupCreatedDetails": {
        "type": "object",
        "description": "specific fields for GROUP_CREATED events",
        "properties": {
          "group": {
            "type": "string",
            "description": "Identifier of the group",
            "readOnly": true
          },
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupDetails"
              }
            ],
            "description": "Group details after creation",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogGroupDeletedDetails": {
        "type": "object",
        "description": "specific fields for GROUP_DELETED events",
        "properties": {
          "group": {
            "type": "string",
            "description": "Identifier of the group",
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupDetails"
              }
            ],
            "description": "Group details before deletion",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogGroupDetails": {
        "type": "object",
        "description": "Specific fields for GROUP events",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the group",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the group",
            "readOnly": true
          },
          "role": {
            "type": "string",
            "description": "Role of the group",
            "readOnly": true
          }
        }
      },
      "audit.LogGroupModifiedDetails": {
        "type": "object",
        "description": "specific fields for GROUP_MODIFIED events",
        "properties": {
          "group": {
            "type": "string",
            "description": "Identifier of the group",
            "readOnly": true
          },
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupDetails"
              }
            ],
            "description": "Group details after update",
            "nullable": true,
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogGroupDetails"
              }
            ],
            "description": "Group details before update",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogLoginSuccessDetails": {
        "type": "object",
        "description": "specific fields for LOGIN_SUCCESS events",
        "properties": {
          "mfaType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogAuthMFATypeEnum"
              }
            ],
            "description": "Used MFA while login",
            "nullable": true,
            "readOnly": true
          },
          "userAgent": {
            "type": "string",
            "description": "Browser's user agent",
            "readOnly": true
          }
        }
      },
      "audit.LogPolicyChanges": {
        "type": "object",
        "description": "Changed fields for POLICY events",
        "properties": {
          "identities": {
            "type": "array",
            "description": "Identities changed on the policy",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "resources": {
            "type": "array",
            "description": "Resources changed on the policy",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "audit.LogPolicyCreatedDetails": {
        "type": "object",
        "description": "specific fields for POLICY_CREATED events",
        "properties": {
          "added": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyChanges"
              }
            ],
            "description": "Policy changes",
            "nullable": true,
            "readOnly": true
          },
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyDetails"
              }
            ],
            "description": "Policy details after creation",
            "nullable": true,
            "readOnly": true
          },
          "policyId": {
            "type": "string",
            "description": "Id of the policy",
            "format": "uuid",
            "readOnly": true
          },
          "policyName": {
            "type": "string",
            "description": "Name of the policy",
            "readOnly": true
          }
        }
      },
      "audit.LogPolicyDeletedDetails": {
        "type": "object",
        "description": "specific fields for POLICY_DELETED events",
        "properties": {
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyDetails"
              }
            ],
            "description": "Policy details before deletion",
            "nullable": true,
            "readOnly": true
          },
          "policyId": {
            "type": "string",
            "description": "Id of the policy",
            "format": "uuid",
            "readOnly": true
          },
          "policyName": {
            "type": "string",
            "description": "Name of the policy",
            "readOnly": true
          },
          "removed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyChanges"
              }
            ],
            "description": "Policy changes",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogPolicyDetails": {
        "type": "object",
        "description": "Specific fields for POLICY events",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the policy",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the policy",
            "readOnly": true
          }
        }
      },
      "audit.LogPolicyModifiedDetails": {
        "type": "object",
        "description": "specific fields for POLICY_MODIFIED events",
        "properties": {
          "added": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyChanges"
              }
            ],
            "description": "Policy changes (addition)",
            "nullable": true,
            "readOnly": true
          },
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyDetails"
              }
            ],
            "description": "Policy details after update",
            "nullable": true,
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyDetails"
              }
            ],
            "description": "Policy details before update",
            "nullable": true,
            "readOnly": true
          },
          "policyId": {
            "type": "string",
            "description": "Id of the policy",
            "format": "uuid",
            "readOnly": true
          },
          "policyName": {
            "type": "string",
            "description": "Name of the policy",
            "readOnly": true
          },
          "removed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogPolicyChanges"
              }
            ],
            "description": "Policy changes (removal)",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogProviderCreatedDetails": {
        "type": "object",
        "description": "specific fields for PROVIDER_CREATED events",
        "properties": {
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderDetails"
              }
            ],
            "description": "Provider details after creation",
            "nullable": true,
            "readOnly": true
          },
          "ssoServiceURL": {
            "type": "string",
            "description": "SSO URL of the provider",
            "readOnly": true
          }
        }
      },
      "audit.LogProviderDeletedDetails": {
        "type": "object",
        "description": "specific fields for PROVIDER_DELETED events",
        "properties": {
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderDetails"
              }
            ],
            "description": "Provider details before deletion",
            "nullable": true,
            "readOnly": true
          },
          "ssoServiceURL": {
            "type": "string",
            "description": "SSO URL of the provider",
            "readOnly": true
          }
        }
      },
      "audit.LogProviderDetails": {
        "type": "object",
        "description": "specific fields for PROVIDER events",
        "properties": {
          "groupAttributeName": {
            "type": "string",
            "description": "SAML group attribute name of the provider",
            "readOnly": true
          },
          "requestSignatureEnabled": {
            "type": "boolean",
            "description": "SAML request signature enabled",
            "readOnly": true
          },
          "userAttributeName": {
            "type": "string",
            "description": "SAML user attribute name of the provider",
            "readOnly": true
          },
          "usersDisabled": {
            "type": "boolean",
            "description": "Provider use disabled account users",
            "readOnly": true
          }
        }
      },
      "audit.LogProviderModifiedDetails": {
        "type": "object",
        "description": "specific fields for PROVIDER_MODIFIED events",
        "properties": {
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderDetails"
              }
            ],
            "description": "Provider details after update",
            "nullable": true,
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogProviderDetails"
              }
            ],
            "description": "Provider details before update",
            "nullable": true,
            "readOnly": true
          },
          "ssoServiceURL": {
            "type": "string",
            "description": "SSO URL of the provider",
            "readOnly": true
          }
        }
      },
      "audit.LogResourceGroupChanges": {
        "type": "object",
        "description": "Changed fields for RESOURCE_GROUP events",
        "properties": {
          "resources": {
            "type": "array",
            "description": "Resources changed on the resource group",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "audit.LogResourceGroupCreatedDetails": {
        "type": "object",
        "description": "specific fields for RESOURCE_GROUP_CREATED events",
        "properties": {
          "added": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupChanges"
              }
            ],
            "description": "Resource group changes",
            "nullable": true,
            "readOnly": true
          },
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupDetails"
              }
            ],
            "description": "Resource group details after creation",
            "nullable": true,
            "readOnly": true
          },
          "resourceGroupId": {
            "type": "string",
            "description": "Id of the resource group",
            "format": "uuid",
            "readOnly": true
          },
          "resourceGroupName": {
            "type": "string",
            "description": "Name of the resource group",
            "readOnly": true
          }
        }
      },
      "audit.LogResourceGroupDeletedDetails": {
        "type": "object",
        "description": "specific fields for RESOURCE_GROUP_DELETED events",
        "properties": {
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupDetails"
              }
            ],
            "description": "Resource group details before deletion",
            "nullable": true,
            "readOnly": true
          },
          "removed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupChanges"
              }
            ],
            "description": "Resource group changes",
            "nullable": true,
            "readOnly": true
          },
          "resourceGroupId": {
            "type": "string",
            "description": "Id of the resource group",
            "format": "uuid",
            "readOnly": true
          },
          "resourceGroupName": {
            "type": "string",
            "description": "Name of the resource group",
            "readOnly": true
          }
        }
      },
      "audit.LogResourceGroupDetails": {
        "type": "object",
        "description": "Specific fields for RESOURCE_GROUP events",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the policy",
            "readOnly": true
          }
        }
      },
      "audit.LogResourceGroupModifiedDetails": {
        "type": "object",
        "description": "specific fields for RESOURCE_GROUP_MODIFIED events",
        "properties": {
          "added": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupChanges"
              }
            ],
            "description": "Resource group changes (addition)",
            "nullable": true,
            "readOnly": true
          },
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupDetails"
              }
            ],
            "description": "Resource group details after update",
            "nullable": true,
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupDetails"
              }
            ],
            "description": "Resource group details before update",
            "nullable": true,
            "readOnly": true
          },
          "removed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogResourceGroupChanges"
              }
            ],
            "description": "Resource group changes (removal)",
            "nullable": true,
            "readOnly": true
          },
          "resourceGroupId": {
            "type": "string",
            "description": "Id of the resource group",
            "format": "uuid",
            "readOnly": true
          },
          "resourceGroupName": {
            "type": "string",
            "description": "Name of the resource group",
            "readOnly": true
          }
        }
      },
      "audit.LogTokenCreatedDetails": {
        "type": "object",
        "description": "specific fields for TOKEN_CREATED events",
        "properties": {
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenDetails"
              }
            ],
            "description": "Token details after creation",
            "nullable": true,
            "readOnly": true
          },
          "tokenCreatedAt": {
            "type": "string",
            "description": "Token's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "tokenName": {
            "type": "string",
            "description": "Name of the token",
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "Login of the user",
            "readOnly": true
          }
        }
      },
      "audit.LogTokenDeletedDetails": {
        "type": "object",
        "description": "specific fields for TOKEN_DELETED events",
        "properties": {
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenDetails"
              }
            ],
            "description": "Token details before deletion",
            "nullable": true,
            "readOnly": true
          },
          "tokenCreatedAt": {
            "type": "string",
            "description": "Token's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "tokenName": {
            "type": "string",
            "description": "Name of the token",
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "Login of the user",
            "readOnly": true
          }
        }
      },
      "audit.LogTokenDetails": {
        "type": "object",
        "description": "specific fields for TOKEN events",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the token",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "description": "Token's expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "audit.LogTokenModifiedDetails": {
        "type": "object",
        "description": "specific fields for TOKEN_MODIFIED events",
        "properties": {
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenDetails"
              }
            ],
            "description": "Token details after update",
            "nullable": true,
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogTokenDetails"
              }
            ],
            "description": "Token details before update",
            "nullable": true,
            "readOnly": true
          },
          "tokenCreatedAt": {
            "type": "string",
            "description": "Token's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "tokenName": {
            "type": "string",
            "description": "Name of the token",
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "Login of the user",
            "readOnly": true
          }
        }
      },
      "audit.LogTypeEnum": {
        "type": "string",
        "description": "Audit event type",
        "enum": [
          "ACCOUNT_PASSWORD_CHANGED",
          "GROUP_CREATED",
          "GROUP_DELETED",
          "GROUP_MODIFIED",
          "LOGIN_SUCCESS",
          "POLICY_CREATED",
          "POLICY_DELETED",
          "POLICY_MODIFIED",
          "PROVIDER_CREATED",
          "PROVIDER_DELETED",
          "PROVIDER_MODIFIED",
          "RESOURCE_GROUP_CREATED",
          "RESOURCE_GROUP_DELETED",
          "RESOURCE_GROUP_MODIFIED",
          "TOKEN_CREATED",
          "TOKEN_DELETED",
          "TOKEN_MODIFIED",
          "USER_CREATED",
          "USER_DELETED",
          "USER_MODIFIED",
          "USER_PASSWORD_CHANGED"
        ]
      },
      "audit.LogUserCreatedDetails": {
        "type": "object",
        "description": "specific fields for USER_CREATED events",
        "properties": {
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserDetails"
              }
            ],
            "description": "User details after creation",
            "nullable": true,
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "Login of the user",
            "readOnly": true
          },
          "userCreatedAt": {
            "type": "string",
            "description": "User's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "userType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.UserTypeEnum"
              }
            ],
            "description": "Type of user created",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogUserDeletedDetails": {
        "type": "object",
        "description": "specific fields for USER_DELETED events",
        "properties": {
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserDetails"
              }
            ],
            "description": "User details before deletion",
            "nullable": true,
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "Login of the user",
            "readOnly": true
          },
          "userCreatedAt": {
            "type": "string",
            "description": "User's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "userType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.UserTypeEnum"
              }
            ],
            "description": "Type of user created",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogUserDetails": {
        "type": "object",
        "description": "specific fields for USER events",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the user",
            "readOnly": true
          },
          "group": {
            "type": "string",
            "description": "Group of the user",
            "readOnly": true
          },
          "passwordRecoveryEmail": {
            "type": "string",
            "description": "Email of the user",
            "nullable": true,
            "readOnly": true
          },
          "userType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.UserTypeEnum"
              }
            ],
            "description": "Type of user created",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "audit.LogUserModifiedDetails": {
        "type": "object",
        "description": "specific fields for USER_MODIFIED events",
        "properties": {
          "new": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserDetails"
              }
            ],
            "description": "User details after update",
            "nullable": true,
            "readOnly": true
          },
          "old": {
            "allOf": [
              {
                "$ref": "#/components/schemas/audit.LogUserDetails"
              }
            ],
            "description": "User details before update",
            "nullable": true,
            "readOnly": true
          },
          "user": {
            "type": "string",
            "description": "Login of the user",
            "readOnly": true
          },
          "userCreatedAt": {
            "type": "string",
            "description": "User's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "audit.LogUserPasswordChangedDetails": {
        "type": "object",
        "description": "specific fields for USER_PASSWORD_CHANGED events",
        "properties": {
          "user": {
            "type": "string",
            "description": "User name",
            "readOnly": true
          },
          "userCreatedAt": {
            "type": "string",
            "description": "User's creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "auth.AccessRule": {
        "type": "object",
        "description": "Access rule allowed to an application",
        "properties": {
          "method": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.HTTPMethodEnum"
              }
            ],
            "description": "Allowed Method",
            "readOnly": true
          },
          "path": {
            "type": "string",
            "description": "Allowed path",
            "readOnly": true
          }
        }
      },
      "auth.ApiApplication": {
        "type": "object",
        "description": "API Application",
        "properties": {
          "applicationId": {
            "type": "integer",
            "description": "ID of this Application",
            "readOnly": true
          },
          "applicationKey": {
            "type": "string",
            "description": "Key of this application",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of this application",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of this application",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.ApplicationStatusEnum"
              }
            ],
            "description": "Status of this application",
            "readOnly": true
          }
        }
      },
      "auth.ApiCredential": {
        "type": "object",
        "description": "API Credential",
        "properties": {
          "allowedIPs": {
            "type": "array",
            "description": "If defined, list of ip blocks which are allowed to call API with this credential",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          },
          "applicationId": {
            "type": "integer",
            "description": "ID of associated API Application",
            "readOnly": true
          },
          "creation": {
            "type": "string",
            "description": "Creation date of this credential",
            "format": "date-time",
            "readOnly": true
          },
          "credentialId": {
            "type": "integer",
            "description": "ID of this credential",
            "readOnly": true
          },
          "expiration": {
            "type": "string",
            "description": "Expiration date of this credential",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "lastUse": {
            "type": "string",
            "description": "Last use date of this credential",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "ovhSupport": {
            "type": "boolean",
            "description": "States whether this credential has been created by yourself or by the OVH support team",
            "readOnly": true
          },
          "rules": {
            "type": "array",
            "description": "API routes allowed to this credential",
            "items": {
              "$ref": "#/components/schemas/auth.AccessRule"
            },
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.CredentialStateEnum"
              }
            ],
            "description": "State of to this credential",
            "readOnly": true
          }
        }
      },
      "auth.ApplicationStatusEnum": {
        "type": "string",
        "description": "All states an API Application can be in",
        "enum": [
          "active",
          "blocked",
          "inactive",
          "trusted"
        ]
      },
      "auth.Certificate": {
        "type": "object",
        "description": "X509 Certificate",
        "properties": {
          "expiration": {
            "type": "string",
            "description": "Certificate's expiration",
            "format": "date-time",
            "readOnly": true
          },
          "subject": {
            "type": "string",
            "description": "Certificate's subject",
            "readOnly": true
          }
        }
      },
      "auth.CredentialStateEnum": {
        "type": "string",
        "description": "All states a Credential can be in",
        "enum": [
          "expired",
          "pendingValidation",
          "refused",
          "validated"
        ]
      },
      "auth.Group": {
        "type": "object",
        "description": "An IAM Group",
        "properties": {
          "creation": {
            "type": "string",
            "description": "Creation date of this group",
            "format": "date-time",
            "readOnly": true
          },
          "defaultGroup": {
            "type": "boolean",
            "description": "Whether it is a default group. This kind of group can't be edited or deleted",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Group's description",
            "nullable": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update of this group",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Group's name",
            "readOnly": true
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.RoleEnum"
              }
            ],
            "description": "Group's role"
          },
          "urn": {
            "type": "string",
            "description": "IAM identity URN of the group",
            "readOnly": true
          }
        }
      },
      "auth.GroupRequest": {
        "type": "object",
        "description": "A new IAM group",
        "properties": {
          "description": {
            "type": "string",
            "description": "Group's description",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Group's name"
          },
          "role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.RoleEnum"
              }
            ],
            "description": "Group's role"
          }
        },
        "required": [
          "name"
        ]
      },
      "auth.HTTPMethodEnum": {
        "type": "string",
        "description": "All HTTP methods available",
        "enum": [
          "DELETE",
          "GET",
          "POST",
          "PUT"
        ]
      },
      "auth.PersonalAccessToken": {
        "type": "object",
        "description": "A personal access token response",
        "properties": {
          "creation": {
            "type": "string",
            "description": "Creation date of this token",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Personal access token's description",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "description": "Personal access token's expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "lastUsed": {
            "type": "string",
            "description": "Personal access token's last used date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of this token",
            "readOnly": true
          }
        }
      },
      "auth.PersonalAccessTokenModifyRequest": {
        "type": "object",
        "description": "A personal access token modify request",
        "properties": {
          "description": {
            "type": "string",
            "description": "Personal access token's description"
          },
          "expiresAt": {
            "type": "string",
            "description": "Personal access token's expiration date",
            "nullable": true,
            "format": "date-time"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Duration (in seconds) of the token's validity",
            "nullable": true
          }
        }
      },
      "auth.PersonalAccessTokenRequest": {
        "type": "object",
        "description": "A personal access token creation request",
        "properties": {
          "description": {
            "type": "string",
            "description": "Personal access token's description"
          },
          "expiresAt": {
            "type": "string",
            "description": "Personal access token's expiration date",
            "format": "date-time"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Duration (in seconds) of the token's validity"
          },
          "name": {
            "type": "string",
            "description": "Personal access token's name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "auth.PersonalAccessTokenResponse": {
        "type": "object",
        "description": "Personal access token usable on OVHcloud's applications",
        "properties": {
          "creation": {
            "type": "string",
            "description": "Creation date of this token",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Personal access token's description",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "description": "Personal access token's expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "lastUsed": {
            "type": "string",
            "description": "Personal access token's last used date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of this token",
            "readOnly": true
          },
          "token": {
            "type": "string",
            "description": "Personal access token",
            "format": "password",
            "readOnly": true
          }
        }
      },
      "auth.Provider": {
        "type": "object",
        "description": "An IAM Federation Provider",
        "properties": {
          "creation": {
            "type": "string",
            "description": "Creation date of the identity provider",
            "format": "date-time",
            "readOnly": true
          },
          "disableUsers": {
            "type": "boolean",
            "description": "Whether account users should still be usable as a login method or not",
            "nullable": true
          },
          "extensions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.ProviderExtensions"
              }
            ],
            "description": "SAML Extensions to embed inside the SAML requests"
          },
          "groupAttributeName": {
            "type": "string",
            "description": "SAML Group attribute name"
          },
          "idpSigningCertificates": {
            "type": "array",
            "description": "IdP's signing certificate",
            "items": {
              "$ref": "#/components/schemas/auth.Certificate"
            },
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update of the identity provider",
            "format": "date-time",
            "readOnly": true
          },
          "signRequests": {
            "type": "boolean",
            "description": "Whether SAML Authn Requests should be signed",
            "nullable": true
          },
          "ssoServiceUrl": {
            "type": "string",
            "description": "IdP's Single Sign On Service Url",
            "readOnly": true
          },
          "userAttributeName": {
            "type": "string",
            "description": "SAML User attribute name"
          }
        }
      },
      "auth.ProviderExtensions": {
        "type": "object",
        "description": "A SAML 2.0 Extension that should be added to SAML requests when using this provider",
        "properties": {
          "requestedAttributes": {
            "type": "array",
            "description": "List of SAML RequestedAttribute to add to SAML requests",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/auth.ProviderRequestedAttributes"
            }
          }
        }
      },
      "auth.ProviderRequest": {
        "type": "object",
        "description": "An IAM Federation Provider creation request",
        "properties": {
          "disableUsers": {
            "type": "boolean",
            "description": "Whether account users should still be usable as a login method or not",
            "nullable": true
          },
          "extensions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.ProviderExtensions"
              }
            ],
            "description": "SAML Extensions to embed inside the SAML requests"
          },
          "groupAttributeName": {
            "type": "string",
            "description": "SAML Group attribute name",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "description": "IdP's signing certificate"
          },
          "signRequests": {
            "type": "boolean",
            "description": "Whether SAML Authn Requests should be signed",
            "nullable": true
          },
          "userAttributeName": {
            "type": "string",
            "description": "SAML User attribute name",
            "nullable": true
          }
        },
        "required": [
          "metadata"
        ]
      },
      "auth.ProviderRequestedAttributes": {
        "type": "object",
        "description": "A SAML 2.0 requested attribute that should be added to SAML requests when using this provider",
        "properties": {
          "isRequired": {
            "type": "boolean",
            "description": "Expresses that this RequestedAttribute is mandatory (remains advisory)"
          },
          "name": {
            "type": "string",
            "description": "Name of the SAML RequestedAttribute"
          },
          "nameFormat": {
            "type": "string",
            "description": "NameFormat of the SAML RequestedAttribute",
            "nullable": true
          },
          "values": {
            "type": "array",
            "description": "List of AttributeValues allowed for this RequestedAttribute",
            "nullable": true,
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "isRequired",
          "name"
        ]
      },
      "auth.RoleEnum": {
        "type": "string",
        "description": "Permission given on the account",
        "enum": [
          "ADMIN",
          "NONE",
          "REGULAR",
          "UNPRIVILEGED"
        ]
      },
      "auth.User": {
        "type": "object",
        "description": "An IAM User",
        "properties": {
          "creation": {
            "type": "string",
            "description": "Creation date of this user",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "User's description"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "nullable": true
          },
          "group": {
            "type": "string",
            "description": "User's group"
          },
          "lastUpdate": {
            "type": "string",
            "description": "User's last update date",
            "format": "date-time",
            "readOnly": true
          },
          "login": {
            "type": "string",
            "description": "User's login suffix",
            "readOnly": true
          },
          "passwordLastUpdate": {
            "type": "string",
            "description": "User's password last update date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.UserStatusEnum"
              }
            ],
            "description": "Current user's status",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.UserTypeEnum"
              }
            ],
            "description": "Type of user",
            "nullable": true,
            "readOnly": true
          },
          "urn": {
            "type": "string",
            "description": "IAM identity URN of the user",
            "readOnly": true
          }
        }
      },
      "auth.UserRequest": {
        "type": "object",
        "description": "An IAM user creation request",
        "properties": {
          "description": {
            "type": "string",
            "description": "User's description"
          },
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "group": {
            "type": "string",
            "description": "User's group"
          },
          "login": {
            "type": "string",
            "description": "User's login"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "format": "password"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/auth.UserTypeEnum"
              }
            ],
            "description": "Type of user to create"
          }
        },
        "required": [
          "login"
        ]
      },
      "auth.UserStatusEnum": {
        "type": "string",
        "description": "Status of a User",
        "enum": [
          "DISABLED",
          "OK",
          "PASSWORD_CHANGE_REQUIRED"
        ]
      },
      "auth.UserTypeEnum": {
        "type": "string",
        "description": "Type of user",
        "enum": [
          "ROOT",
          "SERVICE",
          "USER"
        ]
      },
      "billing.ArchiveTypeEnum": {
        "type": "string",
        "description": "List of available archive types",
        "enum": [
          "csv",
          "zip"
        ]
      },
      "billing.AutomaticPaymentMean": {
        "type": "object",
        "description": "Available automatic payment means",
        "properties": {
          "bankAccount": {
            "type": "boolean",
            "description": "Bank Account"
          },
          "creditCard": {
            "type": "boolean",
            "description": "Credit Card"
          },
          "deferredPaymentAccount": {
            "type": "boolean",
            "description": "Deferred invoice payment account for authorized customers"
          },
          "paypal": {
            "type": "boolean",
            "description": "Paypal account"
          }
        }
      },
      "billing.Bill": {
        "type": "object",
        "description": "Details about a Bill",
        "properties": {
          "billId": {
            "type": "string",
            "readOnly": true
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.CategoryEnum"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "readOnly": true
          },
          "pdfUrl": {
            "type": "string",
            "readOnly": true
          },
          "priceWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "priceWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "tax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.BillDetail": {
        "type": "object",
        "description": "Information about a Bill entry",
        "properties": {
          "billDetailId": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "periodEnd": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "readOnly": true
          },
          "periodStart": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "readOnly": true
          },
          "quantity": {
            "type": "string",
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.LongPrice"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.BillingTaskStatusEnum": {
        "type": "string",
        "description": "billing task status",
        "enum": [
          "cancelled",
          "customerError",
          "doing",
          "done",
          "init",
          "ovhError",
          "todo"
        ]
      },
      "billing.CategoryEnum": {
        "type": "string",
        "description": "Types of plans",
        "enum": [
          "autorenew",
          "earlyrenewal",
          "purchase",
          "purchase-cloud",
          "purchase-servers",
          "purchase-telecom",
          "purchase-web"
        ]
      },
      "billing.CreditBalance": {
        "type": "object",
        "description": "Credit balance applied on an Order",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Amount applied from the balance",
            "readOnly": true
          },
          "balanceName": {
            "type": "string",
            "description": "Credit balance name",
            "readOnly": true
          }
        }
      },
      "billing.Deposit": {
        "type": "object",
        "description": "Details about a deposit",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "depositId": {
            "type": "string",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "readOnly": true
          },
          "paymentInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/debt.associatedObject.PaymentInfo"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "pdfUrl": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.DepositDetail": {
        "type": "object",
        "description": "Information about a Deposit entry",
        "properties": {
          "depositDetailId": {
            "type": "string",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "quantity": {
            "type": "string",
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.FidelityAccount": {
        "type": "object",
        "description": "Balance of the fidelity account",
        "properties": {
          "alertThreshold": {
            "type": "integer",
            "nullable": true
          },
          "balance": {
            "type": "integer",
            "readOnly": true
          },
          "canBeCredited": {
            "type": "boolean",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "openDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "billing.FidelityMovement": {
        "type": "object",
        "description": "Details about a fidelity account",
        "properties": {
          "amount": {
            "type": "integer",
            "readOnly": true
          },
          "balance": {
            "type": "integer",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "movementId": {
            "type": "integer",
            "readOnly": true
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.fidelityAccount.OperationEnum"
              }
            ],
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "readOnly": true
          },
          "previousBalance": {
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "billing.ItemDetail": {
        "type": "object",
        "description": "Extensions of a detail",
        "properties": {
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.ItemDetail.Order"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.ItemDetail.Order": {
        "type": "object",
        "description": "Order data for this Detail",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.ItemDetail.OrderActionEnum"
              }
            ],
            "description": "The meaning of this order detail",
            "nullable": true
          },
          "configurations": {
            "type": "array",
            "description": "Configurations chosen during the order",
            "items": {
              "$ref": "#/components/schemas/billing.ItemDetail.OrderConfiguration"
            }
          },
          "plan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.ItemDetail.OrderPlan"
              }
            ],
            "description": "Plan from /order/cart"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.ItemDetail.OrderDetailTypeEnum"
              }
            ],
            "description": "Type of the detail to match with values inside the catalog",
            "nullable": true
          }
        }
      },
      "billing.ItemDetail.OrderActionEnum": {
        "type": "string",
        "description": "List of order actions",
        "enum": [
          "consumption",
          "detach",
          "installation",
          "renew",
          "revert",
          "upgrade"
        ]
      },
      "billing.ItemDetail.OrderConfiguration": {
        "type": "object",
        "description": "Configuration of order",
        "properties": {
          "label": {
            "type": "string",
            "description": "Label of the configuration"
          },
          "value": {
            "type": "string",
            "description": "Value of the configuration"
          }
        }
      },
      "billing.ItemDetail.OrderDetailTypeEnum": {
        "type": "string",
        "description": "List of order detail types",
        "enum": [
          "plan",
          "product"
        ]
      },
      "billing.ItemDetail.OrderPlan": {
        "type": "object",
        "description": "Plan data from order",
        "properties": {
          "code": {
            "type": "string",
            "description": "Plan code used when ordering through /order/cart",
            "nullable": true
          },
          "duration": {
            "type": "string",
            "description": "Duration chosen when ordering through /order/cart (ISO 8601)",
            "nullable": true
          },
          "pricingMode": {
            "type": "string",
            "description": "Pricing mode used when ordering through /order/cart",
            "nullable": true
          },
          "product": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.ItemDetail.OrderPlanProduct"
              }
            ],
            "description": "Product from /order/cart"
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity ordered",
            "nullable": true
          }
        }
      },
      "billing.ItemDetail.OrderPlanProduct": {
        "type": "object",
        "description": "Product data from order",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the product used when ordering through /order/cart",
            "nullable": true
          }
        }
      },
      "billing.ManualDomainPaymentStatus": {
        "type": "object",
        "description": "Status of your manual domain payment migration",
        "properties": {
          "domainsToMigrate": {
            "type": "integer",
            "description": "Total number of domains that needs to be migrated to manual renew mode",
            "nullable": true
          },
          "migratedDomains": {
            "type": "integer",
            "description": "Total number of domains successfully migrated to manual renew mode",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/billing.BillingTaskStatusEnum"
          }
        }
      },
      "billing.Movement": {
        "type": "object",
        "description": "Details about an OVH account",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "movementId": {
            "type": "integer",
            "readOnly": true
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.ovhAccount.OperationEnum"
              }
            ],
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "readOnly": true
          },
          "previousBalance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "retrievableAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.Order": {
        "type": "object",
        "description": "Details about an Order",
        "properties": {
          "date": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "expirationDate": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "readOnly": true
          },
          "pdfUrl": {
            "type": "string",
            "readOnly": true
          },
          "priceWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "priceWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "retractionDate": {
            "type": "string",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "tax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.OrderDetail": {
        "type": "object",
        "description": "Information about a Bill entry",
        "properties": {
          "cancelled": {
            "type": "boolean",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "detailType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.OrderDetailTypeEnum"
              }
            ],
            "nullable": true,
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "orderDetailId": {
            "type": "integer",
            "readOnly": true
          },
          "quantity": {
            "type": "string",
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.OvhAccount": {
        "type": "object",
        "description": "Details about an OVH account",
        "properties": {
          "alertThreshold": {
            "type": "integer",
            "nullable": true
          },
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "canBeCredited": {
            "type": "boolean",
            "readOnly": true
          },
          "isActive": {
            "type": "boolean",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "openDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "ovhAccountId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.Payment": {
        "type": "object",
        "description": "Details about a payment",
        "properties": {
          "paymentDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "paymentIdentifier": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.PaymentMeanEnum"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.PaymentMeanEnum": {
        "type": "string",
        "description": "All payment means you might have use on an OVH order",
        "enum": [
          "cash",
          "chargeback",
          "check",
          "cheque",
          "creditAccount",
          "creditCard",
          "debtAccount",
          "deposit",
          "digitalLaunchPad",
          "edinar",
          "fidelityPoints",
          "free",
          "ideal",
          "incubatorAccount",
          "mandat",
          "multibanco",
          "none",
          "ovhAccount",
          "paymentMandate",
          "paypal",
          "payu",
          "platnosci",
          "refund",
          "rupay",
          "transfer",
          "withdrawal"
        ]
      },
      "billing.Refund": {
        "type": "object",
        "description": "Details about a Refund",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "readOnly": true
          },
          "originalBillId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "password": {
            "type": "string",
            "readOnly": true
          },
          "pdfUrl": {
            "type": "string",
            "readOnly": true
          },
          "priceWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "priceWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "refundId": {
            "type": "string",
            "readOnly": true
          },
          "tax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.RefundDetail": {
        "type": "object",
        "description": "Information about a Bill entry",
        "properties": {
          "description": {
            "type": "string",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "quantity": {
            "type": "string",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "readOnly": true
          },
          "refundDetailId": {
            "type": "string",
            "readOnly": true
          },
          "refundId": {
            "type": "string",
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.ReusablePaymentMeanEnum": {
        "type": "string",
        "description": "Reusable payment mean type",
        "enum": [
          "CREDIT_CARD",
          "CURRENT_ACCOUNT",
          "DEFERRED_PAYMENT_ACCOUNT",
          "DOMESTIC_CARD",
          "ENTERPRISE",
          "INTERNAL_TRUSTED_ACCOUNT",
          "PAYPAL",
          "RUPAY",
          "SEPA_DIRECT_DEBIT",
          "bankAccount",
          "creditCard",
          "deferredPaymentAccount",
          "fidelityAccount",
          "ovhAccount",
          "paypal"
        ]
      },
      "billing.ReversableBillDetail": {
        "type": "object",
        "description": "Information about withdrawal entry",
        "properties": {
          "description": {
            "type": "string",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "quantity": {
            "type": "string",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "readOnly": true
          },
          "reverseBillDetailId": {
            "type": "string",
            "readOnly": true
          },
          "reverseBillId": {
            "type": "string",
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.ReverseBill": {
        "type": "object",
        "description": "Details about a bill from customer",
        "properties": {
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "format": "password",
            "readOnly": true
          },
          "pdfUrl": {
            "type": "string",
            "readOnly": true
          },
          "priceWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "priceWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "reverseBillId": {
            "type": "string",
            "readOnly": true
          },
          "tax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.SlaOperation": {
        "type": "object",
        "description": "SLA properties",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date of the event that led to SLA",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the SLA operation for this incident",
            "readOnly": true
          },
          "endDate": {
            "type": "string",
            "description": "Date of the end of the SLA",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "SLA identifier",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Sla operation name",
            "readOnly": true
          },
          "startDate": {
            "type": "string",
            "description": "Date of the start of the SLA",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "billing.SlaOperationService": {
        "type": "object",
        "description": "Describe all services impacted by SLA",
        "properties": {
          "description": {
            "type": "string",
            "description": "Service description"
          },
          "serviceName": {
            "type": "string",
            "description": "Impacted service name"
          },
          "slaApplication": {
            "type": "string",
            "description": "SLA plan application"
          },
          "slaPlan": {
            "type": "string",
            "description": "SLA plan description"
          }
        }
      },
      "billing.VoucherAccount": {
        "type": "object",
        "description": "Details about a Voucher account",
        "properties": {
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "openDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "voucherAccountId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.VoucherMovement": {
        "type": "object",
        "description": "Details about a voucher account",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "balance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "readOnly": true
          },
          "movementId": {
            "type": "integer",
            "readOnly": true
          },
          "operation": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.voucherAccount.OperationEnum"
              }
            ],
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "readOnly": true
          },
          "previousBalance": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          }
        }
      },
      "billing.Withdrawal": {
        "type": "object",
        "description": "Details about a withdrawal",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "country": {
            "type": "string",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "readOnly": true
          },
          "password": {
            "type": "string",
            "readOnly": true
          },
          "pdfUrl": {
            "type": "string",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "readOnly": true
          },
          "withdrawalId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.WithdrawalDetail": {
        "type": "object",
        "description": "Information about a Withdrawal entry",
        "properties": {
          "description": {
            "type": "string",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "quantity": {
            "type": "string",
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "readOnly": true
          },
          "withdrawalDetailId": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "billing.fidelityAccount.OperationEnum": {
        "type": "string",
        "description": "Operations a fidelity account movement can represent",
        "enum": [
          "bonus",
          "cancel-bonus",
          "cancel-credit",
          "cancel-debit",
          "cancel-pre-debit",
          "credit",
          "debit",
          "pre-credit",
          "pre-debit"
        ]
      },
      "billing.order.AssociatedObject": {
        "type": "object",
        "description": "The object the processing of the order leaded to",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.order.associatedObject.TypeEnum"
              }
            ],
            "nullable": true
          }
        }
      },
      "billing.order.AvailablePaymentMean": {
        "type": "object",
        "description": "All data needed to use a payment mean",
        "properties": {
          "fields": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.AvailablePaymentMeanField"
            }
          },
          "integration": {
            "$ref": "#/components/schemas/billing.order.PaymentMeanIntegrationEnum"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "billing.order.AvailablePaymentMeanField": {
        "type": "object",
        "description": "All fields needed for a payment mean integration",
        "properties": {
          "key": {
            "type": "string"
          },
          "options": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "type": {
            "$ref": "#/components/schemas/billing.order.PaymentMeanFieldTypeEnum"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "billing.order.ConsumptionDetails": {
        "type": "object",
        "description": "Detailed consumption's retrieval information",
        "properties": {
          "fileFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/consumption.ConsumptionExportFormatsEnum"
              }
            ],
            "description": "Format of the file",
            "nullable": true
          },
          "fileURL": {
            "type": "string",
            "description": "Temporary URL to download detailed consumption",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Request's state description",
            "nullable": true
          },
          "taskId": {
            "type": "integer",
            "description": "Consumption details export task's identifier"
          },
          "taskStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/consumption.ConsumptionExportTaskStatusEnum"
              }
            ],
            "description": "Consumption details export task's status"
          }
        }
      },
      "billing.order.FollowUp": {
        "type": "object",
        "description": "Follow up history of an order",
        "properties": {
          "history": {
            "type": "array",
            "description": "Step history of order follow-up",
            "items": {
              "$ref": "#/components/schemas/billing.order.followUp.History"
            }
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.order.followUp.StatusEnum"
              }
            ],
            "description": "Step status of order follow-up"
          },
          "step": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.order.followUp.StepEnum"
              }
            ],
            "description": "Step of order follow-up"
          }
        }
      },
      "billing.order.OrderStatusEnum": {
        "type": "string",
        "description": "All possible order status",
        "enum": [
          "cancelled",
          "cancelling",
          "checking",
          "delivered",
          "delivering",
          "documentsRequested",
          "notPaid",
          "unknown"
        ]
      },
      "billing.order.PayWithPaymentMethod": {
        "type": "object",
        "description": "Pay with payment method parameter",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of payment method for pay this order"
          }
        }
      },
      "billing.order.PaymentMean": {
        "type": "object",
        "description": "All data needed to use a payment mean",
        "properties": {
          "fee": {
            "type": "number"
          },
          "htmlForm": {
            "type": "string",
            "nullable": true
          },
          "httpMethod": {
            "type": "string"
          },
          "logo": {
            "type": "string",
            "nullable": true
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/billing.order.paymentMean.HttpParameter"
            }
          },
          "subType": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          }
        }
      },
      "billing.order.PaymentMeanFieldTypeEnum": {
        "type": "string",
        "description": "Field type of a payment mean",
        "enum": [
          "hidden",
          "select",
          "text"
        ]
      },
      "billing.order.PaymentMeanIntegrationEnum": {
        "type": "string",
        "description": "Integration payment mean type",
        "enum": [
          "GET_FORM",
          "POST_FORM",
          "REDIRECT"
        ]
      },
      "billing.order.PaymentMeans": {
        "type": "object",
        "description": "TODO",
        "properties": {
          "creditCard": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "edinar": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "fidelityPoints": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "ideal": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "multibanco": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "ovhAccount": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "paypal": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          },
          "promotion": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.PaymentMean"
            }
          }
        }
      },
      "billing.order.PaymentMethods": {
        "type": "object",
        "description": "Payment methods",
        "properties": {
          "available": {
            "type": "array",
            "description": "Payment method available on this order",
            "items": {
              "$ref": "#/components/schemas/payment.method.AvailablePaymentMethod"
            }
          },
          "paymentMethods": {
            "type": "array",
            "description": "List of registered Payment methods usable on this order",
            "items": {
              "$ref": "#/components/schemas/payment.method.PaymentMethod"
            }
          },
          "registered": {
            "type": "array",
            "description": "IDs of registered payment method usable on this order",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "billing.order.RegisteredPaymentMean": {
        "type": "object",
        "description": "A registered payment mean",
        "properties": {
          "paymentMean": {
            "$ref": "#/components/schemas/billing.ReusablePaymentMeanEnum"
          }
        }
      },
      "billing.order.RetractionReasonEnum": {
        "type": "string",
        "description": "Retraction reason type",
        "enum": [
          "competitor",
          "difficulty",
          "expensive",
          "other",
          "performance",
          "reliability",
          "unused"
        ]
      },
      "billing.order.associatedObject.TypeEnum": {
        "type": "string",
        "description": "Type of objects an order can be linked to",
        "enum": [
          "Bill",
          "Deposit",
          "Refund",
          "ReverseBill",
          "Withdrawal"
        ]
      },
      "billing.order.followUp.History": {
        "type": "object",
        "description": "Step history of order follow-up",
        "properties": {
          "date": {
            "type": "string",
            "description": "History date of order follow-up",
            "format": "date-time"
          },
          "description": {
            "type": "string",
            "description": "History description of order follow-up"
          },
          "label": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.order.followUp.HistoryStatusEnum"
              }
            ],
            "description": "History label of order follow-up"
          }
        }
      },
      "billing.order.followUp.HistoryStatusEnum": {
        "type": "string",
        "description": "History label of order follow-up",
        "enum": [
          "DELIVERY",
          "FRAUD_CHECK",
          "FRAUD_DOCS_REQUESTED",
          "FRAUD_MANUAL_REVIEW",
          "FRAUD_REFUSED",
          "INVOICE_IN_PROGRESS",
          "INVOICE_SENT",
          "ORDER_ACCEPTED",
          "ORDER_STARTED",
          "PAYMENT_CONFIRMED",
          "PAYMENT_INITIATED",
          "PAYMENT_RECEIVED",
          "REGISTERED_PAYMENT_INITIATED"
        ]
      },
      "billing.order.followUp.StatusEnum": {
        "type": "string",
        "description": "Step status of order follow-up",
        "enum": [
          "DOING",
          "DONE",
          "ERROR",
          "TODO"
        ]
      },
      "billing.order.followUp.StepEnum": {
        "type": "string",
        "description": "Status of order follow-up",
        "enum": [
          "AVAILABLE",
          "DELIVERING",
          "VALIDATED",
          "VALIDATING"
        ]
      },
      "billing.order.paymentMean.HttpParameter": {
        "type": "object",
        "description": "Parameter to give to a payment page",
        "properties": {
          "choice": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/billing.order.paymentMean.HttpParameterChoice"
            }
          },
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "billing.order.paymentMean.HttpParameterChoice": {
        "type": "object",
        "description": "Choice for an HTTP multi value parameter",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "billing.ovhAccount.OperationEnum": {
        "type": "string",
        "description": "Operations an OVH account movement can represent",
        "enum": [
          "cancel-credit",
          "cancel-debit",
          "cancel-pre-debit",
          "credit",
          "debit",
          "pre-credit",
          "pre-debit"
        ]
      },
      "billing.voucherAccount.OperationEnum": {
        "type": "string",
        "description": "Operations a voucher account movement can represent",
        "enum": [
          "cancel-credit",
          "cancel-debit",
          "cancel-pre-debit",
          "credit",
          "debit",
          "pre-credit",
          "pre-debit"
        ]
      },
      "carbonCalculator.CalculationRequest": {
        "type": "object",
        "description": "Request body for the calculation of customer's carbon impact",
        "properties": {
          "date": {
            "type": "string",
            "description": "Month of the requested document (day is ignored)",
            "format": "date"
          }
        },
        "required": [
          "date"
        ]
      },
      "carbonCalculator.CalculationResponse": {
        "type": "object",
        "description": "Response for request of customer's carbon impact",
        "properties": {
          "taskID": {
            "type": "string",
            "description": "ID of the calculation task",
            "readOnly": true
          }
        }
      },
      "carbonCalculator.HasInvoiceResponse": {
        "type": "object",
        "description": "Boolean to determine if account can generate invoice",
        "properties": {
          "hasInvoice": {
            "type": "boolean",
            "description": "Whether the account has data to generate invoice",
            "readOnly": true
          }
        }
      },
      "carbonCalculator.Task": {
        "type": "object",
        "description": "Task to generate a carbon impact document",
        "properties": {
          "link": {
            "type": "string",
            "description": "Link to the document",
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/carbonCalculator.Task.TaskStatusEnum"
              }
            ],
            "description": "Status of the task",
            "readOnly": true
          },
          "taskID": {
            "type": "string",
            "description": "ID of the task",
            "readOnly": true
          }
        }
      },
      "carbonCalculator.Task.TaskStatusEnum": {
        "type": "string",
        "description": "Status of a calculation task",
        "enum": [
          "ERROR",
          "IN_PROGRESS",
          "SUCCESS"
        ]
      },
      "complexType.SafeKeyValue_string": {
        "type": "object",
        "description": "Key and value, with proper key strings",
        "properties": {
          "key": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "string"
          }
        }
      },
      "complexType.UnitAndValue_long": {
        "type": "object",
        "description": "A numeric value tagged with its unit",
        "properties": {
          "unit": {
            "type": "string"
          },
          "value": {
            "type": "integer"
          }
        }
      },
      "consumption.ConsumptionExportFormatsEnum": {
        "type": "string",
        "description": "Export file format",
        "enum": [
          "csv"
        ]
      },
      "consumption.ConsumptionExportTaskStatusEnum": {
        "type": "string",
        "description": "Export task status",
        "enum": [
          "DOING",
          "DONE",
          "ERROR",
          "TODO"
        ]
      },
      "contact.Address": {
        "type": "object",
        "description": "Representation of an Address",
        "properties": {
          "city": {
            "type": "string",
            "description": "City"
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Country"
          },
          "line1": {
            "type": "string",
            "description": "First line of the address"
          },
          "line2": {
            "type": "string",
            "description": "Second line of the address",
            "nullable": true
          },
          "line3": {
            "type": "string",
            "description": "Third line of the address",
            "nullable": true
          },
          "otherDetails": {
            "type": "string",
            "description": "Others details",
            "nullable": true
          },
          "province": {
            "type": "string",
            "description": "Province name",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "Zipcode"
          }
        }
      },
      "contact.Contact": {
        "type": "object",
        "description": "Representation of a Contact",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/contact.Address"
              }
            ],
            "description": "Address for this contact"
          },
          "birthCity": {
            "type": "string",
            "description": "Birth city",
            "nullable": true
          },
          "birthCountry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Birth Country",
            "nullable": true
          },
          "birthDay": {
            "type": "string",
            "description": "Birth date",
            "nullable": true,
            "format": "date"
          },
          "birthZip": {
            "type": "string",
            "description": "Birth Zipcode",
            "nullable": true
          },
          "cellPhone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phoneNumber"
              }
            ],
            "description": "Cellphone number",
            "nullable": true
          },
          "companyNationalIdentificationNumber": {
            "type": "string",
            "description": "National identification number of your company",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "fax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phoneNumber"
              }
            ],
            "description": "Fax number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.GenderEnum"
              }
            ],
            "description": "Gender",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Contact Identifier",
            "readOnly": true
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LanguageEnum"
              }
            ],
            "description": "Language"
          },
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "legalForm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LegalFormEnum"
              }
            ],
            "description": "Legal form of the contact"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "description": "National identification number of the contact",
            "nullable": true
          },
          "nationality": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Nationality",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "description": "Organisation name",
            "nullable": true
          },
          "organisationType": {
            "type": "string",
            "description": "Organisation type",
            "nullable": true
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phoneNumber"
              }
            ],
            "description": "Telephone number",
            "nullable": true
          },
          "spareEmail": {
            "type": "string",
            "description": "Spare email address",
            "nullable": true
          },
          "vat": {
            "type": "string",
            "description": "VAT number",
            "nullable": true
          }
        }
      },
      "contact.FieldInformation": {
        "type": "object",
        "description": "Extras informations about a field",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "Name of the field concerned by restrictions"
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the field is mandatory when editing"
          },
          "readOnly": {
            "type": "boolean",
            "description": "Indicates if the field can't be edited"
          }
        }
      },
      "dbaas.logs.LogKind": {
        "type": "object",
        "description": "Log kind",
        "properties": {
          "additionalReturnedFields": {
            "type": "array",
            "description": "List of additional log fields managed in this log kind",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Creation date of the log kind",
            "format": "date-time",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Log kind display name",
            "readOnly": true
          },
          "kindId": {
            "type": "string",
            "description": "Log kind ID",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Log kind name",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date of the log kind",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogSubscription": {
        "type": "object",
        "description": "Log subscription",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Creation date of the subscription",
            "format": "date-time",
            "readOnly": true
          },
          "kind": {
            "type": "string",
            "description": "Log kind name of this subscription",
            "readOnly": true
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResource"
              }
            ],
            "description": "Subscribed resource, where the logs come from",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Name of the destination log service",
            "readOnly": true
          },
          "streamId": {
            "type": "string",
            "description": "Id of the destination log stream",
            "readOnly": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "format": "uuid",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date of the subscription",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogSubscriptionCreation": {
        "type": "object",
        "description": "Log subscription creation payload",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Log kind name to subscribe to"
          },
          "streamId": {
            "type": "string",
            "description": "Customer log stream ID",
            "format": "uuid"
          }
        },
        "required": [
          "kind",
          "streamId"
        ]
      },
      "dbaas.logs.LogSubscriptionResource": {
        "type": "object",
        "description": "Log subscription resource",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of subscribed resource",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Type of subscribed resource",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogSubscriptionResponse": {
        "type": "object",
        "description": "Asynchronous operation after subscribing or unsubscribing to a resource logs",
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Identifier of the operation",
            "format": "uuid",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Operation owner's service name",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogUrlCreation": {
        "type": "object",
        "description": "Log temporary URL creation payload",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Log kind name"
          }
        },
        "required": [
          "kind"
        ]
      },
      "dbaas.logs.TemporaryLogsLink": {
        "type": "object",
        "description": "Temporary url information",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Temporary url expiration date",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Temporary url",
            "readOnly": true
          }
        }
      },
      "debt.Balance": {
        "type": "object",
        "description": "Debt balance of the account",
        "properties": {
          "active": {
            "type": "boolean",
            "readOnly": true
          },
          "dueAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Amount of debts the account has",
            "readOnly": true
          },
          "pendingAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Amount currently being processed",
            "readOnly": true
          },
          "todoAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Reserved amount awaiting payment",
            "readOnly": true
          },
          "unmaturedAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Unmatured amount for deferred payment term",
            "readOnly": true
          }
        }
      },
      "debt.Debt": {
        "type": "object",
        "description": "State of a debt",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Original amount of the debt",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date the debt was created on",
            "format": "date-time",
            "readOnly": true
          },
          "debtId": {
            "type": "integer",
            "readOnly": true
          },
          "dueAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Amount you still owe for that debt",
            "readOnly": true
          },
          "dueDate": {
            "type": "string",
            "description": "If specified, the debt will not be recovered before that date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "description": "The order the debt relates to",
            "readOnly": true
          },
          "pendingAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Amount currently being processed",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/debt.entry.StatusDebtOrderEnum"
              }
            ],
            "description": "Status of a debt",
            "readOnly": true
          },
          "todoAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Reserved amount awaiting payment",
            "readOnly": true
          },
          "unmaturedAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Unmatured amount for deferred payment term",
            "readOnly": true
          }
        }
      },
      "debt.Operation": {
        "type": "object",
        "description": "Operation that happend on a debt",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Amount of the operation",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date the operation took place on",
            "format": "date-time",
            "readOnly": true
          },
          "depositOrderId": {
            "type": "integer",
            "description": "Order id associated to the deposit",
            "readOnly": true
          },
          "operationId": {
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/debt.entry.StatusEnum"
              }
            ],
            "description": "Status of the operation",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/debt.entry.OperationEnum"
              }
            ],
            "description": "Type of movement this operation represents",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "debt.associatedObject.PaymentInfo": {
        "type": "object",
        "description": "The payment infos linked to this debt entry",
        "properties": {
          "description": {
            "type": "string",
            "description": "Optional customer description",
            "nullable": true
          },
          "paymentType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/billing.PaymentMeanEnum"
              }
            ],
            "description": "Payment mean used for this debt operation"
          },
          "publicLabel": {
            "type": "string",
            "description": "Public payment mean label",
            "nullable": true
          }
        }
      },
      "debt.associatedObject.TypeEnum": {
        "type": "string",
        "description": "Type of objects an order can be linked to",
        "enum": [
          "Bill",
          "DebtOperation",
          "Deposit",
          "Order",
          "OvhAccountMovement",
          "Refund",
          "Withdrawal"
        ]
      },
      "debt.entry.AssociatedObject": {
        "type": "object",
        "description": "The object linked to this debt entry",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "paymentInfo": {
            "allOf": [
              {
                "$ref": "#/components/schemas/debt.associatedObject.PaymentInfo"
              }
            ],
            "nullable": true
          },
          "subId": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/debt.associatedObject.TypeEnum"
              }
            ],
            "nullable": true
          }
        }
      },
      "debt.entry.OperationEnum": {
        "type": "string",
        "description": "All operations a debt entry can represent",
        "enum": [
          "BANK_TRANSFER_MANUAL",
          "CANCEL",
          "CASH_MANUAL",
          "CHECK_MANUAL",
          "CREDITCARD",
          "CREDITCARD_AUTOMATIC",
          "CREDITCARD_MANUAL",
          "CREDIT_ACCOUNT_AUTOMATIC",
          "CREDIT_CARD_AUTOMATIC",
          "CREDIT_CARD_MANUAL",
          "CURRENT_ACCOUNT_AUTOMATIC",
          "CURRENT_ACCOUNT_MANUAL",
          "DOMESTIC_CARD_AUTOMATIC",
          "DOMESTIC_CARD_MANUAL",
          "EDINAR_MANUAL",
          "ENTERPRISE_AUTOMATIC",
          "ENTERPRISE_MANUAL",
          "IDEAL_AUTOMATIC",
          "IDEAL_MANUAL",
          "INTERNAL_TRUSTED_ACCOUNT_AUTOMATIC",
          "INTERNAL_TRUSTED_ACCOUNT_MANUAL",
          "MULTIBANCO_AUTOMATIC",
          "MULTIBANCO_MANUAL",
          "ORDER",
          "PAYPAL_AUTOMATIC",
          "PAYPAL_MANUAL",
          "PAYU_AUTOMATIC",
          "PAYU_MANUAL",
          "RECOVERY_TRANSFER_AUTOMATIC",
          "REFUND",
          "REFUND_CHECK",
          "REFUND_CREDITCARD",
          "REFUND_CREDIT_ACCOUNT",
          "REFUND_CREDIT_CARD",
          "REFUND_CURRENT_ACCOUNT",
          "REFUND_DOMESTIC_CARD",
          "REFUND_ENTERPRISE",
          "REFUND_IDEAL",
          "REFUND_INTERNAL_TRUSTED_ACCOUNT",
          "REFUND_LOSS",
          "REFUND_MULTIBANCO",
          "REFUND_PAYPAL",
          "REFUND_PAYU",
          "REFUND_RUPAY",
          "REFUND_SEPA",
          "REFUND_SEPA_DIRECT_DEBIT",
          "REFUND_TRANSFER",
          "REFUND_UNKNOWN",
          "RUPAY_AUTOMATIC",
          "RUPAY_MANUAL",
          "SEPA_AUTOMATIC",
          "SEPA_DIRECT_DEBIT_AUTOMATIC",
          "SEPA_DIRECT_DEBIT_MANUAL",
          "TRANSFER_MANUAL",
          "UNPAID_CHECK",
          "UNPAID_CREDITCARD",
          "UNPAID_CREDIT_ACCOUNT",
          "UNPAID_CREDIT_CARD",
          "UNPAID_CURRENT_ACCOUNT",
          "UNPAID_DOMESTIC_CARD",
          "UNPAID_ENTERPRISE",
          "UNPAID_IDEAL",
          "UNPAID_INTERNAL_TRUSTED_ACCOUNT",
          "UNPAID_MULTIBANCO",
          "UNPAID_PAYPAL",
          "UNPAID_PAYU",
          "UNPAID_RUPAY",
          "UNPAID_SEPA",
          "UNPAID_SEPA_DIRECT_DEBIT",
          "UNPAID_WITHDRAW",
          "WARRANT_MANUAL",
          "WITHDRAW_AUTOMATIC"
        ]
      },
      "debt.entry.StatusDebtOrderEnum": {
        "type": "string",
        "description": "All status a debt HistoryOrder entry can be in",
        "enum": [
          "PAID",
          "REFUNDED",
          "TO_BE_PAID",
          "UNMATURED",
          "UNPAID",
          "WRITE_OFF"
        ]
      },
      "debt.entry.StatusEnum": {
        "type": "string",
        "description": "All status a debt entry can be in",
        "enum": [
          "CANCELLED",
          "DONE",
          "FAILED",
          "PAID",
          "PENDING",
          "TODO"
        ]
      },
      "dedicated.TemplateOsHardwareRaidEnum": {
        "type": "string",
        "description": "Hardware RAID enum",
        "enum": [
          "raid0",
          "raid1",
          "raid10",
          "raid5",
          "raid50",
          "raid6",
          "raid60"
        ]
      },
      "dedicated.TemplateOsInfoLicense": {
        "type": "object",
        "description": "A structure describing some interesting facts about an OS template licensing",
        "properties": {
          "os": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInfoLicenseItem"
              }
            ],
            "description": "OS template license OS details",
            "nullable": true
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInfoLicenseItem"
              }
            ],
            "description": "OS template license usage details",
            "nullable": true
          }
        }
      },
      "dedicated.TemplateOsInfoLicenseItem": {
        "type": "object",
        "description": "A structure describing some interesting facts about an OS template license item",
        "properties": {
          "name": {
            "type": "array",
            "description": "OS template license item names",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/dedicated.TemplateOsInfoLicenseItemEnum"
            }
          },
          "url": {
            "type": "string",
            "description": "OS template license item url",
            "nullable": true
          }
        }
      },
      "dedicated.TemplateOsInfoLicenseItemEnum": {
        "type": "string",
        "description": "Standard license name according to SPDX",
        "enum": [
          "0BSD",
          "AAL",
          "ADSL",
          "AFL-1.1",
          "AFL-1.2",
          "AFL-2.0",
          "AFL-2.1",
          "AFL-3.0",
          "AGPL-1.0-only",
          "AGPL-1.0-or-later",
          "AGPL-3.0-only",
          "AGPL-3.0-or-later",
          "AMDPLPA",
          "AML",
          "AMPAS",
          "ANTLR-PD",
          "ANTLR-PD-fallback",
          "APAFML",
          "APL-1.0",
          "APSL-1.0",
          "APSL-1.1",
          "APSL-1.2",
          "APSL-2.0",
          "Abstyles",
          "Adobe-2006",
          "Adobe-Glyph",
          "Afmparse",
          "Aladdin",
          "Apache-1.0",
          "Apache-1.1",
          "Apache-2.0",
          "Artistic-1.0",
          "Artistic-1.0-Perl",
          "Artistic-1.0-cl8",
          "Artistic-2.0",
          "BSD-1-Clause",
          "BSD-2-Clause",
          "BSD-2-Clause-Patent",
          "BSD-2-Clause-Views",
          "BSD-3-Clause",
          "BSD-3-Clause-Attribution",
          "BSD-3-Clause-Clear",
          "BSD-3-Clause-LBNL",
          "BSD-3-Clause-Modification",
          "BSD-3-Clause-No-Nuclear-License",
          "BSD-3-Clause-No-Nuclear-License-2014",
          "BSD-3-Clause-No-Nuclear-Warranty",
          "BSD-3-Clause-Open-MPI",
          "BSD-4-Clause",
          "BSD-4-Clause-Shortened",
          "BSD-4-Clause-UC",
          "BSD-Protection",
          "BSD-Source-Code",
          "BSL-1.0",
          "BUSL-1.1",
          "Bahyph",
          "Barr",
          "Beerware",
          "BitTorrent-1.0",
          "BitTorrent-1.1",
          "BlueOak-1.0.0",
          "Borceux",
          "C-UDA-1.0",
          "CAL-1.0",
          "CAL-1.0-Combined-Work-Exception",
          "CATOSL-1.1",
          "CC-BY-1.0",
          "CC-BY-2.0",
          "CC-BY-2.5",
          "CC-BY-3.0",
          "CC-BY-4.0",
          "CC-BY-NC-1.0",
          "CC-BY-NC-2.0",
          "CC-BY-NC-2.5",
          "CC-BY-NC-3.0",
          "CC-BY-NC-4.0",
          "CC-BY-NC-ND-1.0",
          "CC-BY-NC-ND-2.0",
          "CC-BY-NC-ND-2.5",
          "CC-BY-NC-ND-3.0",
          "CC-BY-NC-ND-4.0",
          "CC-BY-NC-SA-1.0",
          "CC-BY-NC-SA-2.0",
          "CC-BY-NC-SA-2.5",
          "CC-BY-NC-SA-3.0",
          "CC-BY-NC-SA-4.0",
          "CC-BY-ND-1.0",
          "CC-BY-ND-2.0",
          "CC-BY-ND-2.5",
          "CC-BY-ND-3.0",
          "CC-BY-ND-4.0",
          "CC-BY-SA-1.0",
          "CC-BY-SA-2.0",
          "CC-BY-SA-2.5",
          "CC-BY-SA-3.0",
          "CC-BY-SA-4.0",
          "CC-PDDC",
          "CC0-1.0",
          "CDDL-1.0",
          "CDDL-1.1",
          "CDLA-Permissive-1.0",
          "CDLA-Sharing-1.0",
          "CECILL-1.0",
          "CECILL-1.1",
          "CECILL-2.0",
          "CECILL-2.1",
          "CECILL-B",
          "CECILL-C",
          "CERN-OHL-1.1",
          "CERN-OHL-1.2",
          "CERN-OHL-P-2.0",
          "CERN-OHL-S-2.0",
          "CERN-OHL-W-2.0",
          "CNRI-Jython",
          "CNRI-Python",
          "CNRI-Python-GPL-Compatible",
          "CPAL-1.0",
          "CPL-1.0",
          "CPOL-1.02",
          "CUA-OPL-1.0",
          "Caldera",
          "ClArtistic",
          "Condor-1.1",
          "Crossword",
          "CrystalStacker",
          "Cube",
          "D-FSL-1.0",
          "DFSG",
          "DOC",
          "DRL-1.0",
          "DSDP",
          "Dotseqn",
          "ECL-1.0",
          "ECL-2.0",
          "EFL-1.0",
          "EFL-2.0",
          "EPICS",
          "EPL-1.0",
          "EPL-2.0",
          "EUDatagrid",
          "EUPL-1.0",
          "EUPL-1.1",
          "EUPL-1.2",
          "Entessa",
          "ErlPL-1.1",
          "Eurosym",
          "FSFAP",
          "FSFUL",
          "FSFULLR",
          "FTL",
          "Fair",
          "Frameworx-1.0",
          "FreeBSD-DOC",
          "FreeImage",
          "GD",
          "GFDL-1.1-invariants-only",
          "GFDL-1.1-invariants-or-later",
          "GFDL-1.1-no-invariants-only",
          "GFDL-1.1-no-invariants-or-later",
          "GFDL-1.1-only",
          "GFDL-1.1-or-later",
          "GFDL-1.2-invariants-only",
          "GFDL-1.2-invariants-or-later",
          "GFDL-1.2-no-invariants-only",
          "GFDL-1.2-no-invariants-or-later",
          "GFDL-1.2-only",
          "GFDL-1.2-or-later",
          "GFDL-1.3-invariants-only",
          "GFDL-1.3-invariants-or-later",
          "GFDL-1.3-no-invariants-only",
          "GFDL-1.3-no-invariants-or-later",
          "GFDL-1.3-only",
          "GFDL-1.3-or-later",
          "GL2PS",
          "GLWTPL",
          "GPL-1.0-only",
          "GPL-1.0-or-later",
          "GPL-2.0-only",
          "GPL-2.0-or-later",
          "GPL-3.0-only",
          "GPL-3.0-or-later",
          "Giftware",
          "Glide",
          "Glulxe",
          "HPND",
          "HPND-sell-variant",
          "HTMLTIDY",
          "HaskellReport",
          "Hippocratic-2.1",
          "IBM-pibs",
          "ICU",
          "IJG",
          "IPA",
          "IPL-1.0",
          "ISC",
          "ImageMagick",
          "Imlib2",
          "Info-ZIP",
          "Intel",
          "Intel-ACPI",
          "Interbase-1.0",
          "JPNIC",
          "JSON",
          "JasPer-2.0",
          "LAL-1.2",
          "LAL-1.3",
          "LGPL-2.0-only",
          "LGPL-2.0-or-later",
          "LGPL-2.1-only",
          "LGPL-2.1-or-later",
          "LGPL-3.0-only",
          "LGPL-3.0-or-later",
          "LGPLLR",
          "LPL-1.0",
          "LPL-1.02",
          "LPPL-1.0",
          "LPPL-1.1",
          "LPPL-1.2",
          "LPPL-1.3a",
          "LPPL-1.3c",
          "Latex2e",
          "Leptonica",
          "LiLiQ-P-1.1",
          "LiLiQ-R-1.1",
          "LiLiQ-Rplus-1.1",
          "Libpng",
          "Linux-OpenIB",
          "MIT",
          "MIT-0",
          "MIT-CMU",
          "MIT-Modern-Variant",
          "MIT-advertising",
          "MIT-enna",
          "MIT-feh",
          "MIT-open-group",
          "MITNFA",
          "MPL-1.0",
          "MPL-1.1",
          "MPL-2.0",
          "MPL-2.0-no-copyleft-exception",
          "MS-PL",
          "MS-RL",
          "MTLL",
          "MakeIndex",
          "MirOS",
          "Motosoto",
          "MulanPSL-1.0",
          "MulanPSL-2.0",
          "Multics",
          "Mup",
          "NAIST-2003",
          "NASA-1.3",
          "NBPL-1.0",
          "NCGL-UK-2.0",
          "NCSA",
          "NGPL",
          "NIST-PD",
          "NIST-PD-fallback",
          "NLOD-1.0",
          "NLPL",
          "NOSL",
          "NPL-1.0",
          "NPL-1.1",
          "NPOSL-3.0",
          "NRL",
          "NTP",
          "NTP-0",
          "Naumen",
          "Net-SNMP",
          "NetCDF",
          "Newsletr",
          "Nokia",
          "Noweb",
          "O-UDA-1.0",
          "OCCT-PL",
          "OCLC-2.0",
          "ODC-By-1.0",
          "ODbL-1.0",
          "OFL-1.0",
          "OFL-1.0-RFN",
          "OFL-1.0-no-RFN",
          "OFL-1.1",
          "OFL-1.1-RFN",
          "OFL-1.1-no-RFN",
          "OGC-1.0",
          "OGDL-Taiwan-1.0",
          "OGL-Canada-2.0",
          "OGL-UK-1.0",
          "OGL-UK-2.0",
          "OGL-UK-3.0",
          "OGTSL",
          "OLDAP-1.1",
          "OLDAP-1.2",
          "OLDAP-1.3",
          "OLDAP-1.4",
          "OLDAP-2.0",
          "OLDAP-2.0.1",
          "OLDAP-2.1",
          "OLDAP-2.2",
          "OLDAP-2.2.1",
          "OLDAP-2.2.2",
          "OLDAP-2.3",
          "OLDAP-2.4",
          "OLDAP-2.5",
          "OLDAP-2.6",
          "OLDAP-2.7",
          "OLDAP-2.8",
          "OML",
          "OPL-1.0",
          "OSET-PL-2.1",
          "OSL-1.0",
          "OSL-1.1",
          "OSL-2.0",
          "OSL-2.1",
          "OSL-3.0",
          "OpenSSL",
          "PDDL-1.0",
          "PHP-3.0",
          "PHP-3.01",
          "PSF-2.0",
          "Parity-6.0.0",
          "Parity-7.0.0",
          "Plexus",
          "PolyForm-Noncommercial-1.0.0",
          "PolyForm-Small-Business-1.0.0",
          "PostgreSQL",
          "Python-2.0",
          "QPL-1.0",
          "Qhull",
          "RHeCos-1.1",
          "RPL-1.1",
          "RPL-1.5",
          "RPSL-1.0",
          "RSA-MD",
          "RSCPL",
          "Rdisc",
          "Ruby",
          "SAX-PD",
          "SCEA",
          "SGI-B-1.0",
          "SGI-B-1.1",
          "SGI-B-2.0",
          "SHL-0.5",
          "SHL-0.51",
          "SISSL",
          "SISSL-1.2",
          "SMLNJ",
          "SMPPL",
          "SNIA",
          "SPL-1.0",
          "SSH-OpenSSH",
          "SSH-short",
          "SSPL-1.0",
          "SWL",
          "Saxpath",
          "Sendmail",
          "Sendmail-8.23",
          "SimPL-2.0",
          "Sleepycat",
          "Spencer-86",
          "Spencer-94",
          "Spencer-99",
          "SugarCRM-1.1.3",
          "TAPR-OHL-1.0",
          "TCL",
          "TCP-wrappers",
          "TMate",
          "TORQUE-1.1",
          "TOSL",
          "TU-Berlin-1.0",
          "TU-Berlin-2.0",
          "UCL-1.0",
          "UPL-1.0",
          "Unicode-DFS-2015",
          "Unicode-DFS-2016",
          "Unicode-TOU",
          "Unlicense",
          "VOSTROM",
          "VSL-1.0",
          "Vim",
          "W3C",
          "W3C-19980720",
          "W3C-20150513",
          "WTFPL",
          "Watcom-1.0",
          "Wsuipa",
          "X11",
          "XFree86-1.1",
          "XSkat",
          "Xerox",
          "Xnet",
          "ZPL-1.1",
          "ZPL-2.0",
          "ZPL-2.1",
          "Zed",
          "Zend-2.0",
          "Zimbra-1.3",
          "Zimbra-1.4",
          "Zlib",
          "blessing",
          "bzip2-1.0.5",
          "bzip2-1.0.6",
          "copyleft-next-0.3.0",
          "copyleft-next-0.3.1",
          "curl",
          "diffmark",
          "dvipdfm",
          "eGenix",
          "etalab-2.0",
          "freeware",
          "gSOAP-1.3b",
          "gnuplot",
          "iMatix",
          "libpng-2.0",
          "libselinux-1.0",
          "libtiff",
          "mpich2",
          "proprietary",
          "psfrag",
          "psutils",
          "unknown",
          "xinetd",
          "xpp",
          "zlib-acknowledgement"
        ]
      },
      "dedicated.TemplateOsInfoProject": {
        "type": "object",
        "description": "A structure describing some interesting facts about an OS template project",
        "properties": {
          "os": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInfoProjectItem"
              }
            ],
            "description": "OS template project OS details",
            "nullable": true
          },
          "usage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInfoProjectItem"
              }
            ],
            "description": "OS template project usage details",
            "nullable": true
          }
        }
      },
      "dedicated.TemplateOsInfoProjectItem": {
        "type": "object",
        "description": "A structure describing some interesting facts about an OS template project item",
        "properties": {
          "governance": {
            "type": "array",
            "description": "OS template project item governance",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "description": "OS template project item name",
            "nullable": true
          },
          "releaseNotes": {
            "type": "string",
            "description": "OS template project item release notes",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "OS template project item url",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "OS template project item version",
            "nullable": true
          }
        }
      },
      "dedicated.TemplateOsInput": {
        "type": "object",
        "description": "A structure describing input questions for the specific OS template",
        "properties": {
          "default": {
            "type": "string",
            "description": "Default value",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Input question description",
            "nullable": true
          },
          "enum": {
            "type": "array",
            "description": "When type is enum: name of the possible enum values",
            "items": {
              "type": "string"
            }
          },
          "mandatory": {
            "type": "boolean",
            "description": "Whether answering to that question is mandatory in order to trigger an install with that specific OS or not"
          },
          "name": {
            "type": "string",
            "description": "Input question name"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInputTypeEnum"
              }
            ],
            "description": "Input type"
          }
        }
      },
      "dedicated.TemplateOsInputTypeEnum": {
        "type": "string",
        "description": "Template OS Input type enum",
        "enum": [
          "boolean",
          "date",
          "email",
          "enum",
          "hexstring",
          "hostname",
          "ip",
          "keyValue",
          "number",
          "sshPubKey",
          "string",
          "text",
          "time",
          "url",
          "uuid"
        ]
      },
      "dedicated.TemplateOsProperties": {
        "type": "object",
        "description": "A structure describing properties customizables about this dedicated installation template",
        "properties": {
          "customHostname": {
            "type": "string",
            "description": "Set up the server using the provided hostname instead of the default hostname",
            "nullable": true
          },
          "postInstallationScriptLink": {
            "type": "string",
            "description": "Indicate the URL where your postinstall customisation script is located",
            "nullable": true
          },
          "postInstallationScriptReturn": {
            "type": "string",
            "description": "indicate the string returned by your postinstall customisation script on successful execution. Advice: your script should return a unique validation string in case of succes. A good example is \"loh1Xee7eo OK OK OK UGh8Ang1Gu",
            "nullable": true
          }
        }
      },
      "dedicated.TemplateOsSubfamilyEnum": {
        "type": "string",
        "description": "Os subfamily definition",
        "enum": [
          "alma",
          "aos",
          "arch",
          "byoi",
          "byolinux",
          "centos",
          "cloudlinux",
          "coreos",
          "debian",
          "dgx",
          "esxi",
          "fedora",
          "freebsd",
          "gentoo",
          "hyperv",
          "omnios",
          "openio",
          "openmediavault",
          "opensuse",
          "ovh",
          "pcs",
          "power",
          "proxmox",
          "rhel",
          "rocky",
          "slackware",
          "sles-sap",
          "smartos",
          "solusvm",
          "ubuntu",
          "windows-server-core",
          "windows-server-desktop-exp",
          "xcp",
          "xen"
        ]
      },
      "dedicated.TemplateOsTypeEnum": {
        "type": "string",
        "description": "Os type",
        "enum": [
          "bsd",
          "custom",
          "ibm",
          "linux",
          "solaris",
          "unix",
          "windows"
        ]
      },
      "dedicated.TemplateOsUsageEnum": {
        "type": "string",
        "description": "Os usage definition",
        "enum": [
          "backup",
          "basic",
          "customer",
          "database",
          "erp",
          "hosting",
          "management",
          "other",
          "readyToUse",
          "virtualisation",
          "virtualization"
        ]
      },
      "dedicated.TemplatePartitionTypeEnum": {
        "type": "string",
        "description": "partition type",
        "enum": [
          "logical",
          "lv",
          "primary"
        ]
      },
      "dedicated.installationTemplate.Templates": {
        "type": "object",
        "description": "Available installation templates",
        "properties": {
          "bitFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.server.BitFormatEnum"
              }
            ],
            "description": "this template bit format",
            "readOnly": true
          },
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsUsageEnum"
              }
            ],
            "description": "category of this template (informative only)",
            "readOnly": true
          },
          "customization": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsProperties"
              }
            ],
            "description": "Customizable template properties ",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "information about this template",
            "readOnly": true
          },
          "distribution": {
            "type": "string",
            "description": "the distribution this template is based on",
            "readOnly": true
          },
          "endOfInstall": {
            "type": "string",
            "description": "after this date, install of this template will not be possible at OVH",
            "format": "date",
            "readOnly": true
          },
          "family": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsTypeEnum"
              }
            ],
            "description": "this template family type",
            "readOnly": true
          },
          "filesystems": {
            "type": "array",
            "description": "list of all filesystems available for this template",
            "items": {
              "$ref": "#/components/schemas/dedicated.server.FileSystemEnum"
            },
            "readOnly": true
          },
          "inputs": {
            "type": "array",
            "description": "Inputs",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/dedicated.TemplateOsInput"
            },
            "readOnly": true
          },
          "license": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInfoLicense"
              }
            ],
            "description": "This distribution licensing details",
            "nullable": true,
            "readOnly": true
          },
          "lvmReady": {
            "type": "boolean",
            "description": "This distribution supports Logical Volumes (Linux LVM)",
            "nullable": true,
            "readOnly": true
          },
          "noPartitioning": {
            "type": "boolean",
            "description": "Partitioning customization is not available for this OS template",
            "readOnly": true
          },
          "project": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsInfoProject"
              }
            ],
            "description": "This distribution project details",
            "nullable": true,
            "readOnly": true
          },
          "rootMountpoint": {
            "type": "string",
            "description": "The mandatory mount point of the root filesystem on this OS",
            "nullable": true,
            "readOnly": true
          },
          "softRaidOnlyMirroring": {
            "type": "boolean",
            "description": "Partitioning customization is available but limited to mirroring for this OS template",
            "readOnly": true
          },
          "subfamily": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsSubfamilyEnum"
              }
            ],
            "description": "this template subfamily type",
            "readOnly": true
          },
          "templateName": {
            "type": "string",
            "description": "This template name",
            "readOnly": true
          }
        }
      },
      "dedicated.installationTemplate.hardwareRaid": {
        "type": "object",
        "description": "Hardware RAID defined in this partitioning scheme",
        "properties": {
          "disks": {
            "type": "array",
            "description": "Disk list",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "mode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplateOsHardwareRaidEnum"
              }
            ],
            "description": "RAID mode",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Hardware RAID name",
            "readOnly": true
          },
          "step": {
            "type": "integer",
            "description": "Specifies the creation order of the hardware RAID",
            "readOnly": true
          }
        }
      },
      "dedicated.installationTemplate.templatePartitioningSchemes": {
        "type": "object",
        "description": "Partitioning schemes available on this template",
        "properties": {
          "name": {
            "type": "string",
            "description": "This partitioning scheme name",
            "readOnly": true
          },
          "priority": {
            "type": "integer",
            "description": "on a reinstall, if a partitioning scheme is not specified, the one with the higher priority will be used by default, among all the compatible partitioning schemes (given the underlying hardware specifications)",
            "readOnly": true
          }
        }
      },
      "dedicated.installationTemplate.templatePartitions": {
        "type": "object",
        "description": " Partitions defined in this partitioning scheme",
        "properties": {
          "filesystem": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.server.FileSystemEnum"
              }
            ],
            "description": "Partition filesytem",
            "readOnly": true
          },
          "mountpoint": {
            "type": "string",
            "description": "Partition mount point",
            "readOnly": true
          },
          "order": {
            "type": "integer",
            "description": "specifies the creation order of the partition on the disk",
            "readOnly": true
          },
          "raid": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.server.PartitionRaidEnum"
              }
            ],
            "description": "Partition raid",
            "nullable": true,
            "readOnly": true
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/complexType.UnitAndValue_long"
              }
            ],
            "description": "Partition size (unit: MB GB TB, MB by default), 0 => rest of the space",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dedicated.TemplatePartitionTypeEnum"
              }
            ],
            "description": "Partition type",
            "readOnly": true
          },
          "volumeName": {
            "type": "string",
            "description": "Logical volume name (required if type is lv) or optional zpool name if filesystem is ZFS",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "dedicated.server.BitFormatEnum": {
        "type": "integer",
        "description": "Available os bit format",
        "enum": [
          32,
          64
        ]
      },
      "dedicated.server.FileSystemEnum": {
        "type": "string",
        "description": "FileSystems",
        "enum": [
          "btrfs",
          "ext3",
          "ext4",
          "fat16",
          "none",
          "ntfs",
          "reiserfs",
          "swap",
          "ufs",
          "vmfs5",
          "vmfs6",
          "vmfsl",
          "xfs",
          "zfs"
        ]
      },
      "dedicated.server.PartitionRaidEnum": {
        "type": "string",
        "description": "partition raid type",
        "enum": [
          "0",
          "1",
          "10",
          "5",
          "6",
          "7"
        ]
      },
      "domain.DocumentFormatsEnum": {
        "type": "string",
        "description": "Document file format",
        "enum": [
          "gif",
          "jpeg",
          "jpg",
          "pdf",
          "png"
        ]
      },
      "domain.OperationActionEnum": {
        "type": "string",
        "description": "Operation actions",
        "enum": [
          "canCancel",
          "canCorrect",
          "canRelaunch",
          "canReset"
        ]
      },
      "domain.OperationFunctionEnum": {
        "type": "string",
        "description": "Operation functions",
        "enum": [
          "ContactControl",
          "ContactControlAcknowledge",
          "ContactControlCorrect",
          "ContactControlNotify",
          "DnsAnycastActivate",
          "DnsAnycastDeactivate",
          "DnssecDisable",
          "DnssecEnable",
          "DnssecResigning",
          "DnssecRollKsk",
          "DnssecRollZsk",
          "DomainAfterMarket",
          "DomainContactControl",
          "DomainContactUpdate",
          "DomainControl",
          "DomainCreate",
          "DomainDelete",
          "DomainDnsUpdate",
          "DomainDsUpdate",
          "DomainEmailRedirectionsCreate",
          "DomainEmailRedirectionsDelete",
          "DomainHold",
          "DomainHostCreate",
          "DomainHostDelete",
          "DomainHostUpdate",
          "DomainIncomingTransfer",
          "DomainLock",
          "DomainOutgoingTransfer",
          "DomainRegistryDelete",
          "DomainRenew",
          "DomainResourceDelete",
          "DomainRestore",
          "DomainTrade",
          "DomainUnhold",
          "DomainUnlock",
          "ZoneImport"
        ]
      },
      "domain.OperationStatusEnum": {
        "type": "string",
        "description": "Operation status",
        "enum": [
          "cancelled",
          "doing",
          "done",
          "error",
          "problem",
          "todo"
        ]
      },
      "domain.OperationStep": {
        "type": "object",
        "description": "One step from an operation",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the step",
            "readOnly": true
          },
          "executionDuration": {
            "type": "integer",
            "description": "Execution time of the step",
            "readOnly": true
          },
          "step": {
            "type": "string",
            "description": "Name of the step",
            "readOnly": true
          }
        }
      },
      "domain.OperationTypeEnum": {
        "type": "string",
        "description": "Operation type",
        "enum": [
          "alldom",
          "domain"
        ]
      },
      "domain.Task": {
        "type": "object",
        "description": "Tasks associated to domain",
        "properties": {
          "canAccelerate": {
            "type": "boolean",
            "description": "Can accelerate the task",
            "readOnly": true
          },
          "canCancel": {
            "type": "boolean",
            "description": "Can cancel the task",
            "readOnly": true
          },
          "canRelaunch": {
            "type": "boolean",
            "description": "Can relaunch the task",
            "readOnly": true
          },
          "comment": {
            "type": "string",
            "description": "Comment about the task",
            "nullable": true,
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date of the task",
            "format": "date-time",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "description": "Domain of the task",
            "nullable": true,
            "readOnly": true
          },
          "doneDate": {
            "type": "string",
            "description": "Done date of the task",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "function": {
            "type": "string",
            "description": "Function of the task",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Id of the task",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date of the task",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/domain.OperationStatusEnum"
              }
            ],
            "description": "Status of the task",
            "readOnly": true
          },
          "todoDate": {
            "type": "string",
            "description": "Todo date of the task",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/domain.OperationTypeEnum"
              }
            ],
            "description": "type of the task",
            "readOnly": true
          }
        }
      },
      "domain.TaskFunctionEnum": {
        "type": "string",
        "description": "All functions from a dns task",
        "enum": [
          "DnsAnycastActivate",
          "DnsAnycastDeactivate",
          "DnssecDisable",
          "DnssecEnable",
          "DnssecResigning",
          "DnssecRollKsk",
          "DnssecRollZsk",
          "ZoneCreate",
          "ZoneCut",
          "ZoneDelete",
          "ZoneImport",
          "ZoneRestore"
        ]
      },
      "domain.TaskStatusEnum": {
        "type": "string",
        "description": "All statuses from a dns task",
        "enum": [
          "cancelled",
          "doing",
          "done",
          "error",
          "problem",
          "todo"
        ]
      },
      "duration": {
        "type": "string",
        "description": "Duration (e.g., P1Y2M3DT4H6M9S)",
        "example": "P1Y2M3DT4H6M9S"
      },
      "email": {
        "type": "string",
        "description": "Email address (e.g., api@ml.ovh.net)",
        "format": "email",
        "example": "api@ml.ovh.net"
      },
      "http.MethodEnum": {
        "type": "string",
        "description": "All HTTP methods available",
        "enum": [
          "DELETE",
          "GET",
          "POST",
          "PUT"
        ]
      },
      "internationalPhoneNumber": {
        "type": "string",
        "description": "International phone number",
        "format": "phone-number"
      },
      "ip": {
        "type": "string",
        "description": "IP address (e.g., 192.0.2.0)",
        "format": "ipv4",
        "example": "192.0.2.0"
      },
      "ip.CampusEnum": {
        "type": "string",
        "description": "Possible values for IP campuses' names",
        "enum": [
          "BHS",
          "ERI",
          "GRA",
          "HIL",
          "LIM",
          "PAR",
          "RBX",
          "SBG",
          "SGP",
          "SYD",
          "VIN",
          "WAW",
          "YNM",
          "YYZ"
        ]
      },
      "ipBlock": {
        "type": "string",
        "description": "IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)",
        "format": "ip-block",
        "example": "192.0.2.0/24"
      },
      "ipInterface": {
        "type": "string",
        "description": "IP address (e.g., 192.0.2.0)",
        "format": "ipv4",
        "example": "192.0.2.0"
      },
      "ipv4": {
        "type": "string",
        "description": "IPv4 address (e.g., 192.0.2.0)",
        "format": "ipv4",
        "example": "192.0.2.0"
      },
      "ipv4Block": {
        "type": "string",
        "description": "IPv4 CIDR notation (e.g., 192.0.2.0/24)",
        "format": "ipv4-block",
        "example": "192.0.2.0/24"
      },
      "ipv6": {
        "type": "string",
        "description": "IPv6 address (e.g., 2001:41d0:1:1994::1)",
        "format": "ipv6",
        "example": "2001:41d0:1:1994::1"
      },
      "ipv6Block": {
        "type": "string",
        "description": "IPv6 CIDR notation (e.g., 2001:41d0::/128)",
        "format": "ipv6-block",
        "example": "2001:41d0::/128"
      },
      "macAddress": {
        "type": "string",
        "description": "MAC address (e.g., 2001:4860:4860::8844)",
        "format": "mac-address",
        "example": "2001:4860:4860::8888. 2001:4860:4860::8844"
      },
      "me.Migration": {
        "type": "object",
        "description": "Country Migration",
        "properties": {
          "from": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.OvhSubsidiaryEnum"
              }
            ],
            "description": "Billing country to migrate from",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Migration Id",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.migration.StatusEnum"
              }
            ],
            "description": "Migration status",
            "readOnly": true
          },
          "steps": {
            "type": "array",
            "description": "Migration steps",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/me.migration.Step"
            },
            "readOnly": true
          },
          "to": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.OvhSubsidiaryEnum"
              }
            ],
            "description": "Billing country to migrate to",
            "readOnly": true
          }
        }
      },
      "me.SupportLevel.Level": {
        "type": "object",
        "description": "Support level of an account",
        "properties": {
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.SupportLevel.LevelTypeEnum"
              }
            ],
            "description": "Level of support",
            "readOnly": true
          }
        }
      },
      "me.SupportLevel.LevelTypeEnum": {
        "type": "string",
        "description": "Type of level",
        "enum": [
          "business",
          "enterprise",
          "premium",
          "premium-accredited",
          "standard"
        ]
      },
      "me.abuse.Abuse": {
        "type": "object",
        "description": "Get report API response",
        "properties": {
          "category": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.abuse.AbuseCategoryEnum"
              }
            ],
            "description": "Abuse category",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date of the abuse",
            "format": "date",
            "readOnly": true
          },
          "publicId": {
            "type": "string",
            "description": "Public ID of the abuse case",
            "readOnly": true
          },
          "service": {
            "type": "string",
            "description": "Service where is hosted the abuse",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.abuse.AbuseStatusEnum"
              }
            ],
            "description": "Abuse case status",
            "readOnly": true
          }
        }
      },
      "me.abuse.AbuseCategoryEnum": {
        "type": "string",
        "description": "The abuse categories",
        "enum": [
          "Compromised",
          "Copyright",
          "Illegal",
          "Intrusion",
          "Malware",
          "Network Attack",
          "Other",
          "Phishing",
          "Spam"
        ]
      },
      "me.abuse.AbuseStatusEnum": {
        "type": "string",
        "description": "The abuse status",
        "enum": [
          "Answered",
          "Claimed",
          "Closed",
          "Escalated",
          "Open",
          "Paused",
          "Reopened",
          "Updated",
          "WaitingAnswer"
        ]
      },
      "me.agreements.AgreementStatusEnum": {
        "type": "string",
        "description": "State of the agreement",
        "enum": [
          "ko",
          "obsolete",
          "ok",
          "todo"
        ]
      },
      "me.agreements.ContractAgreement": {
        "type": "object",
        "description": "Contract Agreement",
        "properties": {
          "agreed": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.agreements.AgreementStatusEnum"
              }
            ],
            "description": "State of the agreement",
            "readOnly": true
          },
          "contractId": {
            "type": "integer",
            "description": "Contract ID",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date of creation if the agreement is not signed. Date of signature if the agreement is signed",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Contract Agreement ID",
            "readOnly": true
          }
        }
      },
      "me.billing.group.BillingGroup": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Contact ID from /me/contact",
            "nullable": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "groupId": {
            "type": "integer",
            "description": "Billing group ID",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Billing group unique name"
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment method ID associated to the billing group",
            "nullable": true
          }
        }
      },
      "me.billing.group.Service": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "Billing group ID",
            "readOnly": true
          },
          "serviceId": {
            "type": "integer",
            "description": "Service ID",
            "readOnly": true
          }
        }
      },
      "me.billing.group.service.Create": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "serviceId": {
            "type": "integer",
            "description": "A service ID to associate"
          }
        },
        "required": [
          "serviceId"
        ]
      },
      "me.billing.purchaseOrder.Creation": {
        "type": "object",
        "description": "Purchase order creation payload",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Active",
            "nullable": true
          },
          "billingGroupId": {
            "type": "integer",
            "description": "Billing Group identifier",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "nullable": true,
            "format": "date"
          },
          "reference": {
            "type": "string",
            "description": "Reference"
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.purchaseOrder.PurchaseOrderTypeEnum"
              }
            ],
            "description": "Type of a purchase order"
          }
        },
        "required": [
          "reference",
          "startDate",
          "type"
        ]
      },
      "me.billing.purchaseOrder.PurchaseOrder": {
        "type": "object",
        "description": "Purchase Order",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Active",
            "nullable": true,
            "readOnly": true
          },
          "billingGroupId": {
            "type": "integer",
            "description": "Billing Group identifier",
            "nullable": true,
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true,
            "readOnly": true
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "nullable": true,
            "format": "date",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Purchase Order identifier",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date",
            "format": "date-time",
            "readOnly": true
          },
          "reference": {
            "type": "string",
            "description": "Reference",
            "readOnly": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "format": "date",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.purchaseOrder.StatusEnum"
              }
            ],
            "description": "Status",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.purchaseOrder.PurchaseOrderTypeEnum"
              }
            ],
            "description": "Type of a purchase order",
            "readOnly": true
          }
        }
      },
      "me.billing.purchaseOrder.PurchaseOrderTypeEnum": {
        "type": "string",
        "description": "Type of a purchase order",
        "enum": [
          "PURCHASE_ORDER",
          "REFERENCE_ORDER"
        ]
      },
      "me.billing.purchaseOrder.StatusEnum": {
        "type": "string",
        "description": "Status of the Purchase Order",
        "enum": [
          "CREATED",
          "DELETED"
        ]
      },
      "me.billing.purchaseOrder.Update": {
        "type": "object",
        "description": "Purchase order update payload",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Active",
            "nullable": true
          },
          "billingGroupId": {
            "type": "integer",
            "description": "Billing group identifier",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "nullable": true,
            "format": "date"
          },
          "reference": {
            "type": "string",
            "description": "Reference",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "description": "Start date",
            "nullable": true,
            "format": "date"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.purchaseOrder.PurchaseOrderTypeEnum"
              }
            ],
            "description": "Type of a purchase order",
            "nullable": true
          }
        }
      },
      "me.billing.report.Consumption": {
        "type": "object",
        "description": "Consumption billing report",
        "properties": {
          "periodEnd": {
            "type": "string",
            "description": "End date of the report period",
            "format": "date",
            "readOnly": true
          },
          "periodStart": {
            "type": "string",
            "description": "Start date of the report period",
            "format": "date",
            "readOnly": true
          },
          "report": {
            "type": "string",
            "description": "Url of the report",
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.report.consumption.StatusEnum"
              }
            ],
            "description": "Status of the report",
            "readOnly": true
          },
          "taskId": {
            "type": "string",
            "description": "Task id of the report",
            "readOnly": true
          }
        }
      },
      "me.billing.report.consumption.CreationRequest": {
        "type": "object",
        "description": "Request of consumption billing report creation",
        "properties": {
          "periodEnd": {
            "type": "string",
            "description": "End date of the report period",
            "format": "date"
          },
          "periodStart": {
            "type": "string",
            "description": "Start date of the report period",
            "format": "date"
          }
        },
        "required": [
          "periodEnd",
          "periodStart"
        ]
      },
      "me.billing.report.consumption.CreationResponse": {
        "type": "object",
        "description": "Response of consumption billing report creation",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "Task id of the report",
            "readOnly": true
          }
        }
      },
      "me.billing.report.consumption.StatusEnum": {
        "type": "string",
        "description": "Status of consumption billing report",
        "enum": [
          "CREATING",
          "ERROR",
          "READY"
        ]
      },
      "me.billing.tasks.Task": {
        "type": "object",
        "description": "Asynchronous task related to Billing",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier of the Task",
            "readOnly": true
          },
          "metadata": {
            "type": "array",
            "description": "Metadata linked to the Task. Will help you determine which object it relates to",
            "items": {
              "$ref": "#/components/schemas/me.billing.tasks.TaskMetadatum"
            },
            "readOnly": true
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.tasks.TaskNameEnum"
              }
            ],
            "description": "Describes which Task is being performed",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.billing.tasks.TaskStatusEnum"
              }
            ],
            "description": "Current status of the Task",
            "readOnly": true
          },
          "step": {
            "type": "string",
            "description": "Current step of the Task. The step depends on the Task name.",
            "readOnly": true
          }
        }
      },
      "me.billing.tasks.TaskMetadatum": {
        "type": "object",
        "description": "Metadatum linked to a Task",
        "properties": {
          "key": {
            "type": "string",
            "description": "Metadatum key",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "Metadatum value",
            "readOnly": true
          }
        }
      },
      "me.billing.tasks.TaskNameEnum": {
        "type": "string",
        "description": "Billing tasks names",
        "enum": [
          "contact/change"
        ]
      },
      "me.billing.tasks.TaskStatusEnum": {
        "type": "string",
        "description": "Billing tasks statuses",
        "enum": [
          "CANCELLED",
          "DOING",
          "DONE",
          "ERROR",
          "INIT",
          "PROBLEM",
          "TODO"
        ]
      },
      "me.consent.Campaign": {
        "type": "object",
        "description": "Consent campaign",
        "properties": {
          "description": {
            "type": "string",
            "description": "Campaign description",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Campaign name",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.consent.CampaignTypeEnum"
              }
            ],
            "description": "Campaign type",
            "readOnly": true
          }
        }
      },
      "me.consent.CampaignTypeEnum": {
        "type": "string",
        "description": "Campaign type",
        "enum": [
          "OPTIN",
          "OPTOUT"
        ]
      },
      "me.consent.Consent": {
        "type": "object",
        "description": "Customer consent information for a campaign",
        "properties": {
          "campaign": {
            "type": "string",
            "description": "Campaign name",
            "readOnly": true
          },
          "history": {
            "type": "array",
            "description": "Consent decisions history for this campaign",
            "items": {
              "$ref": "#/components/schemas/me.consent.Decision"
            },
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.consent.CampaignTypeEnum"
              }
            ],
            "description": "Campaign type",
            "readOnly": true
          },
          "value": {
            "type": "boolean",
            "description": "Current consent value",
            "readOnly": true
          }
        }
      },
      "me.consent.Decision": {
        "type": "object",
        "description": "Customer consent decision",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "Consent decision datetime",
            "format": "date-time",
            "readOnly": true
          },
          "value": {
            "type": "boolean",
            "description": "Consent decision value"
          }
        },
        "required": [
          "value"
        ]
      },
      "me.consumption.Price": {
        "type": "object",
        "description": "Price with currency and amount in micro-cents",
        "properties": {
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.CurrencyCodeEnum"
              }
            ],
            "readOnly": true
          },
          "text": {
            "type": "string",
            "readOnly": true
          },
          "value": {
            "type": "number",
            "readOnly": true
          },
          "valueInUcents": {
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "me.consumption.Transaction": {
        "type": "object",
        "description": "List of consumptions recorded in a range",
        "properties": {
          "beginDate": {
            "type": "string",
            "description": "Begin date",
            "format": "date-time",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "elements": {
            "type": "array",
            "description": "List of product plan code consumption",
            "items": {
              "$ref": "#/components/schemas/me.consumption.transaction.Element"
            },
            "readOnly": true
          },
          "endDate": {
            "type": "string",
            "description": "End date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Transaction ID",
            "nullable": true,
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.consumption.Price"
              }
            ],
            "description": "Consumption amount price",
            "readOnly": true
          },
          "serviceId": {
            "type": "integer",
            "description": "Service ID",
            "readOnly": true
          }
        }
      },
      "me.consumption.transaction.Element": {
        "type": "object",
        "description": "Element of consumption for resource",
        "properties": {
          "details": {
            "type": "array",
            "description": "List of consumption details for this planCode",
            "items": {
              "$ref": "#/components/schemas/me.consumption.transaction.element.Detail"
            },
            "readOnly": true
          },
          "planCode": {
            "type": "string",
            "description": "Identifier of the offer",
            "readOnly": true
          },
          "planFamily": {
            "type": "string",
            "description": "Family of the offer",
            "readOnly": true
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.consumption.Price"
              }
            ],
            "description": "Consumption amount price",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "description": "Consumption quantity",
            "readOnly": true
          }
        }
      },
      "me.consumption.transaction.element.Detail": {
        "type": "object",
        "description": "Element of consumption for resource",
        "properties": {
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.consumption.Price"
              }
            ],
            "description": "Consumption amount price",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "description": "Consumption quantity",
            "readOnly": true
          },
          "unique_id": {
            "type": "string",
            "description": "Unique ID associated to one service element",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.contact.Address": {
        "type": "object",
        "description": "Representation of a Contact",
        "properties": {
          "city": {
            "type": "string",
            "description": "City"
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Country"
          },
          "line1": {
            "type": "string",
            "description": "First line of the address"
          },
          "line2": {
            "type": "string",
            "description": "Second line of the address",
            "nullable": true
          },
          "line3": {
            "type": "string",
            "description": "Third line of the address",
            "nullable": true
          },
          "otherDetails": {
            "type": "string",
            "description": "Other details",
            "nullable": true
          },
          "province": {
            "type": "string",
            "description": "Province name",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "Zipcode",
            "nullable": true
          }
        }
      },
      "me.contact.Contact": {
        "type": "object",
        "description": "Contact definition",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.contact.Address"
              }
            ],
            "description": "Address for this contact"
          },
          "birthCity": {
            "type": "string",
            "description": "Birth city",
            "nullable": true
          },
          "birthCountry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Birth Country",
            "nullable": true
          },
          "birthDay": {
            "type": "string",
            "description": "Birth date",
            "nullable": true,
            "format": "date"
          },
          "birthZip": {
            "type": "string",
            "description": "Birth Zipcode",
            "nullable": true
          },
          "cellPhone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phoneNumber"
              }
            ],
            "description": "Cellphone number",
            "nullable": true
          },
          "companyNationalIdentificationNumber": {
            "type": "string",
            "description": "National identification number of your company",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "fax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phoneNumber"
              }
            ],
            "description": "Fax number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "First name"
          },
          "gender": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.GenderEnum"
              }
            ],
            "description": "Gender",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Contact Identifier",
            "readOnly": true
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LanguageEnum"
              }
            ],
            "description": "Language"
          },
          "lastName": {
            "type": "string",
            "description": "Last name"
          },
          "legalForm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LegalFormEnum"
              }
            ],
            "description": "Legal form of the contact"
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "description": "National identification number of the contact",
            "nullable": true
          },
          "nationality": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Nationality",
            "nullable": true
          },
          "organisationName": {
            "type": "string",
            "description": "Organisation name",
            "nullable": true
          },
          "organisationType": {
            "type": "string",
            "description": "Organisation type",
            "nullable": true
          },
          "phone": {
            "allOf": [
              {
                "$ref": "#/components/schemas/phoneNumber"
              }
            ],
            "description": "Telephone number",
            "nullable": true
          },
          "spareEmail": {
            "type": "string",
            "description": "Spare email address",
            "nullable": true
          },
          "vat": {
            "type": "string",
            "description": "VAT number",
            "nullable": true
          }
        }
      },
      "me.contact.FieldInformation": {
        "type": "object",
        "description": "Extras information about a field",
        "properties": {
          "fieldName": {
            "type": "string",
            "description": "Name of the field concerned by restrictions",
            "readOnly": true
          },
          "mandatory": {
            "type": "boolean",
            "description": "Indicates if the field is mandatory when editing",
            "readOnly": true
          },
          "readOnly": {
            "type": "boolean",
            "description": "Indicates if the field can't be edited",
            "readOnly": true
          }
        }
      },
      "me.credit.Balance": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Balance amount",
            "readOnly": true
          },
          "balanceDetails": {
            "type": "array",
            "description": "Balance details, amounts by serviceID",
            "items": {
              "$ref": "#/components/schemas/me.credit.balance.BalanceDetails"
            },
            "readOnly": true
          },
          "balanceName": {
            "type": "string",
            "description": "Balance name",
            "readOnly": true
          },
          "booked": {
            "type": "array",
            "description": "Movement already booked on orders",
            "items": {
              "$ref": "#/components/schemas/me.credit.balance.BookedMovement"
            },
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Balance creation date",
            "format": "date-time",
            "readOnly": true
          },
          "expiring": {
            "type": "array",
            "description": "Movement expiring soon",
            "items": {
              "$ref": "#/components/schemas/me.credit.balance.ExpiringMovement"
            },
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Balance last update",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.credit.balance.TypeEnum"
              }
            ],
            "description": "Balance type",
            "readOnly": true
          }
        }
      },
      "me.credit.balance.BalanceDetails": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Balance part amount",
            "readOnly": true
          },
          "balanceSubName": {
            "type": "string",
            "description": "Balance sub name",
            "nullable": true,
            "readOnly": true
          },
          "expiring": {
            "type": "array",
            "description": "Expiring parts of this balance",
            "items": {
              "$ref": "#/components/schemas/me.credit.balance.ExpiringMovement"
            },
            "readOnly": true
          },
          "serviceId": {
            "type": "integer",
            "description": "Service ID of this balance part",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.credit.balance.BookedMovement": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Movement amount",
            "readOnly": true
          },
          "balanceSubName": {
            "type": "string",
            "description": "Balance sub name",
            "nullable": true,
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "description": "Order ID",
            "readOnly": true
          }
        }
      },
      "me.credit.balance.ExpiringMovement": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Movement amount",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Movement creation date",
            "format": "date-time",
            "readOnly": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Movement expiration date",
            "format": "date-time",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Movement last update",
            "format": "date-time",
            "readOnly": true
          },
          "sourceObject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.credit.balance.movement.SubObject"
              }
            ],
            "description": "Object source of this credit movement",
            "readOnly": true
          }
        }
      },
      "me.credit.balance.Movement": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Movement amount",
            "readOnly": true
          },
          "balanceName": {
            "type": "string",
            "description": "Balance name",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Movement creation date",
            "format": "date-time",
            "readOnly": true
          },
          "destinationObject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.credit.balance.movement.SubObject"
              }
            ],
            "description": "Object destination of this credit movement",
            "nullable": true,
            "readOnly": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Movement expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Movement last update",
            "format": "date-time",
            "readOnly": true
          },
          "movementId": {
            "type": "integer",
            "description": "Movement ID",
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "description": "Order ID associated to this credit movement",
            "nullable": true,
            "readOnly": true
          },
          "sourceObject": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.credit.balance.movement.SubObject"
              }
            ],
            "description": "Object source of this credit movement",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.credit.balance.movement.TypeEnum"
              }
            ],
            "description": "Movement type",
            "readOnly": true
          }
        }
      },
      "me.credit.balance.TypeEnum": {
        "type": "string",
        "description": "Balance type",
        "enum": [
          "BONUS",
          "DEPOSIT",
          "PREPAID_ACCOUNT",
          "VOUCHER"
        ]
      },
      "me.credit.balance.movement.SubObject": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "id": {
            "type": "string",
            "description": "Sub object ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Sub object name",
            "readOnly": true
          }
        }
      },
      "me.credit.balance.movement.TypeEnum": {
        "type": "string",
        "description": "Balance movement type",
        "enum": [
          "BONUS",
          "CANCEL",
          "CREDIT_NOTE",
          "EXPIRE",
          "GIFT",
          "MANUAL",
          "ORDER",
          "REFUND",
          "UNPAID",
          "USE",
          "VOUCHER"
        ]
      },
      "me.credit.code.Redeem": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "inputCode": {
            "type": "string",
            "description": "Code to validate"
          },
          "serviceId": {
            "type": "integer",
            "description": "Restrict credit to a specific service"
          }
        },
        "required": [
          "inputCode"
        ]
      },
      "me.dns.Task": {
        "type": "object",
        "description": "DNS task",
        "properties": {
          "canAccelerate": {
            "type": "boolean",
            "description": "Can accelerate the task",
            "readOnly": true
          },
          "canCancel": {
            "type": "boolean",
            "description": "Can cancel the task",
            "readOnly": true
          },
          "canRelaunch": {
            "type": "boolean",
            "description": "Can relaunch the task",
            "readOnly": true
          },
          "comment": {
            "type": "string",
            "description": "Comment about the task",
            "nullable": true,
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date of the task",
            "format": "date-time",
            "readOnly": true
          },
          "doneDate": {
            "type": "string",
            "description": "Done date of the task",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "function": {
            "allOf": [
              {
                "$ref": "#/components/schemas/domain.TaskFunctionEnum"
              }
            ],
            "description": "Function of the task",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "Id of the task",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date of the task",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/domain.TaskStatusEnum"
              }
            ],
            "description": "Status of the task",
            "readOnly": true
          },
          "todoDate": {
            "type": "string",
            "description": "Todo date of the task",
            "format": "date-time",
            "readOnly": true
          },
          "zone": {
            "type": "string",
            "description": "Zone related to the task",
            "readOnly": true
          }
        }
      },
      "me.geolocation.ContinentCountryLocation": {
        "type": "object",
        "description": "Representation of country and continent from visitor IP",
        "properties": {
          "continent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.geolocation.ContinentEnum"
              }
            ],
            "description": "Continent",
            "nullable": true,
            "readOnly": true
          },
          "countryCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.geolocation.CountryEnum"
              }
            ],
            "description": "Country iso code",
            "nullable": true,
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ip"
              }
            ],
            "description": "The IP address processed, the user's origin one",
            "readOnly": true
          }
        }
      },
      "me.geolocation.ContinentEnum": {
        "type": "string",
        "description": "Continent",
        "enum": [
          "africa",
          "antartica",
          "asia",
          "europe",
          "north-america",
          "oceania",
          "south-america"
        ]
      },
      "me.geolocation.CountryEnum": {
        "type": "string",
        "description": "Country iso code",
        "enum": [
          "ac",
          "ad",
          "ae",
          "af",
          "ag",
          "ai",
          "al",
          "am",
          "an",
          "ao",
          "aq",
          "ar",
          "as",
          "at",
          "au",
          "aw",
          "ax",
          "az",
          "ba",
          "bb",
          "bd",
          "be",
          "bf",
          "bg",
          "bh",
          "bi",
          "bj",
          "bl",
          "bm",
          "bn",
          "bo",
          "bq",
          "br",
          "bs",
          "bt",
          "bv",
          "bw",
          "by",
          "bz",
          "ca",
          "cc",
          "cd",
          "cf",
          "cg",
          "ch",
          "ci",
          "ck",
          "cl",
          "cm",
          "cn",
          "co",
          "cr",
          "cs",
          "cu",
          "cv",
          "cw",
          "cx",
          "cy",
          "cz",
          "de",
          "dj",
          "dk",
          "dm",
          "do",
          "dz",
          "ec",
          "ee",
          "eg",
          "eh",
          "er",
          "es",
          "et",
          "fc",
          "fd",
          "fi",
          "fj",
          "fk",
          "fm",
          "fo",
          "fr",
          "fx",
          "ga",
          "gb",
          "gd",
          "ge",
          "gf",
          "gg",
          "gh",
          "gi",
          "gl",
          "gm",
          "gn",
          "gp",
          "gq",
          "gr",
          "gs",
          "gt",
          "gu",
          "gw",
          "gy",
          "hk",
          "hm",
          "hn",
          "hr",
          "ht",
          "hu",
          "id",
          "ie",
          "il",
          "im",
          "in",
          "io",
          "iq",
          "ir",
          "is",
          "it",
          "je",
          "jm",
          "jo",
          "jp",
          "ke",
          "kg",
          "kh",
          "ki",
          "km",
          "kn",
          "kp",
          "kr",
          "kw",
          "ky",
          "kz",
          "la",
          "lb",
          "lc",
          "li",
          "lk",
          "lr",
          "ls",
          "lt",
          "lu",
          "lv",
          "ly",
          "ma",
          "mc",
          "md",
          "me",
          "mf",
          "mg",
          "mh",
          "mk",
          "ml",
          "mm",
          "mn",
          "mo",
          "mp",
          "mq",
          "mr",
          "ms",
          "mt",
          "mu",
          "mv",
          "mw",
          "mx",
          "my",
          "mz",
          "na",
          "nc",
          "ne",
          "nf",
          "ng",
          "ni",
          "nl",
          "no",
          "np",
          "nr",
          "nu",
          "nz",
          "om",
          "pa",
          "pe",
          "pf",
          "pg",
          "ph",
          "pk",
          "pl",
          "pm",
          "pn",
          "pr",
          "ps",
          "pt",
          "pw",
          "py",
          "qa",
          "qc",
          "re",
          "ro",
          "rs",
          "ru",
          "rw",
          "sa",
          "sb",
          "sc",
          "sd",
          "se",
          "sg",
          "sh",
          "si",
          "sj",
          "sk",
          "sl",
          "sm",
          "sn",
          "so",
          "sr",
          "ss",
          "st",
          "sv",
          "sx",
          "sy",
          "sz",
          "tc",
          "td",
          "tf",
          "tg",
          "th",
          "tj",
          "tk",
          "tl",
          "tm",
          "tn",
          "to",
          "tp",
          "tr",
          "tt",
          "tv",
          "tw",
          "tz",
          "ua",
          "ug",
          "uk",
          "um",
          "us",
          "uy",
          "uz",
          "va",
          "vc",
          "ve",
          "vg",
          "vi",
          "vn",
          "vu",
          "we",
          "wf",
          "ws",
          "ye",
          "yt",
          "yu",
          "za",
          "zm",
          "zw"
        ]
      },
      "me.incident.MigrateServices": {
        "type": "object",
        "description": "Original service that can be migrated",
        "properties": {
          "dryRun": {
            "type": "boolean",
            "description": "If false, the order will be registered; if true, the order will be returned but not registered. Useful to compute prices"
          },
          "serviceIds": {
            "type": "array",
            "description": "IDs of the services to migrate",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "me.incident.Order": {
        "type": "object",
        "description": "Order created in order to migrate a service",
        "properties": {
          "order": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Order"
              }
            ],
            "description": "Order created in order to migrate a service",
            "readOnly": true
          }
        }
      },
      "me.incident.PercentagePromotion": {
        "type": "object",
        "description": "Commercial gesture applied for the service migration",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Duration applied for the commercial gesture",
            "format": "duration",
            "readOnly": true
          },
          "value": {
            "type": "integer",
            "description": "Percentage of the discount",
            "readOnly": true
          }
        }
      },
      "me.incident.ProposedOffer": {
        "type": "object",
        "description": "Commercial offer a customer can migrate his service to",
        "properties": {
          "configurations": {
            "type": "array",
            "description": "List of configurations used for the migration",
            "items": {
              "$ref": "#/components/schemas/me.incident.ProposedOfferConfiguration"
            },
            "readOnly": true
          },
          "plan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.cart.GenericProductDefinition"
              }
            ],
            "description": "Proposed commercial offer",
            "readOnly": true
          },
          "pricingMode": {
            "type": "string",
            "description": "Pricing mode used to bill the offer",
            "readOnly": true
          },
          "promotion": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.incident.PercentagePromotion"
              }
            ],
            "description": "Promotion applied to the commercial offer",
            "readOnly": true
          }
        }
      },
      "me.incident.ProposedOfferConfiguration": {
        "type": "object",
        "description": "Config",
        "properties": {
          "name": {
            "type": "string",
            "description": "name",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "value",
            "readOnly": true
          }
        }
      },
      "me.incident.ServiceMigration": {
        "type": "object",
        "description": "Service you may migrate to a given offer",
        "properties": {
          "addons": {
            "type": "array",
            "description": "Options to migrate linked to the original service",
            "items": {
              "$ref": "#/components/schemas/me.incident.ServiceMigration"
            },
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "description": "ID of an ongoing migration order",
            "nullable": true,
            "readOnly": true
          },
          "proposedOffer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.incident.ProposedOffer"
              }
            ],
            "description": "Proposed commercial offer to replace the service",
            "readOnly": true
          },
          "serviceToMigrate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.incident.ServiceToMigrate"
              }
            ],
            "description": "Description of the service to migrate",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.incident.ServiceToMigrate": {
        "type": "object",
        "description": "Original service that can be migrated",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the offer of the service",
            "readOnly": true
          },
          "metadata": {
            "type": "array",
            "description": "Additional information on the service",
            "items": {
              "$ref": "#/components/schemas/complexType.SafeKeyValue_string"
            },
            "readOnly": true
          },
          "route": {
            "type": "string",
            "description": "Route",
            "nullable": true,
            "readOnly": true
          },
          "serviceId": {
            "type": "integer",
            "description": "ID of the migratable service",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Name of the migratable service",
            "readOnly": true
          }
        }
      },
      "me.insight.Access": {
        "type": "object",
        "description": "Insight access token",
        "properties": {
          "access": {
            "type": "string",
            "description": "Access token",
            "format": "password",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Token creation date",
            "format": "date-time",
            "readOnly": true
          },
          "expireAt": {
            "type": "string",
            "description": "Token expiration date",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "me.marketing.Consent": {
        "type": "object",
        "description": "User marketing consent",
        "properties": {
          "call": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.marketing.ConsentDetails"
              }
            ],
            "description": "Details for call marketing communication"
          },
          "denyAll": {
            "type": "boolean",
            "description": "Stop all marketing communication"
          },
          "denyUntil": {
            "type": "string",
            "description": "Stop marketing communication until this date",
            "nullable": true,
            "format": "date-time"
          },
          "email": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.marketing.ConsentDetails"
              }
            ],
            "description": "Details for email marketing communication"
          },
          "sms": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.marketing.ConsentDetails"
              }
            ],
            "description": "Details for sms marketing communication"
          }
        }
      },
      "me.marketing.ConsentDetails": {
        "type": "object",
        "description": "User consent details for a marketing communication mean",
        "properties": {
          "events": {
            "type": "boolean",
            "description": "Enable marketing communication for OVHcloud events and webinars"
          },
          "newProductRecommendation": {
            "type": "boolean",
            "description": "Enable marketing communication for new product"
          },
          "newsletter": {
            "type": "boolean",
            "description": "Enable marketing communication for OVHcloud newsletter"
          },
          "offerAndDiscount": {
            "type": "boolean",
            "description": "Enable marketing communication for offer and discount"
          }
        }
      },
      "me.migration.Contract": {
        "type": "object",
        "description": "contract",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Status",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date",
            "format": "date",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "ID",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name",
            "readOnly": true
          },
          "pdf": {
            "type": "string",
            "description": "PDF URL",
            "readOnly": true
          },
          "text": {
            "type": "string",
            "description": "Text of the contract",
            "readOnly": true
          }
        }
      },
      "me.migration.StatusEnum": {
        "type": "string",
        "description": "Status of the migration",
        "enum": [
          "CANCELED",
          "CHECKED",
          "DOING",
          "MIGRATED",
          "TODO",
          "TO_CHECK"
        ]
      },
      "me.migration.Step": {
        "type": "object",
        "description": "Country Migration Step",
        "properties": {
          "contracts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.migration.step.Contracts"
              }
            ],
            "description": "Contracts data",
            "nullable": true,
            "readOnly": true
          },
          "debt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.migration.step.Debt"
              }
            ],
            "description": "Debt data",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.migration.step.NameEnum"
              }
            ],
            "description": "Migration step name",
            "readOnly": true
          },
          "orders": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.migration.step.Orders"
              }
            ],
            "description": "Orders data",
            "nullable": true,
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.migration.step.StatusEnum"
              }
            ],
            "description": "Billing step status",
            "readOnly": true
          }
        }
      },
      "me.migration.step.Contracts": {
        "type": "object",
        "description": "Country Migration step contracts data",
        "properties": {
          "agreements": {
            "type": "array",
            "description": "Array of contract agreements to accept",
            "items": {
              "$ref": "#/components/schemas/me.agreements.ContractAgreement"
            },
            "readOnly": true
          }
        }
      },
      "me.migration.step.Debt": {
        "type": "object",
        "description": "Country Migration step debt data",
        "properties": {
          "balanceAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Balance amount",
            "nullable": true,
            "readOnly": true
          },
          "ovhAccountAmount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "OVH Account amount",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.migration.step.NameEnum": {
        "type": "string",
        "description": "Name of the migration step",
        "enum": [
          "CONTRACTS",
          "DEBT",
          "NIC",
          "ORDERS"
        ]
      },
      "me.migration.step.Orders": {
        "type": "object",
        "description": "Country Migration step orders data",
        "properties": {
          "pendingOperations": {
            "type": "boolean",
            "description": "Whether there is pending operations",
            "readOnly": true
          },
          "pendingPromotions": {
            "type": "boolean",
            "description": "Whether there is pending promotions",
            "readOnly": true
          },
          "pendingSubscriptions": {
            "type": "boolean",
            "description": "Whether there is pending subscriptions",
            "readOnly": true
          }
        }
      },
      "me.migration.step.StatusEnum": {
        "type": "string",
        "description": "Status of the migration step",
        "enum": [
          "OK",
          "PENDING"
        ]
      },
      "me.partnerLevel.Level": {
        "type": "object",
        "description": "Partner level of an account",
        "properties": {
          "level": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.partnerLevel.LevelTypeEnum"
              }
            ],
            "description": "Level of partner",
            "readOnly": true
          },
          "msa": {
            "type": "boolean",
            "description": "Contains an MSA certificate",
            "readOnly": true
          },
          "requirement": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.partnerLevel.RequirementLoSEnum"
              }
            ],
            "description": "Level of Support required",
            "readOnly": true
          }
        }
      },
      "me.partnerLevel.LevelTypeEnum": {
        "type": "string",
        "description": "Type of level",
        "enum": [
          "advanced",
          "none",
          "standard",
          "strategic"
        ]
      },
      "me.partnerLevel.RequirementLoSEnum": {
        "type": "string",
        "description": "Level of Support required",
        "enum": [
          "none",
          "premium",
          "premium-accredited"
        ]
      },
      "me.payment.AvailablePaymentMethod": {
        "type": "object",
        "description": "Available payment method object",
        "properties": {
          "formSessionId": {
            "type": "string",
            "description": "Form session ID",
            "nullable": true,
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.Icon"
              }
            ],
            "description": "Payment method type icon",
            "readOnly": true
          },
          "integration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.IntegrationEnum"
              }
            ],
            "description": "Payment method integration type",
            "readOnly": true
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID",
            "nullable": true,
            "readOnly": true
          },
          "oneshot": {
            "type": "boolean",
            "description": "Indicates if payment method type allows to process oneshot payment",
            "readOnly": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "nullable": true,
            "readOnly": true
          },
          "paymentSubType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.AvailableSubTypeEnum"
              }
            ],
            "description": "Payment method sub-type",
            "nullable": true,
            "readOnly": true
          },
          "paymentType": {
            "type": "string",
            "description": "Payment method type",
            "readOnly": true
          },
          "registerable": {
            "type": "boolean",
            "description": "Indicates if payment method type is registerable ?",
            "readOnly": true
          },
          "registerableWithTransaction": {
            "type": "boolean",
            "description": "Indicates if payment method type allows payment and registration at the same time",
            "readOnly": true
          }
        }
      },
      "me.payment.AvailableSubTypeEnum": {
        "type": "string",
        "description": "Payment method available sub-type enum",
        "enum": [
          "30_DAYS",
          "45_DAYS",
          "60_DAYS",
          "AMERICAN_EXPRESS",
          "AURA",
          "CARTE_BANCAIRE",
          "CARTE_BLEUE",
          "CHORUS",
          "DINERS_CLUB",
          "DISCOVER",
          "JCB",
          "MAESTRO",
          "MASTERCARD",
          "NONE",
          "RUPAY",
          "VISA"
        ]
      },
      "me.payment.CreationSubTypeEnum": {
        "type": "string",
        "description": "Payment method creation sub-type enum",
        "enum": [
          "CHORUS",
          "NONE"
        ]
      },
      "me.payment.Icon": {
        "type": "object",
        "description": "Icon",
        "properties": {
          "data": {
            "type": "string",
            "description": "Icon in base64",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Icon name",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Icon URL",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.payment.IntegrationEnum": {
        "type": "string",
        "description": "Register integration type enum",
        "enum": [
          "BANK_TRANSFER",
          "COMPONENT",
          "IFRAME_VANTIV",
          "IN_CONTEXT",
          "NONE",
          "POST_FORM",
          "REDIRECT"
        ]
      },
      "me.payment.PaymentMethod": {
        "type": "object",
        "description": "Payment method object",
        "properties": {
          "billingContactId": {
            "type": "integer",
            "description": "Associated billing contact ID",
            "nullable": true,
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if payment method is the default one for this account"
          },
          "description": {
            "type": "string",
            "description": "Custom customer description",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "formSessionId": {
            "type": "string",
            "description": "Form session ID",
            "nullable": true,
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.Icon"
              }
            ],
            "description": "Payment method type icon",
            "readOnly": true
          },
          "integration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.IntegrationEnum"
              }
            ],
            "description": "Payment method integration type",
            "nullable": true,
            "readOnly": true
          },
          "label": {
            "type": "string",
            "description": "Payment method public label",
            "nullable": true,
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date",
            "format": "date-time",
            "readOnly": true
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID",
            "nullable": true,
            "readOnly": true
          },
          "oneclick": {
            "type": "boolean",
            "description": "Indicates if payment method support the oneclick functionality",
            "nullable": true,
            "readOnly": true
          },
          "paymentMeanId": {
            "type": "integer",
            "description": "Payment mean ID associated to this payment method",
            "nullable": true,
            "readOnly": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment method ID",
            "readOnly": true
          },
          "paymentSubType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.AvailableSubTypeEnum"
              }
            ],
            "description": "Payment method sub-type",
            "nullable": true,
            "readOnly": true
          },
          "paymentType": {
            "type": "string",
            "description": "Payment method type",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.method.StatusEnum"
              }
            ],
            "description": "Payment method status",
            "readOnly": true
          }
        }
      },
      "me.payment.Transaction": {
        "type": "object",
        "description": "Transaction object",
        "properties": {
          "amount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Transaction amount",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date",
            "format": "date-time",
            "readOnly": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Associated payment method ID",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.transaction.StatusEnum"
              }
            ],
            "description": "Transaction status",
            "readOnly": true
          },
          "transactionId": {
            "type": "integer",
            "description": "Transaction ID",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.transaction.TypeEnum"
              }
            ],
            "description": "Transaction type",
            "readOnly": true
          }
        }
      },
      "me.payment.method.CallbackUrl": {
        "type": "object",
        "description": "Callback URL's to register a new payment method",
        "properties": {
          "cancel": {
            "type": "string",
            "description": "URL when customer cancels the action"
          },
          "error": {
            "type": "string",
            "description": "URL when registration encounters an error"
          },
          "failure": {
            "type": "string",
            "description": "URL when registration failed"
          },
          "pending": {
            "type": "string",
            "description": "URL when payment method is in validation"
          },
          "success": {
            "type": "string",
            "description": "URL when payment method registration success"
          }
        },
        "required": [
          "cancel",
          "error",
          "failure",
          "pending",
          "success"
        ]
      },
      "me.payment.method.Challenge": {
        "type": "object",
        "description": "Payment method Challenge",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "Challenge"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "me.payment.method.Creation": {
        "type": "object",
        "description": "Payment method creation payload",
        "properties": {
          "billingContactId": {
            "type": "integer",
            "description": "Associated billing contact ID",
            "nullable": true
          },
          "callbackUrl": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.method.CallbackUrl"
              }
            ],
            "description": "Callback URL's necessary to register"
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if this payment method will be set as the default one"
          },
          "description": {
            "type": "string",
            "description": "Personalized description",
            "nullable": true
          },
          "formData": {
            "type": "string",
            "description": "Additional payment information",
            "nullable": true
          },
          "orderId": {
            "type": "integer",
            "description": "Order ID to pay it if it's possible (in oneshot transaction or while registration)",
            "nullable": true
          },
          "paymentSubType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.CreationSubTypeEnum"
              }
            ],
            "description": "Payment sub-type",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "Payment type"
          },
          "register": {
            "type": "boolean",
            "description": "Register this payment method if it's possible (default value is false and will proceed a oneshot transaction)"
          }
        },
        "required": [
          "callbackUrl",
          "paymentType"
        ]
      },
      "me.payment.method.Details": {
        "type": "object",
        "description": "Add details to one payment method challenge",
        "properties": {
          "details": {
            "type": "string",
            "description": "Details data"
          },
          "transactionId": {
            "type": "integer",
            "description": "Transaction ID"
          }
        }
      },
      "me.payment.method.Finalize": {
        "type": "object",
        "description": "Payload to finalize payment method registration",
        "properties": {
          "expirationMonth": {
            "type": "integer",
            "description": "Expiration month",
            "nullable": true
          },
          "expirationYear": {
            "type": "integer",
            "description": "Expiration year",
            "nullable": true
          },
          "formSessionId": {
            "type": "string",
            "description": "Form session ID",
            "nullable": true
          },
          "registrationId": {
            "type": "string",
            "description": "Registration ID",
            "nullable": true
          }
        }
      },
      "me.payment.method.StatusEnum": {
        "type": "string",
        "description": "Payment method status",
        "enum": [
          "CANCELED",
          "CANCELING",
          "CREATED",
          "CREATING",
          "ERROR",
          "EXPIRED",
          "FAILED",
          "MAINTENANCE",
          "PAUSED",
          "REJECTED",
          "REPLACED",
          "VALID",
          "VALIDATING"
        ]
      },
      "me.payment.method.Validation": {
        "type": "object",
        "description": "Registration response to validate",
        "properties": {
          "formSessionId": {
            "type": "string",
            "description": "Form session ID",
            "nullable": true,
            "readOnly": true
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID",
            "nullable": true,
            "readOnly": true
          },
          "organizationId": {
            "type": "string",
            "description": "Organization ID",
            "nullable": true,
            "readOnly": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Registered new payment method ID",
            "readOnly": true
          },
          "transactionId": {
            "type": "integer",
            "description": "Registered new transaction ID",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Registration validation URL to redirect",
            "nullable": true,
            "readOnly": true
          },
          "validationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.payment.IntegrationEnum"
              }
            ],
            "description": "Registration validation type",
            "readOnly": true
          }
        }
      },
      "me.payment.transaction.StatusEnum": {
        "type": "string",
        "description": "Transaction status",
        "enum": [
          "CANCELED",
          "CANCELING",
          "CONFIRMING",
          "ERROR",
          "EXPIRED",
          "FAILED",
          "READY",
          "SUCCESS"
        ]
      },
      "me.payment.transaction.TypeEnum": {
        "type": "string",
        "description": "Transaction type",
        "enum": [
          "CREDIT",
          "DEBIT"
        ]
      },
      "me.paymentMean.BankAccount": {
        "type": "object",
        "description": "Credit card information",
        "properties": {
          "bic": {
            "type": "string",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "defaultPaymentMean": {
            "type": "boolean",
            "description": "This credit card is the default payment mean?",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Custom description of this bank account",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.IconData"
              }
            ],
            "description": "Payment method type icon",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "mandateSignatureDate": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "readOnly": true
          },
          "ownerAddress": {
            "type": "string",
            "description": "Bank account owner's address",
            "readOnly": true
          },
          "ownerName": {
            "type": "string",
            "description": "Bank account owner's name",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.BankAccountStateEnum"
              }
            ],
            "description": "Bank account state",
            "readOnly": true
          },
          "uniqueReference": {
            "type": "string",
            "readOnly": true
          },
          "validationDocumentLink": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.paymentMean.BankAccountChallengeCreation": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "Payload to answer the challenge"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "me.paymentMean.BankAccountCreation": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "bic": {
            "type": "string",
            "description": "Bank account BIC"
          },
          "description": {
            "type": "string",
            "description": "Custom description of this account",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "Bank account IBAN"
          },
          "ownerAddress": {
            "type": "string",
            "description": "Bank account owner's address"
          },
          "ownerName": {
            "type": "string",
            "description": "Bank account owner's name"
          },
          "setDefault": {
            "type": "boolean",
            "description": "Set as default payment mean once validated",
            "nullable": true
          }
        },
        "required": [
          "bic",
          "iban",
          "ownerAddress",
          "ownerName"
        ]
      },
      "me.paymentMean.BankAccountStateEnum": {
        "type": "string",
        "description": "State of your bank account",
        "enum": [
          "blockedForIncidents",
          "pendingValidation",
          "replaced",
          "valid"
        ]
      },
      "me.paymentMean.BankAccountValidation": {
        "type": "object",
        "description": "A validation required to add a payment mean bank account",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "submitUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL where redirect for registration process",
            "readOnly": true
          },
          "validationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.ValidationTypeEnum"
              }
            ],
            "description": "Kind of registration validation",
            "readOnly": true
          }
        }
      },
      "me.paymentMean.CreditCard": {
        "type": "object",
        "description": "Credit card information",
        "properties": {
          "defaultPaymentMean": {
            "type": "boolean",
            "description": "This credit card is the default payment mean?",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Custom description of this credit card",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.IconData"
              }
            ],
            "description": "Payment method type icon",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "number": {
            "type": "string",
            "description": "Credit card BIN",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.CreditCardStateEnum"
              }
            ],
            "description": "Credit card state",
            "readOnly": true
          },
          "threeDsValidated": {
            "type": "boolean",
            "description": "True if this credit card has been registered with a successful 3DSecure challenge",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Kind of credit card",
            "readOnly": true
          }
        }
      },
      "me.paymentMean.CreditCardChallengeCreation": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "Payload to answer the challenge"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "me.paymentMean.CreditCardCreation": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "description": {
            "type": "string",
            "description": "Custom description of this account",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "description": "Callback URL where the customer will be redirected to after validation",
            "nullable": true
          },
          "setDefault": {
            "type": "boolean",
            "description": "Set as default payment mean once validated",
            "nullable": true
          }
        }
      },
      "me.paymentMean.CreditCardStateEnum": {
        "type": "string",
        "description": "State of your credit card",
        "enum": [
          "expired",
          "tooManyFailures",
          "valid"
        ]
      },
      "me.paymentMean.CreditCardValidation": {
        "type": "object",
        "description": "A validation required to add a payment mean credit card",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "submitUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL where redirect for registration process",
            "readOnly": true
          },
          "validationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.ValidationTypeEnum"
              }
            ],
            "description": "Kind of registration validation",
            "readOnly": true
          }
        }
      },
      "me.paymentMean.Deferred": {
        "type": "object",
        "description": "Deferred account information",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date of this deferred account",
            "format": "date-time",
            "readOnly": true
          },
          "defaultPaymentMean": {
            "type": "boolean",
            "description": "This deferred account is the default payment mean?",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Custom description of this deferred account",
            "nullable": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.IconData"
              }
            ],
            "description": "Payment method type icon",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "label": {
            "type": "string",
            "description": "Deferred account type",
            "nullable": true,
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.DeferredStateEnum"
              }
            ],
            "description": "Deferred account state",
            "readOnly": true
          }
        }
      },
      "me.paymentMean.DeferredStateEnum": {
        "type": "string",
        "description": "State of you deferred account",
        "enum": [
          "failed",
          "valid"
        ]
      },
      "me.paymentMean.IconData": {
        "type": "object",
        "description": "Payment mean type icon",
        "properties": {
          "data": {
            "type": "string",
            "description": "Icon in base64",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Icon name",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Icon URL",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.paymentMean.Paypal": {
        "type": "object",
        "description": "Paypal information",
        "properties": {
          "agreementId": {
            "type": "string",
            "description": "Paypal agreement",
            "readOnly": true
          },
          "creationDate": {
            "type": "string",
            "description": "Paypal creation date",
            "format": "date-time",
            "readOnly": true
          },
          "defaultPaymentMean": {
            "type": "boolean",
            "description": "This paypal is the default payment mean?",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Custom description of this paypal",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Paypal associated email",
            "readOnly": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.IconData"
              }
            ],
            "description": "Payment method type icon",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.PaypalStateEnum"
              }
            ],
            "description": "Paypal state",
            "readOnly": true
          }
        }
      },
      "me.paymentMean.PaypalChallengeCreation": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "Payload to answer the challenge"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "me.paymentMean.PaypalCreation": {
        "type": "object",
        "description": "Missing description",
        "properties": {
          "description": {
            "type": "string",
            "description": "Custom description of this account",
            "nullable": true
          },
          "returnUrl": {
            "type": "string",
            "description": "Callback URL where the customer will be redirected to after validation",
            "nullable": true
          },
          "setDefault": {
            "type": "boolean",
            "description": "Set as default payment mean once validated",
            "nullable": true
          }
        }
      },
      "me.paymentMean.PaypalStateEnum": {
        "type": "string",
        "description": "State of you paypal",
        "enum": [
          "failing",
          "tooManyFailures",
          "valid"
        ]
      },
      "me.paymentMean.PaypalValidation": {
        "type": "object",
        "description": "A validation required to add a payment mean paypal",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "submitUrl": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL where redirect for registration process",
            "readOnly": true
          },
          "validationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.paymentMean.ValidationTypeEnum"
              }
            ],
            "description": "Kind of registration validation",
            "readOnly": true
          }
        }
      },
      "me.paymentMean.ValidationTypeEnum": {
        "type": "string",
        "description": "All the validation you may have to do",
        "enum": [
          "creditAccount",
          "documentToSend",
          "simpleValidation"
        ]
      },
      "me.repricing.Service": {
        "type": "object",
        "description": "Description of a service being repricing",
        "properties": {
          "addons": {
            "type": "array",
            "description": "Addons of the Service",
            "items": {
              "$ref": "#/components/schemas/me.repricing.Service"
            },
            "readOnly": true
          },
          "applicationDate": {
            "type": "string",
            "description": "Date of application of the repricing",
            "format": "date",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the Service",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Custom name for the Service",
            "readOnly": true
          },
          "duration": {
            "type": "string",
            "description": "Duration for the price described in the payload (ISO8601)",
            "readOnly": true
          },
          "priceAfterWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price after repricing, tax included",
            "readOnly": true
          },
          "priceAfterWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price after repricing, tax excluded",
            "readOnly": true
          },
          "priceBeforeWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price before repricing, tax included",
            "readOnly": true
          },
          "priceBeforeWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price before repricing, tax excluded",
            "readOnly": true
          },
          "route": {
            "allOf": [
              {
                "$ref": "#/components/schemas/services.expanded.Route"
              }
            ],
            "description": "Route",
            "nullable": true,
            "readOnly": true
          },
          "serviceId": {
            "type": "integer",
            "description": "Service ID",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Identifier of the service",
            "readOnly": true
          },
          "totalPriceAfterWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Total price (addons included) after repricing, tax included",
            "readOnly": true
          },
          "totalPriceAfterWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Total price (addons included) after repricing, tax excluded",
            "readOnly": true
          },
          "totalPriceBeforeWithTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Total price (addons included) before repricing, tax included",
            "readOnly": true
          },
          "totalPriceBeforeWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Total price (addons included) before repricing, tax excluded",
            "readOnly": true
          }
        }
      },
      "me.tag.AvailableTag": {
        "type": "object",
        "description": "Available tag configuration object for creation",
        "properties": {
          "keys": {
            "type": "array",
            "description": "Tag configuration keys",
            "items": {
              "$ref": "#/components/schemas/me.tag.TagKey"
            },
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Tag name",
            "readOnly": true
          }
        }
      },
      "me.tag.Creation": {
        "type": "object",
        "description": "Tag creation payload",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason",
            "nullable": true
          },
          "tagName": {
            "type": "string",
            "description": "Tag name"
          }
        },
        "required": [
          "tagName"
        ]
      },
      "me.tag.StatusEnum": {
        "type": "string",
        "description": "Tag status",
        "enum": [
          "CREATED",
          "CREATING",
          "DELETED",
          "DELETING",
          "ERROR",
          "MODERATING",
          "REFUSED",
          "REFUSING",
          "REVOCATING",
          "WAIT_MODERATION",
          "WAIT_REVOCATION"
        ]
      },
      "me.tag.Tag": {
        "type": "object",
        "description": "Tag",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "customerCode": {
            "type": "string",
            "description": "Customer code",
            "readOnly": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "extra": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.tag.TagExtra"
              }
            ],
            "description": "Extra data",
            "nullable": true,
            "readOnly": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update",
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.tag.StatusEnum"
              }
            ],
            "description": "Tag Status",
            "readOnly": true
          },
          "tag": {
            "type": "string",
            "description": "Tag name",
            "readOnly": true
          }
        }
      },
      "me.tag.TagExtra": {
        "type": "object",
        "description": "Tag Extra",
        "properties": {
          "exemption": {
            "type": "string",
            "description": "Tax exemption",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "me.tag.TagKey": {
        "type": "object",
        "description": "Tag configuration key",
        "properties": {
          "enum": {
            "type": "array",
            "description": "Enum values",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "key": {
            "type": "string",
            "description": "Tag key name",
            "readOnly": true
          },
          "maxLength": {
            "type": "integer",
            "description": "Maximum length for a text",
            "nullable": true,
            "readOnly": true
          },
          "minValue": {
            "type": "integer",
            "description": "Minimum value for a number",
            "nullable": true,
            "readOnly": true
          },
          "optional": {
            "type": "boolean",
            "description": "Tag key optional",
            "readOnly": true
          },
          "pattern": {
            "type": "string",
            "description": "Tag value regex pattern",
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/me.tag.tagKey.TypeEnum"
              }
            ],
            "description": "Tag key type",
            "readOnly": true
          }
        }
      },
      "me.tag.tagKey.TypeEnum": {
        "type": "string",
        "description": "Tag key type",
        "enum": [
          "ARRAY",
          "DATE",
          "ENUM",
          "INTEGER",
          "TEXT",
          "VARCHAR"
        ]
      },
      "nichandle.BillingCapacities": {
        "type": "object",
        "description": "Internal customer billing capacities for customer control panel",
        "properties": {
          "canUseDebtSystem": {
            "type": "boolean",
            "description": "Indicates if the debt system has been enabled on the customer account"
          },
          "canUsePostalMailForInvoices": {
            "type": "boolean",
            "description": "Indicates customer's ability to use postal mailing for invoices"
          },
          "requiredPaymentMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.RequiredPaymentMethodEnum"
              }
            ],
            "description": "Indicates the mandatory nature of having a valid payment method"
          }
        }
      },
      "nichandle.CountryEnum": {
        "type": "string",
        "description": "Countries a nichandle can choose",
        "enum": [
          "AC",
          "AD",
          "AE",
          "AF",
          "AG",
          "AI",
          "AL",
          "AM",
          "AO",
          "AQ",
          "AR",
          "AS",
          "AT",
          "AU",
          "AW",
          "AX",
          "AZ",
          "BA",
          "BB",
          "BD",
          "BE",
          "BF",
          "BG",
          "BH",
          "BI",
          "BJ",
          "BL",
          "BM",
          "BN",
          "BO",
          "BQ",
          "BR",
          "BS",
          "BT",
          "BW",
          "BY",
          "BZ",
          "CA",
          "CC",
          "CD",
          "CF",
          "CG",
          "CH",
          "CI",
          "CK",
          "CL",
          "CM",
          "CN",
          "CO",
          "CR",
          "CU",
          "CV",
          "CW",
          "CX",
          "CY",
          "CZ",
          "DE",
          "DG",
          "DJ",
          "DK",
          "DM",
          "DO",
          "DZ",
          "EA",
          "EC",
          "EE",
          "EG",
          "EH",
          "ER",
          "ES",
          "ET",
          "FI",
          "FJ",
          "FK",
          "FM",
          "FO",
          "FR",
          "GA",
          "GB",
          "GD",
          "GE",
          "GF",
          "GG",
          "GH",
          "GI",
          "GL",
          "GM",
          "GN",
          "GP",
          "GQ",
          "GR",
          "GS",
          "GT",
          "GU",
          "GW",
          "GY",
          "HK",
          "HN",
          "HR",
          "HT",
          "HU",
          "IC",
          "ID",
          "IE",
          "IL",
          "IM",
          "IN",
          "IO",
          "IQ",
          "IR",
          "IS",
          "IT",
          "JE",
          "JM",
          "JO",
          "JP",
          "KE",
          "KG",
          "KH",
          "KI",
          "KM",
          "KN",
          "KP",
          "KR",
          "KW",
          "KY",
          "KZ",
          "LA",
          "LB",
          "LC",
          "LI",
          "LK",
          "LR",
          "LS",
          "LT",
          "LU",
          "LV",
          "LY",
          "MA",
          "MC",
          "MD",
          "ME",
          "MF",
          "MG",
          "MH",
          "MK",
          "ML",
          "MM",
          "MN",
          "MO",
          "MP",
          "MQ",
          "MR",
          "MS",
          "MT",
          "MU",
          "MV",
          "MW",
          "MX",
          "MY",
          "MZ",
          "NA",
          "NC",
          "NE",
          "NF",
          "NG",
          "NI",
          "NL",
          "NO",
          "NP",
          "NR",
          "NU",
          "NZ",
          "OM",
          "PA",
          "PE",
          "PF",
          "PG",
          "PH",
          "PK",
          "PL",
          "PM",
          "PN",
          "PR",
          "PS",
          "PT",
          "PW",
          "PY",
          "QA",
          "RE",
          "RO",
          "RS",
          "RU",
          "RW",
          "SA",
          "SB",
          "SC",
          "SD",
          "SE",
          "SG",
          "SH",
          "SI",
          "SJ",
          "SK",
          "SL",
          "SM",
          "SN",
          "SO",
          "SR",
          "SS",
          "ST",
          "SV",
          "SX",
          "SY",
          "SZ",
          "TA",
          "TC",
          "TD",
          "TF",
          "TG",
          "TH",
          "TJ",
          "TK",
          "TL",
          "TM",
          "TN",
          "TO",
          "TR",
          "TT",
          "TV",
          "TW",
          "TZ",
          "UA",
          "UG",
          "UM",
          "UNKNOWN",
          "US",
          "UY",
          "UZ",
          "VA",
          "VC",
          "VE",
          "VG",
          "VI",
          "VN",
          "VU",
          "WF",
          "WS",
          "XK",
          "YE",
          "YT",
          "ZA",
          "ZM",
          "ZW"
        ]
      },
      "nichandle.Currency": {
        "type": "object",
        "description": "Customer currency",
        "properties": {
          "code": {
            "type": "string",
            "description": "Currency code"
          },
          "symbol": {
            "type": "string",
            "description": "Currency symbol"
          }
        }
      },
      "nichandle.DeveloperModeRestriction": {
        "type": "object",
        "description": "Login restrictions on a development version of the Manager",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Allow login on your account on a development version of the Manager"
          }
        }
      },
      "nichandle.DomainTaskArgument": {
        "type": "object",
        "description": "Domain operation argument",
        "properties": {
          "acceptedFormats": {
            "type": "array",
            "description": "List of accepted formats",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domain.DocumentFormatsEnum"
            },
            "readOnly": true
          },
          "acceptedValues": {
            "type": "array",
            "description": "List of accepted values",
            "nullable": true,
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the argument",
            "nullable": true,
            "readOnly": true
          },
          "fields": {
            "type": "array",
            "description": "List of impacted field names",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/xander.ContactFieldEnum"
            },
            "readOnly": true
          },
          "key": {
            "type": "string",
            "description": "Key of the argument",
            "readOnly": true
          },
          "maximumSize": {
            "type": "integer",
            "description": "Maximum of the content length that you can send",
            "nullable": true,
            "readOnly": true
          },
          "minimumSize": {
            "type": "integer",
            "description": "Minimum of the content length that you can send",
            "nullable": true,
            "readOnly": true
          },
          "readOnly": {
            "type": "boolean",
            "description": "True if the argument is in read only",
            "readOnly": true
          },
          "template": {
            "type": "string",
            "description": "Template of the content",
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Type of the argument",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "Value of the argument",
            "nullable": true
          }
        }
      },
      "nichandle.DomainTaskProgressBar": {
        "type": "object",
        "description": "Domain operation progress",
        "properties": {
          "currentStep": {
            "allOf": [
              {
                "$ref": "#/components/schemas/domain.OperationStep"
              }
            ],
            "description": "Current step of the operation",
            "readOnly": true
          },
          "expectedDoneDate": {
            "type": "string",
            "description": "The estimated end date of the task",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "followUpSteps": {
            "type": "array",
            "description": "All the steps of the operation",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/domain.OperationStep"
            },
            "readOnly": true
          },
          "lastUpdateDate": {
            "type": "string",
            "description": "The last update date of the task",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "progress": {
            "type": "integer",
            "description": "Progress percentage of the task",
            "readOnly": true
          },
          "taskActions": {
            "type": "array",
            "description": "Action possible on task",
            "items": {
              "$ref": "#/components/schemas/domain.OperationActionEnum"
            },
            "readOnly": true
          },
          "taskStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/domain.OperationStatusEnum"
              }
            ],
            "description": "The status of the task",
            "readOnly": true
          }
        }
      },
      "nichandle.EmailNotification": {
        "type": "object",
        "description": "Email notification received",
        "properties": {
          "body": {
            "type": "string",
            "description": "Content of the email",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "Date at which the email was sent",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "ID of the email notification",
            "readOnly": true
          },
          "subject": {
            "type": "string",
            "description": "Subject of the email",
            "readOnly": true
          }
        }
      },
      "nichandle.GenderEnum": {
        "type": "string",
        "description": "All genders a person can choose",
        "enum": [
          "female",
          "male"
        ]
      },
      "nichandle.IpRegistryEnum": {
        "type": "string",
        "description": "Ip registries",
        "enum": [
          "ARIN",
          "RIPE"
        ]
      },
      "nichandle.IpRestriction": {
        "type": "object",
        "description": "List of all IP Restrictions",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The Id of the restriction",
            "readOnly": true
          },
          "ip": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ipBlock"
              }
            ],
            "description": "An IP range where we will apply the rule",
            "readOnly": true
          },
          "rule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.accessRestriction.IpRestrictionRuleEnum"
              }
            ],
            "description": "Accept or deny IP access"
          },
          "warning": {
            "type": "boolean",
            "description": "Send an email if someone try to access with this IP address"
          }
        }
      },
      "nichandle.IpRestrictionDefaultRule": {
        "type": "object",
        "description": "IP Restriction default rule",
        "properties": {
          "rule": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.accessRestriction.IpRestrictionRuleEnum"
              }
            ],
            "description": "Accept or deny access"
          },
          "warning": {
            "type": "boolean",
            "description": "Send an email if someone try to access"
          }
        }
      },
      "nichandle.Ipv4Org": {
        "type": "object",
        "description": "Details about an IP block organisation",
        "properties": {
          "abuse_mailbox": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country": {
            "$ref": "#/components/schemas/nichandle.CountryEnum"
          },
          "firstname": {
            "type": "string"
          },
          "lastname": {
            "type": "string"
          },
          "organisationId": {
            "type": "string",
            "readOnly": true
          },
          "phone": {
            "$ref": "#/components/schemas/phoneNumber"
          },
          "registry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.IpRegistryEnum"
              }
            ],
            "readOnly": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "nichandle.LanguageEnum": {
        "type": "string",
        "description": "Languages a nichandle can choose",
        "enum": [
          "cs_CZ",
          "de_DE",
          "en_AU",
          "en_CA",
          "en_GB",
          "en_IE",
          "en_US",
          "es_ES",
          "fi_FI",
          "fr_CA",
          "fr_FR",
          "fr_MA",
          "fr_SN",
          "fr_TN",
          "it_IT",
          "lt_LT",
          "nl_NL",
          "pl_PL",
          "pt_PT"
        ]
      },
      "nichandle.LegalFormEnum": {
        "type": "string",
        "description": "Legal forms a nichandle can be registered as",
        "enum": [
          "administration",
          "association",
          "corporation",
          "individual",
          "other",
          "personalcorporation"
        ]
      },
      "nichandle.ManagerPreference": {
        "type": "object",
        "description": "Manager preference",
        "properties": {
          "key": {
            "type": "string",
            "description": "This preference key",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "This preference value"
          }
        }
      },
      "nichandle.NicAutorenewInfos": {
        "type": "object",
        "description": "Auto renewal information",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Renewal active or not"
          },
          "lastRenew": {
            "type": "string",
            "description": "give the last renew",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "renewDay": {
            "type": "integer",
            "description": "give the renewal day"
          }
        }
      },
      "nichandle.Nichandle": {
        "type": "object",
        "description": "Details about your OVH identifier",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of nichandle",
            "nullable": true
          },
          "area": {
            "type": "string",
            "description": "Area of nichandle",
            "nullable": true
          },
          "birthCity": {
            "type": "string",
            "description": "City of birth",
            "nullable": true
          },
          "birthDay": {
            "type": "string",
            "description": "Birth date",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City of nichandle",
            "nullable": true
          },
          "companyNationalIdentificationNumber": {
            "type": "string",
            "description": "Company National Identification Number",
            "nullable": true
          },
          "complementaryAddress": {
            "type": "string",
            "description": "Complementary Address",
            "nullable": true
          },
          "corporationType": {
            "type": "string",
            "description": "Corporation type",
            "nullable": true
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Customer country"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.Currency"
              }
            ],
            "description": "Customer currency",
            "readOnly": true
          },
          "customerCode": {
            "type": "string",
            "description": "Your customer code (a numerical value used for identification when contacting support via phone call)",
            "nullable": true,
            "readOnly": true
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "readOnly": true
          },
          "fax": {
            "type": "string",
            "description": "Fax number",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "italianSDI": {
            "type": "string",
            "description": "Italian SDI",
            "nullable": true
          },
          "kycValidated": {
            "type": "boolean",
            "description": "KYC validation state",
            "nullable": true,
            "readOnly": true
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LanguageEnum"
              }
            ],
            "description": "Language",
            "nullable": true
          },
          "legalform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LegalFormEnum"
              }
            ],
            "description": "Customer legal form"
          },
          "name": {
            "type": "string",
            "description": "Customer name",
            "nullable": true
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "description": "National Identification Number",
            "nullable": true
          },
          "nichandle": {
            "type": "string",
            "description": "Customer identifier",
            "readOnly": true
          },
          "organisation": {
            "type": "string",
            "description": "Name of organisation",
            "nullable": true
          },
          "ovhCompany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.OvhCompanyEnum"
              }
            ],
            "description": "OVH company",
            "readOnly": true
          },
          "ovhSubsidiary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.OvhSubsidiaryEnum"
              }
            ],
            "description": "OVH subsidiary",
            "readOnly": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "phoneCountry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "nullable": true
          },
          "phoneType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.PhoneTypeEnum"
              }
            ],
            "description": "Type of phone(mobile, landline)",
            "nullable": true
          },
          "purposeOfPurchase": {
            "type": "string",
            "description": "Customer purpose of purchase",
            "nullable": true
          },
          "sex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.GenderEnum"
              }
            ],
            "description": "Gender",
            "nullable": true
          },
          "spareEmail": {
            "type": "string",
            "description": "Spare email",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.StateEnum"
              }
            ],
            "description": "Nichandle state",
            "readOnly": true
          },
          "vat": {
            "type": "string",
            "description": "VAT number",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "Zipcode",
            "nullable": true
          }
        }
      },
      "nichandle.OvhCompanyEnum": {
        "type": "string",
        "description": "OVH companies",
        "enum": [
          "kimsufi",
          "ovh",
          "soyoustart"
        ]
      },
      "nichandle.OvhSubsidiaryEnum": {
        "type": "string",
        "description": "OVH subsidiaries",
        "enum": [
          "CZ",
          "DE",
          "ES",
          "EU",
          "FI",
          "FR",
          "GB",
          "IE",
          "IT",
          "LT",
          "MA",
          "NL",
          "PL",
          "PT",
          "SN",
          "TN"
        ]
      },
      "nichandle.PhoneTypeEnum": {
        "type": "string",
        "description": "All phone type a person can choose",
        "enum": [
          "landline",
          "mobile"
        ]
      },
      "nichandle.RequiredPaymentMethodEnum": {
        "type": "string",
        "description": "Indicates the mandatory nature of having a valid payment method",
        "enum": [
          "mandatoryForAutorenew",
          "mandatoryForPostpaid",
          "notMandatory"
        ]
      },
      "nichandle.StateEnum": {
        "type": "string",
        "description": "States a nichandle can be in",
        "enum": [
          "complete",
          "incomplete"
        ]
      },
      "nichandle.SubAccount": {
        "type": "object",
        "description": "Sub Account",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "This sub-account description",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "This sub-account id",
            "readOnly": true
          }
        }
      },
      "nichandle.SubAccountConsumerKey": {
        "type": "object",
        "description": "Credentials to interact with the api on behalf of the sub-account",
        "properties": {
          "consumerKey": {
            "type": "string",
            "description": "The consumer key"
          }
        }
      },
      "nichandle.Subscription": {
        "type": "object",
        "description": "List of all OVH things you can subscribe to",
        "properties": {
          "registered": {
            "type": "boolean",
            "description": "Determine whether you are registered or not",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "The type of subscription",
            "readOnly": true
          }
        }
      },
      "nichandle.VipStatus": {
        "type": "object",
        "description": "VIP Status by Universe",
        "properties": {
          "cloud": {
            "type": "boolean",
            "description": "Is account VIP for Cloud Universe"
          },
          "dedicated": {
            "type": "boolean",
            "description": "Is account VIP for Dedicated Universe"
          },
          "telecom": {
            "type": "boolean",
            "description": "Is account VIP for Telecom Universe"
          },
          "web": {
            "type": "boolean",
            "description": "Is account VIP for Web Universe"
          }
        }
      },
      "nichandle.VoucherStatus": {
        "type": "object",
        "description": "Voucher Status and Information",
        "properties": {
          "validity": {
            "type": "boolean",
            "description": "Is voucher valid"
          }
        }
      },
      "nichandle.accessRestriction.IpRestrictionRuleEnum": {
        "type": "string",
        "description": "Accept or deny IP access",
        "enum": [
          "accept",
          "deny"
        ]
      },
      "nichandle.accessRestriction.SOTPAccount": {
        "type": "object",
        "description": "SOTP Two-Factor Authentication",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "lastUsedDate": {
            "type": "string",
            "description": "Last used date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "remaining": {
            "type": "integer",
            "description": "Number of remaining codes",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.accessRestriction.SOTPStatusEnum"
              }
            ],
            "description": "Status of this account",
            "readOnly": true
          }
        }
      },
      "nichandle.accessRestriction.SOTPSecret": {
        "type": "object",
        "description": "Describe SOTP secret keys",
        "properties": {
          "codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "nichandle.accessRestriction.SOTPStatusEnum": {
        "type": "string",
        "description": "Status of SOTP account",
        "enum": [
          "disabled",
          "enabled",
          "needCodeValidation",
          "needEmailValidation"
        ]
      },
      "nichandle.accessRestriction.SOTPValidate": {
        "type": "object",
        "description": "Describe SOTP validation status",
        "properties": {
          "remainingCodes": {
            "type": "integer"
          }
        }
      },
      "nichandle.accessRestriction.SmsAccount": {
        "type": "object",
        "description": "Sms Two-Factor Authentication",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of this phone"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the restriction",
            "readOnly": true
          },
          "lastUsedDate": {
            "type": "string",
            "description": "Last used date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "phoneNumber": {
            "type": "string",
            "description": "Associated phone number",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.accessRestriction.SmsStatusEnum"
              }
            ],
            "description": "Status of this account",
            "readOnly": true
          }
        }
      },
      "nichandle.accessRestriction.SmsCode": {
        "type": "object",
        "description": "Send secret code",
        "properties": {
          "challenge": {
            "type": "string"
          }
        }
      },
      "nichandle.accessRestriction.SmsSecret": {
        "type": "object",
        "description": "Describe secret key",
        "properties": {
          "id": {
            "type": "integer"
          },
          "remainingTry": {
            "type": "integer"
          }
        }
      },
      "nichandle.accessRestriction.SmsStatusEnum": {
        "type": "string",
        "description": "Status of the Sms account",
        "enum": [
          "disabled",
          "enabled",
          "needCodeValidation",
          "needEmailValidation"
        ]
      },
      "nichandle.accessRestriction.TOTPAccount": {
        "type": "object",
        "description": "TOTP Two-Factor Authentication",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of this TOTP"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the restriction",
            "readOnly": true
          },
          "lastUsedDate": {
            "type": "string",
            "description": "Last used date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.accessRestriction.TOTPStatusEnum"
              }
            ],
            "description": "Status of this account",
            "readOnly": true
          }
        }
      },
      "nichandle.accessRestriction.TOTPSecret": {
        "type": "object",
        "description": "Describe TOTP secret keys",
        "properties": {
          "id": {
            "type": "integer"
          },
          "qrcodeHelper": {
            "type": "string",
            "format": "password"
          },
          "secret": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "nichandle.accessRestriction.TOTPStatusEnum": {
        "type": "string",
        "description": "Status of TOTP account",
        "enum": [
          "disabled",
          "enabled",
          "needCodeValidation",
          "needEmailValidation"
        ]
      },
      "nichandle.accessRestriction.U2FAccount": {
        "type": "object",
        "description": "U2F Two-Factor Authentication",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of this U2F key"
          },
          "id": {
            "type": "integer",
            "description": "The Id of the restriction",
            "readOnly": true
          },
          "lastUsedDate": {
            "type": "string",
            "description": "Last used date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.accessRestriction.U2FStatusEnum"
              }
            ],
            "description": "Status of this account",
            "readOnly": true
          }
        }
      },
      "nichandle.accessRestriction.U2FRegisterChallenge": {
        "type": "object",
        "description": "U2F Register Request",
        "properties": {
          "challenge": {
            "type": "string"
          },
          "id": {
            "type": "integer"
          },
          "rpId": {
            "type": "string"
          },
          "rpName": {
            "type": "string"
          },
          "userDisplayName": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          }
        }
      },
      "nichandle.accessRestriction.U2FStatusEnum": {
        "type": "string",
        "description": "Status of U2F account",
        "enum": [
          "disabled",
          "enabled",
          "needCodeValidation"
        ]
      },
      "nichandle.changeContact.ContactTypeEnum": {
        "type": "string",
        "description": "Allowed types of contact who can be changed by change contact task",
        "enum": [
          "contactAdmin",
          "contactBilling",
          "contactTech"
        ]
      },
      "nichandle.changeContact.TaskStateEnum": {
        "type": "string",
        "description": "State of contact change task",
        "enum": [
          "aborted",
          "checkValidity",
          "doing",
          "done",
          "error",
          "expired",
          "refused",
          "todo",
          "validatingByCustomers"
        ]
      },
      "nichandle.changeEmail.TaskStateEnum": {
        "type": "string",
        "description": "State of email change task",
        "enum": [
          "aborted",
          "done",
          "refused",
          "todo"
        ]
      },
      "nichandle.contactChange.Task": {
        "type": "object",
        "description": "Task running a contact change on a service",
        "properties": {
          "askingAccount": {
            "type": "string",
            "description": "Account who asked the contact change",
            "nullable": true,
            "readOnly": true
          },
          "contactTypes": {
            "type": "array",
            "description": "Contacts to be changed",
            "items": {
              "$ref": "#/components/schemas/nichandle.changeContact.ContactTypeEnum"
            },
            "readOnly": true
          },
          "dateDone": {
            "type": "string",
            "description": "Date at which the contact change has been finished",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "dateRequest": {
            "type": "string",
            "description": "Date at which the request has been made",
            "format": "date-time",
            "readOnly": true
          },
          "fromAccount": {
            "type": "string",
            "description": "Account to change contact from",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "serviceDomain": {
            "type": "string",
            "description": "The service on which the task runs",
            "nullable": true,
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.changeContact.TaskStateEnum"
              }
            ],
            "description": "Current state of the request",
            "readOnly": true
          },
          "toAccount": {
            "type": "string",
            "description": "Account to change contact to",
            "readOnly": true
          }
        }
      },
      "nichandle.document.Document": {
        "type": "object",
        "description": "List of documents added on your account",
        "properties": {
          "creationDate": {
            "type": "string",
            "description": "Document creation",
            "format": "date-time",
            "readOnly": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Document expiration",
            "nullable": true,
            "format": "date-time"
          },
          "getUrl": {
            "type": "string",
            "description": "URL used to get document",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Document id",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Document name",
            "readOnly": true
          },
          "putUrl": {
            "type": "string",
            "description": "URL used to put document",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "description": "Document size (in bytes)",
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "description": "Document tags",
            "items": {
              "$ref": "#/components/schemas/complexType.SafeKeyValue_string"
            },
            "readOnly": true
          },
          "validationDate": {
            "type": "string",
            "description": "Document validation",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "nichandle.emailChange.Task": {
        "type": "object",
        "description": "Task running an email change on an account",
        "properties": {
          "dateDone": {
            "type": "string",
            "description": "End date of that request",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "dateRequest": {
            "type": "string",
            "description": "Creation date of that request",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "newEmail": {
            "type": "string",
            "description": "The email address to change for",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.changeEmail.TaskStateEnum"
              }
            ],
            "description": "Current state of the request",
            "readOnly": true
          }
        }
      },
      "nichandle.emailNotification": {
        "type": "object",
        "description": "Email notification",
        "properties": {
          "body": {
            "type": "string",
            "description": "This email body",
            "readOnly": true
          },
          "date": {
            "type": "string",
            "description": "This email date",
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "description": "This email Id",
            "readOnly": true
          },
          "subject": {
            "type": "string",
            "description": "This email subject",
            "readOnly": true
          }
        }
      },
      "nichandle.sshKey": {
        "type": "object",
        "description": "Customer public SSH key, can be used for rescue netboot or server access after reinstallation",
        "properties": {
          "key": {
            "type": "string",
            "description": "ASCII encoded public SSH key",
            "readOnly": true
          },
          "keyName": {
            "type": "string",
            "description": "Name of this public SSH key",
            "readOnly": true
          }
        }
      },
      "oauth2.ClientFlowEnum": {
        "type": "string",
        "description": "oAuth2 Flow",
        "enum": [
          "AUTHORIZATION_CODE",
          "CLIENT_CREDENTIALS"
        ]
      },
      "oauth2.accessToken": {
        "type": "object",
        "description": "An oAuth2 accesss token details",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "token's creation date",
            "format": "date-time",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "description": "token's expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "id of the token",
            "readOnly": true
          },
          "scopes": {
            "type": "array",
            "description": "list of scopes the token has",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "oauth2.client": {
        "type": "object",
        "description": "An oAuth2 Client",
        "properties": {
          "callbackUrls": {
            "type": "array",
            "description": "allowed callback urls",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "clientId": {
            "type": "string",
            "description": "client's client_id",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "client's creation date",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "client's description"
          },
          "flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/oauth2.ClientFlowEnum"
              }
            ],
            "description": "oAuth2's flow",
            "readOnly": true
          },
          "identity": {
            "type": "string",
            "description": "associated IAM identity",
            "nullable": true,
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "client's name"
          }
        }
      },
      "oauth2.clientRequest": {
        "type": "object",
        "description": "An oAuth2 Client Request",
        "properties": {
          "callbackUrls": {
            "type": "array",
            "description": "allowed callback urls",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string",
            "description": "client's description"
          },
          "flow": {
            "allOf": [
              {
                "$ref": "#/components/schemas/oauth2.ClientFlowEnum"
              }
            ],
            "description": "oAuth2's flow"
          },
          "name": {
            "type": "string",
            "description": "client's name"
          }
        },
        "required": [
          "description",
          "flow",
          "name"
        ]
      },
      "oauth2.clientSecret": {
        "type": "object",
        "description": "An oAuth2 Client Secret",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "client's client_id",
            "readOnly": true
          },
          "clientSecret": {
            "type": "string",
            "description": "client's client_secret",
            "format": "password",
            "readOnly": true
          }
        }
      },
      "oauth2.token": {
        "type": "object",
        "description": "An oAuth2 refresh token details",
        "properties": {
          "accessTokens": {
            "type": "array",
            "description": "list of access tokens derived from the refresh token",
            "items": {
              "$ref": "#/components/schemas/oauth2.accessToken"
            },
            "readOnly": true
          },
          "clientDescription": {
            "type": "string",
            "description": "Description of the OAuth2 client that requested the token",
            "readOnly": true
          },
          "clientId": {
            "type": "string",
            "description": "ID of the OAuth2 client that requested the token",
            "readOnly": true
          },
          "clientName": {
            "type": "string",
            "description": "Name of the OAuth2 client that requested the token",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "token's creation date",
            "format": "date-time",
            "readOnly": true
          },
          "expiresAt": {
            "type": "string",
            "description": "token's expiration date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "id of the refresh token",
            "readOnly": true
          },
          "identities": {
            "type": "array",
            "description": "list of identities that the token is associated with",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "lastUsedAt": {
            "type": "string",
            "description": "last time the token was used to get a new access token",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "scopes": {
            "type": "array",
            "description": "list of scopes the token has",
            "items": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "order.Contract": {
        "type": "object",
        "description": "A contract",
        "properties": {
          "content": {
            "type": "string",
            "description": "Terms of the contract",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the contract",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL to download the contract",
            "readOnly": true
          }
        }
      },
      "order.CurrencyCodeEnum": {
        "type": "string",
        "description": "Currency code",
        "enum": [
          "AUD",
          "CAD",
          "CZK",
          "EUR",
          "GBP",
          "INR",
          "LTL",
          "MAD",
          "N/A",
          "PLN",
          "SGD",
          "TND",
          "USD",
          "XOF",
          "points"
        ]
      },
      "order.LongPrice": {
        "type": "object",
        "description": "LongPrice with all digits and its currency and a textual representation",
        "properties": {
          "currencyCode": {
            "$ref": "#/components/schemas/order.CurrencyCodeEnum"
          },
          "text": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        }
      },
      "order.Order": {
        "type": "object",
        "description": "An order",
        "properties": {
          "contracts": {
            "type": "array",
            "description": "List of contracts related to the order",
            "items": {
              "$ref": "#/components/schemas/order.Contract"
            },
            "readOnly": true
          },
          "details": {
            "type": "array",
            "description": "Details of the order",
            "items": {
              "$ref": "#/components/schemas/order.OrderDetail"
            },
            "readOnly": true
          },
          "orderId": {
            "type": "integer",
            "description": "Identifier of the order",
            "nullable": true,
            "readOnly": true
          },
          "prices": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.OrderPrices"
              }
            ],
            "description": "Prices of the order including with and without taxes",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "URL to download the order",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "order.OrderDetail": {
        "type": "object",
        "description": "Detail of an order",
        "properties": {
          "cartItemID": {
            "type": "integer",
            "description": "Cart Item ID the details is related to",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the detail",
            "readOnly": true
          },
          "detailType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.OrderDetailTypeEnum"
              }
            ],
            "description": "Type of detail",
            "nullable": true,
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "description": "Service name",
            "readOnly": true
          },
          "originalTotalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Original price of the detail before reduction application",
            "readOnly": true
          },
          "quantity": {
            "type": "integer",
            "description": "Quantity of the service",
            "readOnly": true
          },
          "reductionTotalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Total price of the reduction",
            "readOnly": true
          },
          "reductions": {
            "type": "array",
            "description": "List of reductions applied to the detail",
            "items": {
              "$ref": "#/components/schemas/order.Reduction"
            },
            "readOnly": true
          },
          "totalPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price total of the services",
            "readOnly": true
          },
          "unitPrice": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Unitary price of the service",
            "readOnly": true
          }
        }
      },
      "order.OrderDetailTypeEnum": {
        "type": "string",
        "description": "Product type of item in order",
        "enum": [
          "ACCESSORY",
          "CAUTION",
          "CHOOSED",
          "CONSUMPTION",
          "CREATION",
          "DELIVERY",
          "DURATION",
          "GIFT",
          "INSTALLATION",
          "LICENSE",
          "MUTE",
          "OTHER",
          "OUTPLAN",
          "QUANTITY",
          "REFUND",
          "RENEW",
          "SPECIAL",
          "SWITCH",
          "TRANSFER",
          "VOUCHER"
        ]
      },
      "order.OrderPrices": {
        "type": "object",
        "description": "Prices of an order",
        "properties": {
          "originalWithoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price before reduction application",
            "nullable": true,
            "readOnly": true
          },
          "reduction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price concerning the reduced amount",
            "nullable": true,
            "readOnly": true
          },
          "tax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Tax amount",
            "readOnly": true
          },
          "withTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price with tax",
            "readOnly": true
          },
          "withoutTax": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price without tax",
            "readOnly": true
          }
        }
      },
      "order.Price": {
        "type": "object",
        "description": "Price with its currency and textual representation",
        "properties": {
          "currencyCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.CurrencyCodeEnum"
              }
            ],
            "description": "Currency code",
            "readOnly": true
          },
          "priceInUcents": {
            "type": "integer",
            "description": "Price in microcents",
            "nullable": true,
            "readOnly": true
          },
          "text": {
            "type": "string",
            "description": "Textual representation",
            "readOnly": true
          },
          "value": {
            "type": "number",
            "description": "The effective price",
            "readOnly": true
          }
        }
      },
      "order.Reduction": {
        "type": "object",
        "description": "Order detail reduction",
        "properties": {
          "context": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.ReductionContextEnum"
              }
            ],
            "description": "In which context the reduction is applied",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Promotion description",
            "readOnly": true
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Reduction price applied with this promotion",
            "readOnly": true
          },
          "reductionDescription": {
            "type": "string",
            "description": "Reduction description",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.ReductionTypeEnum"
              }
            ],
            "description": "Reduction effect, price modification",
            "readOnly": true
          },
          "value": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "The reduction value",
            "readOnly": true
          }
        }
      },
      "order.ReductionContextEnum": {
        "type": "string",
        "description": "Context of the reduction",
        "enum": [
          "promotion",
          "voucher"
        ]
      },
      "order.ReductionTypeEnum": {
        "type": "string",
        "description": "Type of reduction",
        "enum": [
          "fixed_amount",
          "forced_amount",
          "percentage"
        ]
      },
      "order.cart.GenericProductDefinition": {
        "type": "object",
        "description": "Representation of a generic product",
        "properties": {
          "planCode": {
            "type": "string",
            "description": "Product offer identifier",
            "readOnly": true
          },
          "prices": {
            "type": "array",
            "description": "Prices of the product offer",
            "items": {
              "$ref": "#/components/schemas/order.cart.GenericProductPricing"
            },
            "readOnly": true
          },
          "productName": {
            "type": "string",
            "description": "Name of the product",
            "readOnly": true
          },
          "productType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.cart.GenericProductTypeEnum"
              }
            ],
            "description": "Product type",
            "readOnly": true
          }
        }
      },
      "order.cart.GenericProductPricing": {
        "type": "object",
        "description": "Representation of a product pricing",
        "properties": {
          "capacities": {
            "type": "array",
            "description": "Capacities of the pricing (type of pricing)",
            "items": {
              "$ref": "#/components/schemas/order.cart.GenericProductPricingCapacitiesEnum"
            },
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Description of the pricing",
            "readOnly": true
          },
          "duration": {
            "type": "string",
            "description": "Duration for ordering the product",
            "format": "duration",
            "readOnly": true
          },
          "interval": {
            "type": "integer",
            "description": "Interval of renewal",
            "readOnly": true
          },
          "maximumQuantity": {
            "type": "integer",
            "description": "Maximum quantity that can be ordered",
            "nullable": true,
            "readOnly": true
          },
          "maximumRepeat": {
            "type": "integer",
            "description": "Maximum repeat for renewal",
            "nullable": true,
            "readOnly": true
          },
          "minimumQuantity": {
            "type": "integer",
            "description": "Minimum quantity that can be ordered",
            "readOnly": true
          },
          "minimumRepeat": {
            "type": "integer",
            "description": "Minimum repeat for renewal",
            "readOnly": true
          },
          "price": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.Price"
              }
            ],
            "description": "Price of the product",
            "readOnly": true
          },
          "priceInUcents": {
            "type": "integer",
            "description": "Price of the product in micro-centims",
            "readOnly": true
          },
          "pricingMode": {
            "type": "string",
            "description": "Pricing model identifier",
            "readOnly": true
          },
          "pricingType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/order.cart.GenericProductPricingTypeEnum"
              }
            ],
            "description": "Pricing type",
            "readOnly": true
          }
        }
      },
      "order.cart.GenericProductPricingCapacitiesEnum": {
        "type": "string",
        "description": "Capacity of a pricing (type)",
        "enum": [
          "consumption",
          "detach",
          "downgrade",
          "dynamic",
          "installation",
          "renew",
          "upgrade"
        ]
      },
      "order.cart.GenericProductPricingTypeEnum": {
        "type": "string",
        "description": "Type of a pricing",
        "enum": [
          "consumption",
          "purchase",
          "rental"
        ]
      },
      "order.cart.GenericProductTypeEnum": {
        "type": "string",
        "description": "Type of a product",
        "enum": [
          "cloud_service",
          "delivery",
          "deposit",
          "domain",
          "implementation_services",
          "saas_license",
          "shipping",
          "storage"
        ]
      },
      "payment.method.AvailablePaymentMethod": {
        "type": "object",
        "description": "Available payment methods",
        "properties": {
          "formSessionId": {
            "type": "string",
            "description": "Payment method session identifier",
            "nullable": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/payment.method.Icon"
              }
            ],
            "description": "Payment method type icon"
          },
          "integration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/payment.method.IntegrationType"
              }
            ],
            "description": "Graphical payment integration to use"
          },
          "merchantId": {
            "type": "string",
            "description": "Payment method merchant identifier",
            "nullable": true
          },
          "oneshot": {
            "type": "boolean",
            "description": "Payment method type is possible to pay in oneshot mode ?"
          },
          "organizationId": {
            "type": "string",
            "description": "Payment method organization identifier",
            "nullable": true
          },
          "paymentSubType": {
            "type": "string",
            "description": "Payment method subtype",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "Payment method type"
          },
          "registerable": {
            "type": "boolean",
            "description": "Payment method type is registerable ?"
          },
          "registerableWithTransaction": {
            "type": "boolean",
            "description": "Payment method type is registerable with the possibility to pay in same time an order ?"
          }
        }
      },
      "payment.method.Icon": {
        "type": "object",
        "description": "Payment icon",
        "properties": {
          "data": {
            "type": "string",
            "description": "Icon data in base64",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Icon name",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Icon URL",
            "nullable": true
          }
        }
      },
      "payment.method.IntegrationType": {
        "type": "string",
        "description": "Payment method integration type",
        "enum": [
          "BANK_TRANSFER",
          "COMPONENT",
          "DONE",
          "IFRAME_VANTIV",
          "IN_CONTEXT",
          "NONE",
          "POST_FORM",
          "REDIRECT"
        ]
      },
      "payment.method.PaymentMethod": {
        "type": "object",
        "description": "payment method",
        "properties": {
          "billingContactId": {
            "type": "integer",
            "description": "Associated billing contact ID",
            "nullable": true
          },
          "creationDate": {
            "type": "string",
            "description": "Creation date",
            "format": "date-time"
          },
          "default": {
            "type": "boolean",
            "description": "Indicates if payment method is the default one for this account"
          },
          "description": {
            "type": "string",
            "description": "Custom customer description",
            "nullable": true
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date",
            "nullable": true,
            "format": "date-time"
          },
          "formSessionId": {
            "type": "string",
            "description": "Form session ID",
            "nullable": true
          },
          "icon": {
            "allOf": [
              {
                "$ref": "#/components/schemas/payment.method.Icon"
              }
            ],
            "description": "Payment method type icon"
          },
          "integration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/payment.method.IntegrationType"
              }
            ],
            "description": "Payment method integration type",
            "nullable": true
          },
          "label": {
            "type": "string",
            "description": "Payment method public label",
            "nullable": true
          },
          "lastUpdate": {
            "type": "string",
            "description": "Last update date",
            "nullable": true,
            "format": "date-time"
          },
          "merchantId": {
            "type": "string",
            "description": "Merchant ID",
            "nullable": true
          },
          "oneclick": {
            "type": "boolean",
            "description": "Indicates if payment method support the oneclick functionality",
            "nullable": true
          },
          "paymentMeanId": {
            "type": "integer",
            "description": "Payment mean ID associated to this payment method",
            "nullable": true
          },
          "paymentMethodId": {
            "type": "integer",
            "description": "Payment method ID"
          },
          "paymentSubType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/payment.method.SubTypeEnum"
              }
            ],
            "description": "Payment method sub type",
            "nullable": true
          },
          "paymentType": {
            "type": "string",
            "description": "Payment method type"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/payment.method.StatusEnum"
              }
            ],
            "description": "Payment method status"
          }
        }
      },
      "payment.method.StatusEnum": {
        "type": "string",
        "description": "Payment method status",
        "enum": [
          "CANCELED",
          "CANCELING",
          "CREATED",
          "CREATING",
          "ERROR",
          "EXPIRED",
          "FAILED",
          "MAINTENANCE",
          "PAUSED",
          "REJECTED",
          "REPLACED",
          "VALID",
          "VALIDATING"
        ]
      },
      "payment.method.SubTypeEnum": {
        "type": "string",
        "description": "Payment method sub-type",
        "enum": [
          "30_DAYS",
          "45_DAYS",
          "60_DAYS",
          "AMERICAN_EXPRESS",
          "AURA",
          "CARTE_BANCAIRE",
          "CARTE_BLEUE",
          "CHORUS",
          "DINERS_CLUB",
          "DISCOVER",
          "JCB",
          "MAESTRO",
          "MASTERCARD",
          "NONE",
          "RUPAY",
          "VISA"
        ]
      },
      "phoneNumber": {
        "type": "string",
        "description": "Phone number",
        "format": "phone-number"
      },
      "recommendations.Recommendation": {
        "type": "object",
        "description": "Recommendation struct",
        "properties": {
          "advices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recommendations.RecommendationAdvice"
            },
            "readOnly": true
          },
          "localizedDescription": {
            "type": "object",
            "description": "Recommendation advices introduction and description sentences, indexed by supported locales",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "rank": {
            "type": "integer",
            "description": "Recommendation rank",
            "readOnly": true
          }
        }
      },
      "recommendations.RecommendationAdvice": {
        "type": "object",
        "description": "Recommendation advice struct",
        "properties": {
          "id": {
            "type": "string",
            "description": "Product identifier, usually range>line>category>subCategory>marketingName",
            "readOnly": true
          },
          "score": {
            "type": "number",
            "description": "Recommendation score",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Product page url",
            "readOnly": true
          }
        }
      },
      "recommendations.Recommendations": {
        "type": "object",
        "description": "Array of Recommendation objects",
        "properties": {
          "recommendations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/recommendations.Recommendation"
            },
            "readOnly": true
          }
        }
      },
      "recommendations.productRangesEnum": {
        "type": "string",
        "description": "Recommendations product ranges",
        "enum": [
          "baremetal",
          "domain",
          "public_cloud",
          "saas",
          "vps",
          "web"
        ]
      },
      "reseller.Nichandle": {
        "type": "object",
        "description": "Details about your OVH identifier",
        "properties": {
          "address": {
            "type": "string",
            "description": "Address of nichandle",
            "nullable": true
          },
          "area": {
            "type": "string",
            "description": "Area of nichandle",
            "nullable": true
          },
          "billingAccount": {
            "type": "string",
            "description": "Billing account to link to the new nic",
            "nullable": true
          },
          "birthCity": {
            "type": "string",
            "description": "City of birth",
            "nullable": true
          },
          "birthDay": {
            "type": "string",
            "description": "Birth date",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City of nichandle",
            "nullable": true
          },
          "companyNationalIdentificationNumber": {
            "type": "string",
            "description": "Company National Identification Number",
            "nullable": true
          },
          "complementaryAddress": {
            "type": "string",
            "description": "Complementary Address",
            "nullable": true
          },
          "corporationType": {
            "type": "string",
            "description": "Corporation type",
            "nullable": true
          },
          "country": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "description": "Customer country"
          },
          "currency": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.Currency"
              }
            ],
            "description": "Customer currency",
            "readOnly": true
          },
          "customerCode": {
            "type": "string",
            "description": "Your customer code (a numerical value used for identification when contacting support via phone call)",
            "nullable": true,
            "readOnly": true
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "Fax number",
            "nullable": true
          },
          "firstname": {
            "type": "string",
            "description": "First name",
            "nullable": true
          },
          "italianSDI": {
            "type": "string",
            "description": "Italian SDI",
            "nullable": true
          },
          "kycValidated": {
            "type": "boolean",
            "description": "KYC validation state",
            "nullable": true,
            "readOnly": true
          },
          "language": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LanguageEnum"
              }
            ],
            "description": "Language",
            "nullable": true
          },
          "legalform": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.LegalFormEnum"
              }
            ],
            "description": "Customer legal form"
          },
          "name": {
            "type": "string",
            "description": "Customer name",
            "nullable": true
          },
          "nationalIdentificationNumber": {
            "type": "string",
            "description": "National Identification Number",
            "nullable": true
          },
          "nichandle": {
            "type": "string",
            "description": "Customer identifier",
            "readOnly": true
          },
          "organisation": {
            "type": "string",
            "description": "Name of organisation",
            "nullable": true
          },
          "ovhCompany": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.OvhCompanyEnum"
              }
            ],
            "description": "OVH company",
            "readOnly": true
          },
          "ovhSubsidiary": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.OvhSubsidiaryEnum"
              }
            ],
            "description": "OVH subsidiary",
            "readOnly": true
          },
          "phone": {
            "type": "string",
            "description": "Phone number",
            "nullable": true
          },
          "phoneCountry": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.CountryEnum"
              }
            ],
            "nullable": true
          },
          "phoneType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.PhoneTypeEnum"
              }
            ],
            "description": "Type of phone(mobile, landline)",
            "nullable": true
          },
          "purposeOfPurchase": {
            "type": "string",
            "description": "Customer purpose of purchase",
            "nullable": true
          },
          "sex": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.GenderEnum"
              }
            ],
            "description": "Gender",
            "nullable": true
          },
          "spareEmail": {
            "type": "string",
            "description": "Spare email",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/nichandle.StateEnum"
              }
            ],
            "description": "Nichandle state",
            "readOnly": true
          },
          "vat": {
            "type": "string",
            "description": "VAT number",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "Zipcode",
            "nullable": true
          }
        }
      },
      "services.expanded.Route": {
        "type": "object",
        "description": "Route of the service",
        "properties": {
          "path": {
            "type": "string",
            "description": "Path to use in API",
            "nullable": true,
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Path with variables applied",
            "nullable": true,
            "readOnly": true
          },
          "vars": {
            "type": "array",
            "description": "Variables to use in the path",
            "items": {
              "$ref": "#/components/schemas/complexType.SafeKeyValue_string"
            },
            "readOnly": true
          }
        }
      },
      "telephony.BillingSettings": {
        "type": "object",
        "description": "Billing policies settings",
        "properties": {
          "renewByBillingContact": {
            "type": "boolean",
            "description": "Renew is done by billing contact instead of billing account"
          }
        }
      },
      "telephony.DefaultIpRestriction": {
        "type": "object",
        "description": "Default IP restriction of a VoIP line",
        "properties": {
          "id": {
            "type": "integer",
            "readOnly": true
          },
          "subnet": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ipv4Block"
              }
            ],
            "description": "The IPv4 subnet you want to allow",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/telephony.ProtocolEnum"
              }
            ],
            "description": "The protocol you want to restrict (sip/mgcp)",
            "readOnly": true
          }
        }
      },
      "telephony.LineDescriptionSettings": {
        "type": "object",
        "description": "Line description policies settings",
        "properties": {
          "displayOnBill": {
            "type": "boolean",
            "description": "Line's description is displayed on bills"
          },
          "displayOnIncomingCall": {
            "type": "boolean",
            "description": "Line's description is displayed on incoming calls"
          }
        }
      },
      "telephony.MailDomain2Service": {
        "type": "object",
        "description": "Custom domains of your fax services",
        "properties": {
          "domain": {
            "type": "string",
            "description": "The custom domain of your fax services",
            "readOnly": true
          },
          "id": {
            "type": "integer",
            "readOnly": true
          }
        }
      },
      "telephony.ProtocolEnum": {
        "type": "string",
        "description": "Phone protocol",
        "enum": [
          "mgcp",
          "sip"
        ]
      },
      "telephony.Settings": {
        "type": "object",
        "description": "Telephony settings linked to the customer account",
        "properties": {
          "billingPolicies": {
            "allOf": [
              {
                "$ref": "#/components/schemas/telephony.BillingSettings"
              }
            ],
            "description": "Billing policies settings"
          },
          "lineDescriptionPolicies": {
            "allOf": [
              {
                "$ref": "#/components/schemas/telephony.LineDescriptionSettings"
              }
            ],
            "description": "Line description policies settings"
          }
        }
      },
      "time": {
        "type": "string",
        "description": "Time (e.g., 15:04:05)",
        "format": "time",
        "example": "15:04:05"
      },
      "xander.ContactFieldEnum": {
        "type": "string",
        "description": "Available contact fields",
        "enum": [
          "address.city",
          "address.country",
          "address.line1",
          "address.line2",
          "address.line3",
          "address.otherDetails",
          "address.province",
          "address.zip",
          "birthCity",
          "birthCountry",
          "birthDay",
          "birthZip",
          "cellPhone",
          "companyNationalIdentificationNumber",
          "email",
          "fax",
          "firstName",
          "gender",
          "language",
          "lastName",
          "legalForm",
          "nationalIdentificationNumber",
          "nationality",
          "organisationName",
          "organisationType",
          "phone",
          "spareEmail",
          "vat"
        ]
      },
      "xdsl.Setting": {
        "type": "object",
        "description": "Xdsl Settings",
        "properties": {
          "ispPartnerOrderCollectChoice": {
            "type": "boolean",
            "description": "Enable the partner collect choice in the order funnel"
          },
          "resellerFastModemShipping": {
            "type": "boolean",
            "description": "Send the modem as soon as possible, do not wait the xdsl line to be active"
          },
          "resellerModemBasicConfig": {
            "type": "boolean",
            "description": "Let the modem with vendor configuration. It prevent to apply the config managed by ovh manager"
          }
        }
      }
    }
  },
  "paths": {
    "/me": {
      "get": {
        "operationId": "getAccountDetails",
        "summary": "Get details about your nichandle",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.Nichandle"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/get",
            "required": true
          }
        ]
      },
      "put": {
        "operationId": "editAccountDetails",
        "summary": "Update details of your nichandle",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.Nichandle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/edit",
            "required": true
          }
        ]
      }
    },
    "/me/abuse": {
      "get": {
        "summary": "Retrieve abuse cases list",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/abuse/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeAbuseAbuse"
      }
    },
    "/me/abuse/{id}": {
      "get": {
        "summary": "Check specific abuse case",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.abuse.Abuse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/abuse/get",
            "required": true
          }
        ],
        "x-response-identifier": "publicId"
      }
    },
    "/me/accessRestriction/backupCode": {
      "delete": {
        "summary": "Delete this Two-Factor",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.SOTPAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "post": {
        "summary": "Add a SOTP access restriction",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.SOTPSecret"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/backupCode/disable": {
      "post": {
        "summary": "Disable this SOTP account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OTP code given by the application",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/backupCode/enable": {
      "post": {
        "summary": "Enable this SOTP account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OTP code given by the application",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/backupCode/validate": {
      "post": {
        "summary": "Validate your SOTP account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OTP code given by the application",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.SOTPValidate"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/developerMode": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.DeveloperModeRestriction"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/developerMode/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.DeveloperModeRestriction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/developerMode/edit",
            "required": true
          }
        ]
      }
    },
    "/me/accessRestriction/ip": {
      "get": {
        "summary": "List of IP restrictions",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ip/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleIpRestriction"
      },
      "post": {
        "summary": "Add an IP access restriction",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip": {
                    "description": "An IP range where we will apply the rule",
                    "$ref": "#/components/schemas/ipBlock"
                  },
                  "rule": {
                    "description": "Accept or deny IP access",
                    "$ref": "#/components/schemas/nichandle.accessRestriction.IpRestrictionRuleEnum"
                  },
                  "warning": {
                    "type": "boolean",
                    "description": "Send an email if someone try to access with this IP address"
                  }
                },
                "required": [
                  "ip",
                  "rule",
                  "warning"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ip/create",
            "required": true
          }
        ]
      }
    },
    "/me/accessRestriction/ip/{id}": {
      "delete": {
        "summary": "Delete this restriction rule",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ip/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.IpRestriction"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ip/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.IpRestriction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ip/edit",
            "required": true
          }
        ]
      }
    },
    "/me/accessRestriction/ipDefaultRule": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.IpRestrictionDefaultRule"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ipDefaultRule/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.IpRestrictionDefaultRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/accessRestriction/ipDefaultRule/edit",
            "required": true
          }
        ]
      }
    },
    "/me/accessRestriction/sms": {
      "get": {
        "summary": "List of Sms accounts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-expanded-response": "NichandleAccessRestrictionSmsAccount"
      },
      "post": {
        "summary": "Add a SMS access restriction",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "Cell phone number to register"
                  }
                },
                "required": [
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.SmsSecret"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/sms/{id}": {
      "delete": {
        "summary": "Delete this Two-Factor",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.SmsAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.accessRestriction.SmsAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/sms/{id}/disable": {
      "post": {
        "summary": "Disable this SMS account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "SMS code send by a cellphone",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/sms/{id}/enable": {
      "post": {
        "summary": "Enable this SMS account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "SMS code send by a cellphone",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/sms/{id}/sendCode": {
      "post": {
        "summary": "Send a SMS to this account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.SmsCode"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/sms/{id}/validate": {
      "post": {
        "summary": "Validate your SMS account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "SMS code send to a cellphone",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/totp": {
      "get": {
        "summary": "List of TOTP accounts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-expanded-response": "NichandleAccessRestrictionTOTPAccount"
      },
      "post": {
        "summary": "Add a TOTP access restriction",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.TOTPSecret"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/totp/{id}": {
      "delete": {
        "summary": "Delete this Two-Factor",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.TOTPAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.accessRestriction.TOTPAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/totp/{id}/disable": {
      "post": {
        "summary": "Disable this TOTP account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OTP code given by the application",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/totp/{id}/enable": {
      "post": {
        "summary": "Enable this TOTP account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OTP code given by the application",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/totp/{id}/validate": {
      "post": {
        "summary": "Validate your TOTP account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "description": "OTP code given by the application",
                    "format": "password"
                  }
                },
                "required": [
                  "code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/u2f": {
      "get": {
        "summary": "List of U2F accounts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-expanded-response": "NichandleAccessRestrictionU2FAccount"
      },
      "post": {
        "summary": "Add a U2F access restriction",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.U2FRegisterChallenge"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/u2f/{id}": {
      "delete": {
        "summary": "Delete this Two-Factor",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.accessRestriction.U2FAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.accessRestriction.U2FAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/u2f/{id}/disable": {
      "post": {
        "summary": "Disable this U2F account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/u2f/{id}/enable": {
      "post": {
        "summary": "Enable this U2F account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/accessRestriction/u2f/{id}/validate": {
      "post": {
        "summary": "Validate your U2F account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "The Id of the restriction",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attestationObject": {
                    "type": "string"
                  },
                  "clientDataJSON": {
                    "type": "string"
                  },
                  "rawId": {
                    "type": "string"
                  }
                },
                "required": [
                  "attestationObject",
                  "clientDataJSON",
                  "rawId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/account": {
      "post": {
        "summary": "Create a new account whose billing will be linked to your current account's billing",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/reseller.Nichandle"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.Nichandle"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Alpha version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/account/create",
            "required": true
          }
        ]
      }
    },
    "/me/agreements": {
      "get": {
        "summary": "List of contracts signed between you and OVH",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "agreed",
            "description": "Filter the value of agreed property (like)",
            "schema": {
              "$ref": "#/components/schemas/agreements.AgreementStateEnum"
            }
          },
          {
            "in": "query",
            "name": "contractId",
            "description": "Filter the value of contractId property (like)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/agreements/get",
            "required": true
          }
        ],
        "x-expanded-response": "AgreementsContractAgreement"
      }
    },
    "/me/agreements/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the contract",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agreements.ContractAgreement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/agreements/get",
            "required": true
          }
        ]
      }
    },
    "/me/agreements/{id}/accept": {
      "post": {
        "summary": "Accept this contract",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the contract",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/agreements/accept",
            "required": true
          }
        ]
      }
    },
    "/me/agreements/{id}/contract": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the contract",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agreements.Contract"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/agreements/contract/get",
            "required": true
          }
        ]
      }
    },
    "/me/api/application": {
      "get": {
        "summary": "Retrieve all applications",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/application/get",
            "required": true
          }
        ],
        "x-expanded-response": "AuthApiApplication"
      }
    },
    "/me/api/application/{applicationId}": {
      "delete": {
        "summary": "Delete an application. It will revoke all credential belonging to this application",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "applicationId",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/application/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve information about an application",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "applicationId",
            "description": "Application ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.ApiApplication"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/application/get",
            "required": true
          }
        ],
        "x-response-identifier": "applicationId"
      }
    },
    "/me/api/credential": {
      "get": {
        "summary": "Retrieve all credentials",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "applicationId",
            "description": "Filter by applicationId",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter by status",
            "schema": {
              "$ref": "#/components/schemas/auth.CredentialStateEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/credential/get",
            "required": true
          }
        ],
        "x-expanded-response": "AuthApiCredential"
      }
    },
    "/me/api/credential/{credentialId}": {
      "delete": {
        "summary": "Delete a credential",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "description": "Credential ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/credential/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve information about a credential",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "description": "Credential ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.ApiCredential"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/credential/get",
            "required": true
          }
        ],
        "x-response-identifier": "credentialId"
      },
      "put": {
        "summary": "Edit a credential",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "description": "Credential ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.ApiCredential"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/credential/edit",
            "required": true
          }
        ]
      }
    },
    "/me/api/credential/{credentialId}/application": {
      "get": {
        "summary": "Get associated application",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "credentialId",
            "description": "Credential ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.ApiApplication"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/credential/application/get",
            "required": true
          }
        ],
        "x-response-identifier": "applicationId"
      }
    },
    "/me/api/log/kind": {
      "get": {
        "summary": "List available log kinds",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/kind/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsLogKind"
      }
    },
    "/me/api/log/kind/{name}": {
      "get": {
        "summary": "Get a log kind",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogKind"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/kind/get",
            "required": true
          }
        ],
        "x-response-identifier": "name"
      }
    },
    "/me/api/log/subscription": {
      "get": {
        "summary": "List subscription IDs for a cluster",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "kind",
            "description": "Filter on a specific kind (e.g., audit)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/subscription/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsLogSubscription"
      },
      "post": {
        "summary": "Create a subscription from logs to a pre-existing LDP stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/subscription/create",
            "required": true
          },
          {
            "name": "ldp:apiovh:output/graylog/stream/forwardTo",
            "description": "Required on the targeted LDP service",
            "required": true
          }
        ]
      }
    },
    "/me/api/log/subscription/{subscriptionId}": {
      "delete": {
        "summary": "Delete a subscription",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/subscription/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get subscription details",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscription"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/subscription/get",
            "required": true
          }
        ],
        "x-response-identifier": "subscriptionId"
      }
    },
    "/me/api/log/url": {
      "post": {
        "summary": "Generate a temporary URL to retrieve logs",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.LogUrlCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.TemporaryLogsLink"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/log/url/create",
            "required": true
          }
        ]
      }
    },
    "/me/api/logs/self": {
      "get": {
        "summary": "List of Api calls done with your account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/logs/self/get",
            "required": true
          }
        ],
        "x-expanded-response": "ApiLog"
      }
    },
    "/me/api/logs/self/{logId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "logId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Log"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/logs/self/get",
            "required": true
          }
        ]
      }
    },
    "/me/api/logs/services": {
      "get": {
        "summary": "List of Api calls done on services you have access to",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/logs/services/get",
            "required": true
          }
        ],
        "x-expanded-response": "ApiLog"
      }
    },
    "/me/api/logs/services/{logId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "logId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/api.Log"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/logs/services/get",
            "required": true
          }
        ]
      }
    },
    "/me/api/oauth2/client": {
      "get": {
        "summary": "List oAuth2 clients",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/client/get",
            "required": true
          }
        ],
        "x-expanded-response": "Oauth2Client"
      },
      "post": {
        "summary": "Create a new oauth2 client",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oauth2.clientRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth2.clientSecret"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/client/create",
            "required": true
          }
        ]
      }
    },
    "/me/api/oauth2/client/{clientId}": {
      "delete": {
        "summary": "Delete an oAuth2 client",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientId",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/client/delete",
            "required": true
          }
        ]
      },
      "get": {
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientId",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth2.client"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/client/get",
            "required": true
          }
        ],
        "x-response-identifier": "clientId"
      },
      "put": {
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clientId",
            "description": "Client ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/oauth2.client"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/client/edit",
            "required": true
          }
        ]
      }
    },
    "/me/api/oauth2/token": {
      "get": {
        "summary": "List oAuth2 tokens",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/token/get",
            "required": true
          }
        ],
        "x-expanded-response": "Oauth2Token"
      }
    },
    "/me/api/oauth2/token/{id}": {
      "delete": {
        "summary": "Delete an oAuth2 token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/token/delete",
            "required": true
          }
        ]
      },
      "get": {
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/oauth2.token"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/api/oauth2/token/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/autorenew": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.NicAutorenewInfos"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/autorenew/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Activate auto renew for this nic",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "renewDay": {
                    "type": "integer",
                    "description": "Day of autorenew"
                  }
                },
                "required": [
                  "renewDay"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/autorenew/create",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.NicAutorenewInfos"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/autorenew/edit",
            "required": true
          }
        ]
      }
    },
    "/me/availableAutomaticPaymentMeans": {
      "get": {
        "summary": "List available payment methods in this Nic's country",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.AutomaticPaymentMean"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/availableAutomaticPaymentMeans/get",
            "required": true
          }
        ]
      }
    },
    "/me/bill": {
      "get": {
        "summary": "List of all the bills the logged account has",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "category",
            "description": "Filter the value of category property (=)",
            "schema": {
              "$ref": "#/components/schemas/billing.CategoryEnum"
            }
          },
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "orderId",
            "description": "Filter the value of orderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingBill"
      }
    },
    "/me/bill/export": {
      "post": {
        "summary": "Exports a bundle of invoices",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "archiveType": {
                    "description": "The file type of the archive",
                    "$ref": "#/components/schemas/billing.ArchiveTypeEnum"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "End interval of the export",
                    "format": "date-time"
                  },
                  "ids": {
                    "type": "array",
                    "description": "A list of ids to export",
                    "items": {
                      "type": "string"
                    }
                  },
                  "startDate": {
                    "type": "string",
                    "description": "Start interval of the export",
                    "format": "date-time"
                  }
                },
                "required": [
                  "archiveType"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/export",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Bill"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/get",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}/debt": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Debt"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/debt/get",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}/debt/operation": {
      "get": {
        "summary": "All operations related to these debts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "depositOrderId",
            "description": "Filter the value of depositOrderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/debt/operation/get",
            "required": true
          }
        ],
        "x-expanded-response": "DebtOperation"
      }
    },
    "/me/bill/{billId}/debt/operation/{operationId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Operation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/debt/operation/get",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}/debt/operation/{operationId}/associatedObject": {
      "get": {
        "summary": "Return main data about the object related to this debt operation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.entry.AssociatedObject"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/debt/operation/associatedObject/get",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}/debt/pay": {
      "post": {
        "summary": "Create an order in order to pay this order's debt",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/debt/pay",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}/details": {
      "get": {
        "summary": "Give access to all entries of the bill",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingBillDetail"
      }
    },
    "/me/bill/{billId}/details/{billDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.BillDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/bill/{billId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bill/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/billing/capacities": {
      "get": {
        "summary": "Customer billing capacities",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.BillingCapacities"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/capacities/get",
            "required": true
          }
        ]
      }
    },
    "/me/billing/group": {
      "get": {
        "summary": "Retrieve all billing groups",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Filter by name",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "serviceId",
            "description": "Filter by Service ID",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeBillingGroupBillingGroup"
      },
      "post": {
        "summary": "Create a new billing group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.billing.group.BillingGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.group.BillingGroup"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/create",
            "required": true
          }
        ]
      }
    },
    "/me/billing/group/{groupId}": {
      "delete": {
        "summary": "Delete a billing group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve information about a billing group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.group.BillingGroup"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/get",
            "required": true
          }
        ],
        "x-response-identifier": "groupId"
      },
      "put": {
        "summary": "Edit billing group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.billing.group.BillingGroup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/edit",
            "required": true
          }
        ]
      }
    },
    "/me/billing/group/{groupId}/service": {
      "get": {
        "summary": "Retrieve billing group service ID list",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/service/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeBillingGroupService"
      },
      "post": {
        "summary": "Associate a service to a billing group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.billing.group.service.Create"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.group.Service"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/service/create",
            "required": true
          }
        ]
      }
    },
    "/me/billing/group/{groupId}/service/{serviceId}": {
      "delete": {
        "summary": "Unlink a service from a billing group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "serviceId",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/service/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve information about a billing group service",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "groupId",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "serviceId",
            "description": "Service ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.group.Service"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/group/service/get",
            "required": true
          }
        ],
        "x-response-identifier": "serviceId"
      }
    },
    "/me/billing/invoicesByPostalMail": {
      "get": {
        "summary": "Send invoices through postal mail",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/invoicesByPostalMail/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Enable or disable invoices by postal mail",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "enable": {
                    "type": "boolean",
                    "description": "Send invoices through postal mail"
                  }
                },
                "required": [
                  "enable"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/invoicesByPostalMail/create",
            "required": true
          }
        ]
      }
    },
    "/me/billing/purchaseOrder": {
      "get": {
        "summary": "Retrieve all purchase orders",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "billingGroupId",
            "description": "Billing Group Identifier",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/purchaseOrder/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeBillingPurchaseOrderPurchaseOrder"
      },
      "post": {
        "summary": "Create a purchase order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.billing.purchaseOrder.Creation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.purchaseOrder.PurchaseOrder"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/purchaseOrder/create",
            "required": true
          }
        ]
      }
    },
    "/me/billing/purchaseOrder/{id}": {
      "delete": {
        "summary": "Delete a purchase order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/purchaseOrder/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve information about a purchase order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.purchaseOrder.PurchaseOrder"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/purchaseOrder/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      },
      "put": {
        "summary": "Update a purchase order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.billing.purchaseOrder.Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/purchaseOrder/edit",
            "required": true
          }
        ]
      }
    },
    "/me/billing/report/consumption": {
      "get": {
        "summary": "Retrieve all billing reports of consumption",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/report/consumption/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeBillingReportConsumption"
      },
      "post": {
        "summary": "Generate consumption billing report for a period",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.billing.report.consumption.CreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.report.consumption.CreationResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/report/consumption/post",
            "required": true
          }
        ]
      }
    },
    "/me/billing/report/consumption/{taskId}": {
      "get": {
        "summary": "Retrieve a consumption billing report with task id",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskId",
            "description": "Task ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.report.Consumption"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/report/consumption/get",
            "required": true
          }
        ],
        "x-response-identifier": "taskId"
      }
    },
    "/me/billing/task": {
      "get": {
        "summary": "List of tasks",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Filter tasks by name",
            "schema": {
              "$ref": "#/components/schemas/me.billing.tasks.TaskNameEnum"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter tasks by status",
            "schema": {
              "$ref": "#/components/schemas/me.billing.tasks.TaskStatusEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/task/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeBillingTasksTask"
      }
    },
    "/me/billing/task/{id}": {
      "get": {
        "summary": "Get details about a task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.billing.tasks.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/billing/task/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/bringYourOwnIp/token": {
      "get": {
        "summary": "Get your Bring your own IP token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "campus",
            "description": "Campus where you plan to bring your own IP range in. See /ip/campus to get more details.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ip.CampusEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/bringYourOwnIp/token/get",
            "required": true
          }
        ]
      }
    },
    "/me/carbonCalculator/hasInvoice": {
      "get": {
        "summary": "Find out if the account has data to generate invoice",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "description": "Month of the requested invoice (day is ignored)",
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carbonCalculator.HasInvoiceResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/carbonCalculator/hasInvoice/get",
            "required": true
          }
        ]
      }
    },
    "/me/carbonCalculator/task": {
      "get": {
        "summary": "List all tasks",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/carbonCalculator.Task"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/carbonCalculator/task/get",
            "required": true
          }
        ],
        "x-response-identifier": "taskID",
        "x-expanded-response": "CarbonCalculatorTask"
      },
      "post": {
        "summary": "Create a carbon footprint generation task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/carbonCalculator.CalculationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carbonCalculator.CalculationResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/carbonCalculator/task/create",
            "required": true
          }
        ]
      }
    },
    "/me/carbonCalculator/task/{taskID}": {
      "get": {
        "summary": "Fetch a task by its ID",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "taskID",
            "description": "TaskID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/carbonCalculator.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/carbonCalculator/task/get",
            "required": true
          }
        ],
        "x-response-identifier": "taskID"
      }
    },
    "/me/certificates": {
      "get": {
        "operationId": "getCertificates",
        "summary": "Get all certificates of the account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "description": "Certificate definition name",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Alpha version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/certificates/get",
            "required": true
          }
        ]
      }
    },
    "/me/changeEmail": {
      "post": {
        "summary": "Initiate an email change procedure",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "newEmail": {
                    "type": "string",
                    "description": "New email to associate to your account"
                  }
                },
                "required": [
                  "newEmail"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.emailChange.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/changeEmail",
            "required": true
          }
        ]
      }
    },
    "/me/changePassword": {
      "post": {
        "summary": "Initiate a password change procedure",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/consent": {
      "get": {
        "summary": "List all consent campaign available",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.consent.Campaign"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consent/get",
            "required": true
          }
        ],
        "x-response-identifier": "name",
        "x-expanded-response": "MeConsentCampaign"
      }
    },
    "/me/consent/{campaignName}": {
      "get": {
        "summary": "Retrieve information about a consent campaign",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "campaignName",
            "description": "Campaign name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.consent.Campaign"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consent/get",
            "required": true
          }
        ],
        "x-response-identifier": "name"
      }
    },
    "/me/consent/{campaignName}/decision": {
      "get": {
        "summary": "Get decision value for a consent campaign",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "campaignName",
            "description": "Campaign name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.consent.Consent"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consent/decision/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update decision of a consent campaign",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "campaignName",
            "description": "Campaign name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.consent.Decision"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consent/decision/edit",
            "required": true
          }
        ]
      }
    },
    "/me/consumption/usage/current": {
      "get": {
        "summary": "Get on-going consumptions for all services",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.consumption.Transaction"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consumption/usage/current/get",
            "required": true
          }
        ]
      }
    },
    "/me/consumption/usage/forecast": {
      "get": {
        "summary": "Get forecasted consumptions for all services",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.consumption.Transaction"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consumption/usage/forecast/get",
            "required": true
          }
        ]
      }
    },
    "/me/consumption/usage/history": {
      "get": {
        "summary": "Get list of transactions between two dates",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "beginDate",
            "description": "Begin date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "endDate",
            "description": "End date",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.consumption.Transaction"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/consumption/usage/history/get",
            "required": true
          }
        ]
      }
    },
    "/me/contact": {
      "get": {
        "summary": "Retrieve every contact your created",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/contact/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeContactContact"
      },
      "post": {
        "summary": "Create a new contact",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.contact.Contact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.contact.Contact"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/contact/create",
            "required": true
          }
        ]
      }
    },
    "/me/contact/{contactId}": {
      "get": {
        "summary": "Retrieve information about a contact",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "Contact ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.contact.Contact"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/contact/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      },
      "put": {
        "summary": "Update an existing contact",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "Contact ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.contact.Contact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.contact.Contact"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/contact/edit",
            "required": true
          }
        ]
      }
    },
    "/me/contact/{contactId}/fields": {
      "get": {
        "summary": "Get mandatory/read-only information about the fields of a contact",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contactId",
            "description": "Contact ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.contact.FieldInformation"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/contact/fields/get",
            "required": true
          }
        ]
      }
    },
    "/me/credit/balance": {
      "get": {
        "summary": "Retrieve all credit balances",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "description": "Filter by balance type",
            "schema": {
              "$ref": "#/components/schemas/me.credit.balance.TypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/credit/balance/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeCreditBalance"
      }
    },
    "/me/credit/balance/{balanceName}": {
      "get": {
        "summary": "Retrieve a credit balance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "balanceName",
            "description": "Balance name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.credit.Balance"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/credit/balance/get",
            "required": true
          }
        ],
        "x-response-identifier": "balanceName"
      }
    },
    "/me/credit/balance/{balanceName}/movement": {
      "get": {
        "summary": "Retrieve movements for a specific balance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "balanceName",
            "description": "Balance name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/credit/balance/movement/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeCreditBalanceMovement"
      }
    },
    "/me/credit/balance/{balanceName}/movement/{movementId}": {
      "get": {
        "summary": "Retrieve a specific movement for a credit balance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "balanceName",
            "description": "Balance name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "movementId",
            "description": "Movement ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.credit.balance.Movement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/credit/balance/movement/get",
            "required": true
          }
        ],
        "x-response-identifier": "movementId"
      }
    },
    "/me/credit/code": {
      "post": {
        "summary": "Validate a code to generate associated credit movement",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.credit.code.Redeem"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.credit.balance.Movement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/credit/code/validate",
            "required": true
          }
        ]
      }
    },
    "/me/debtAccount": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Balance"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/get",
            "required": true
          }
        ]
      }
    },
    "/me/debtAccount/debt": {
      "get": {
        "summary": "All debts related to your account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/debt/get",
            "required": true
          }
        ],
        "x-expanded-response": "DebtDebt"
      }
    },
    "/me/debtAccount/debt/{debtId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "debtId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Debt"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/debt/get",
            "required": true
          }
        ]
      }
    },
    "/me/debtAccount/debt/{debtId}/operation": {
      "get": {
        "summary": "All operations related to these debts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "debtId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "depositOrderId",
            "description": "Filter the value of depositOrderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/debt/operation/get",
            "required": true
          }
        ],
        "x-expanded-response": "DebtOperation"
      }
    },
    "/me/debtAccount/debt/{debtId}/operation/{operationId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "debtId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Operation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/debt/operation/get",
            "required": true
          }
        ]
      }
    },
    "/me/debtAccount/debt/{debtId}/operation/{operationId}/associatedObject": {
      "get": {
        "summary": "Return main data about the object related to this debt operation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "debtId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.entry.AssociatedObject"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/debt/operation/associatedObject/get",
            "required": true
          }
        ]
      }
    },
    "/me/debtAccount/debt/{debtId}/pay": {
      "post": {
        "summary": "Create an order in order to pay this order's debt",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "debtId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/debt/pay",
            "required": true
          }
        ]
      }
    },
    "/me/debtAccount/pay": {
      "post": {
        "summary": "Create an order in order to pay all your due debts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/debtAccount/pay",
            "required": true
          }
        ]
      }
    },
    "/me/deposit": {
      "get": {
        "summary": "List of all the deposits made to your prepaid account or debt account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "orderId",
            "description": "Filter the value of orderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingDeposit"
      }
    },
    "/me/deposit/{depositId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Deposit"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/details": {
      "get": {
        "summary": "Give access to all entries of this deposit",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingDepositDetail"
      }
    },
    "/me/deposit/{depositId}/details/{depositDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "depositDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.DepositDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills": {
      "get": {
        "summary": "Get invoices paid by this deposit",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingBill"
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Bill"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/debt": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Debt"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/debt/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/debt/operation": {
      "get": {
        "summary": "All operations related to these debts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "depositOrderId",
            "description": "Filter the value of depositOrderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/debt/operation/get",
            "required": true
          }
        ],
        "x-expanded-response": "DebtOperation"
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Operation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/debt/operation/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/debt/operation/{operationId}/associatedObject": {
      "get": {
        "summary": "Return main data about the object related to this debt operation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.entry.AssociatedObject"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/debt/operation/associatedObject/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/debt/pay": {
      "post": {
        "summary": "Create an order in order to pay this order's debt",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/debt/pay",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/details": {
      "get": {
        "summary": "Give access to all entries of the bill",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingBillDetail"
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/details/{billDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.BillDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/paidBills/{billId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "billId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/paidBills/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/deposit/{depositId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "depositId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/deposit/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/document": {
      "get": {
        "summary": "List of documents added in your account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/document/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleDocumentDocument"
      },
      "post": {
        "summary": "Create new document",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "File name"
                  },
                  "tags": {
                    "type": "array",
                    "description": "File tags",
                    "items": {
                      "$ref": "#/components/schemas/complexType.SafeKeyValue_string"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.document.Document"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/document/create",
            "required": true
          }
        ]
      }
    },
    "/me/document/cors": {
      "post": {
        "summary": "Add CORS support on your container",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "origin": {
                    "type": "string",
                    "description": "Allow this origin"
                  }
                },
                "required": [
                  "origin"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/document/cors/create",
            "required": true
          }
        ]
      }
    },
    "/me/document/{id}": {
      "delete": {
        "summary": "Delete a document",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Document id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/document/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Document id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.document.Document"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/document/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Document id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.document.Document"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/document/edit",
            "required": true
          }
        ]
      }
    },
    "/me/fax/customDomains": {
      "get": {
        "summary": "Get the fax custom domains linked to the customer account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fax/customDomains/get",
            "required": true
          }
        ],
        "x-expanded-response": "TelephonyMailDomain2Service"
      },
      "post": {
        "summary": "Create a custom domain for your fax services",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "The custom domain of your fax services"
                  }
                },
                "required": [
                  "domain"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telephony.MailDomain2Service"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fax/customDomains/create",
            "required": true
          }
        ]
      }
    },
    "/me/fax/customDomains/{id}": {
      "delete": {
        "summary": "Delete a custom domain of your fax services",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fax/customDomains/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telephony.MailDomain2Service"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fax/customDomains/get",
            "required": true
          }
        ]
      }
    },
    "/me/feedback": {
      "post": {
        "summary": "Post customer feedback on V6 Manager",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "body": {
                    "type": "string",
                    "description": "Your feedback text"
                  },
                  "subject": {
                    "type": "string",
                    "description": "Subject of your request"
                  }
                },
                "required": [
                  "body",
                  "subject"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/feedback/create",
            "required": true
          }
        ]
      }
    },
    "/me/fidelityAccount": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.FidelityAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fidelityAccount/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing.FidelityAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fidelityAccount/edit",
            "required": true
          }
        ]
      }
    },
    "/me/fidelityAccount/creditOrder": {
      "post": {
        "summary": "Generate an order that can be paid in order to credit the fidelity account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount of points you want to credit your fidelity account of"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fidelityAccount/creditOrder",
            "required": true
          }
        ]
      }
    },
    "/me/fidelityAccount/movements": {
      "get": {
        "summary": "List of entries of the fidelity account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fidelityAccount/movements/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingFidelityMovement"
      }
    },
    "/me/fidelityAccount/movements/{movementId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "movementId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.FidelityMovement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/fidelityAccount/movements/get",
            "required": true
          }
        ]
      }
    },
    "/me/geolocation": {
      "post": {
        "summary": "Fetch visitor country & region",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.geolocation.ContinentCountryLocation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/identity/group": {
      "get": {
        "summary": "Retrieve all IAM groups of this account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/group/get",
            "required": true
          }
        ],
        "x-expanded-response": "AuthGroup"
      },
      "post": {
        "summary": "Create a new IAM group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.GroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Group"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/group/create",
            "required": true
          }
        ]
      }
    },
    "/me/identity/group/{group}": {
      "delete": {
        "summary": "Delete an IAM group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group",
            "description": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/group/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get an IAM group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group",
            "description": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Group"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/group/get",
            "required": true
          }
        ],
        "x-response-identifier": "name"
      },
      "put": {
        "summary": "Alter an IAM group",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "group",
            "description": "Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.Group"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/group/edit",
            "required": true
          }
        ]
      }
    },
    "/me/identity/provider": {
      "delete": {
        "summary": "Remove the identity provider",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/provider/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get the identity provider linked to this account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Provider"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/provider/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Define an identity provider (SAML 2.0)",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.ProviderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.Provider"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/provider/create",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter the provider",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.Provider"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/provider/edit",
            "required": true
          }
        ]
      }
    },
    "/me/identity/user": {
      "get": {
        "summary": "Retrieve all IAM users of this account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/get",
            "required": true
          }
        ],
        "x-expanded-response": "AuthUser"
      },
      "post": {
        "summary": "Create a new IAM user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.UserRequest"
              },
              "examples": {
                "regular user": {
                  "value": {
                    "description": "My 1st user",
                    "email": "user@mycompany.example",
                    "group": "DEFAULT",
                    "login": "my_user",
                    "password": "ItsASecret",
                    "type": "USER"
                  },
                  "summary": "Create a new IAM user"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/create",
            "required": true
          }
        ]
      }
    },
    "/me/identity/user/{user}": {
      "delete": {
        "summary": "Delete an IAM user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get an IAM user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.User"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/get",
            "required": true
          }
        ],
        "x-response-identifier": "login"
      },
      "put": {
        "summary": "Alter an IAM user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.User"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/edit",
            "required": true
          }
        ]
      }
    },
    "/me/identity/user/{user}/disable": {
      "post": {
        "summary": "Disable this user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/disable",
            "required": true
          }
        ]
      }
    },
    "/me/identity/user/{user}/enable": {
      "post": {
        "summary": "Enable this user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/enable",
            "required": true
          }
        ]
      }
    },
    "/me/identity/user/{user}/token": {
      "get": {
        "summary": "Retrieve all personal access tokens from this user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/token/get",
            "required": true
          }
        ],
        "x-expanded-response": "AuthPersonalAccessToken"
      },
      "post": {
        "summary": "Create a new personal access token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.PersonalAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.PersonalAccessTokenResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/token/create",
            "required": true
          }
        ]
      }
    },
    "/me/identity/user/{user}/token/{name}": {
      "delete": {
        "summary": "Delete a personal access token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/token/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get a personal access token's information",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.PersonalAccessToken"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/token/get",
            "required": true
          }
        ],
        "x-response-identifier": "name"
      },
      "put": {
        "summary": "Alter a user personal acces token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "user",
            "description": "User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/auth.PersonalAccessTokenModifyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/auth.PersonalAccessToken"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/identity/user/token/edit",
            "required": true
          }
        ]
      }
    },
    "/me/incident/sbg/migrateServices": {
      "get": {
        "summary": "Get all services you can migrate",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.incident.ServiceMigration"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Alpha version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/incident/sbg/migrateServices/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Ask for impacted services migration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.incident.MigrateServices"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.incident.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Alpha version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/incident/sbg/migrateServices/create",
            "required": true
          }
        ]
      }
    },
    "/me/insight": {
      "get": {
        "summary": "Get your insight access token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.insight.Access"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/insight/get",
            "required": true
          }
        ]
      }
    },
    "/me/installationTemplate": {
      "get": {
        "summary": "Your customized operating system installation templates",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/get",
            "required": true
          }
        ],
        "x-expanded-response": "DedicatedInstallationTemplateTemplates"
      }
    },
    "/me/installationTemplate/{templateName}": {
      "delete": {
        "summary": "Remove this template",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dedicated.installationTemplate.Templates"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/get",
            "required": true
          }
        ]
      }
    },
    "/me/installationTemplate/{templateName}/partitionScheme": {
      "get": {
        "summary": "Partitioning schemes available on this template",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/get",
            "required": true
          }
        ],
        "x-expanded-response": "DedicatedInstallationTemplateTemplatePartitioningSchemes"
      }
    },
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}": {
      "delete": {
        "summary": "Remove this scheme of partition",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dedicated.installationTemplate.templatePartitioningSchemes"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/get",
            "required": true
          }
        ]
      }
    },
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid": {
      "get": {
        "summary": "Hardware RAIDs defined in this partitioning scheme",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/hardwareRaid/get",
            "required": true
          }
        ],
        "x-expanded-response": "DedicatedInstallationTemplateHardwareRaid"
      }
    },
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/hardwareRaid/{name}": {
      "delete": {
        "summary": "Remove this RAID",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Hardware RAID name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/hardwareRaid/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Hardware RAID name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dedicated.installationTemplate.hardwareRaid"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/hardwareRaid/get",
            "required": true
          }
        ]
      }
    },
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition": {
      "get": {
        "summary": "Partitions defined in this partitioning scheme",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/partition/get",
            "required": true
          }
        ],
        "x-expanded-response": "DedicatedInstallationTemplateTemplatePartitions"
      }
    },
    "/me/installationTemplate/{templateName}/partitionScheme/{schemeName}/partition/{mountpoint}": {
      "delete": {
        "summary": "Remove this partition",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "mountpoint",
            "description": "Partition mount point",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/partition/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "deprecated": true,
        "x-deprecation-date": "2025-04-28T00:00:00Z",
        "x-deletion-date": "2025-10-07T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "mountpoint",
            "description": "Partition mount point",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "schemeName",
            "description": "This partitioning scheme name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "templateName",
            "description": "This template name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dedicated.installationTemplate.templatePartitions"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/installationTemplate/partitionScheme/partition/get",
            "required": true
          }
        ]
      }
    },
    "/me/ipOrganisation": {
      "get": {
        "summary": "List of organisations",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ipOrganisation/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleIpv4Org"
      },
      "post": {
        "summary": "Add an organisation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "abuse_mailbox": {
                    "type": "string"
                  },
                  "address": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "$ref": "#/components/schemas/nichandle.CountryEnum"
                  },
                  "firstname": {
                    "type": "string"
                  },
                  "lastname": {
                    "type": "string"
                  },
                  "phone": {
                    "$ref": "#/components/schemas/phoneNumber"
                  },
                  "registry": {
                    "$ref": "#/components/schemas/nichandle.IpRegistryEnum"
                  },
                  "state": {
                    "type": "string"
                  },
                  "zip": {
                    "type": "string"
                  }
                },
                "required": [
                  "abuse_mailbox",
                  "address",
                  "city",
                  "country",
                  "firstname",
                  "lastname",
                  "phone",
                  "registry"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ipOrganisation/create",
            "required": true
          }
        ]
      }
    },
    "/me/ipOrganisation/{organisationId}": {
      "delete": {
        "summary": "Delete this organisation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organisationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ipOrganisation/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organisationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.Ipv4Org"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ipOrganisation/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organisationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.Ipv4Org"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ipOrganisation/edit",
            "required": true
          }
        ]
      }
    },
    "/me/logs/audit": {
      "get": {
        "summary": "Get your audit logs",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/audit.Log"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/get",
            "required": true
          }
        ]
      }
    },
    "/me/logs/audit/log/kind": {
      "get": {
        "summary": "List available log kinds",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/kind/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsLogKind"
      }
    },
    "/me/logs/audit/log/kind/{name}": {
      "get": {
        "summary": "Get a log kind",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "description": "Name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogKind"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/kind/get",
            "required": true
          }
        ],
        "x-response-identifier": "name"
      }
    },
    "/me/logs/audit/log/subscription": {
      "get": {
        "summary": "List subscription IDs for a cluster",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "kind",
            "description": "Filter on a specific kind (e.g., audit)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/subscription/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsLogSubscription"
      },
      "post": {
        "summary": "Create a subscription from logs to a pre-existing LDP stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/subscription/create",
            "required": true
          },
          {
            "name": "ldp:apiovh:output/graylog/stream/forwardTo",
            "description": "Required on the targeted LDP service",
            "required": true
          }
        ]
      }
    },
    "/me/logs/audit/log/subscription/{subscriptionId}": {
      "delete": {
        "summary": "Delete a subscription",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResponse"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/subscription/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get subscription details",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscription"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/subscription/get",
            "required": true
          }
        ],
        "x-response-identifier": "subscriptionId"
      }
    },
    "/me/logs/audit/log/url": {
      "post": {
        "summary": "Generate a temporary URL to retrieve logs",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.LogUrlCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.TemporaryLogsLink"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/logs/audit/log/url/create",
            "required": true
          }
        ]
      }
    },
    "/me/mailingList/availableLists": {
      "get": {
        "summary": "List of mailing list you can subscribe",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/mailingList/availableLists/get",
            "required": true
          }
        ]
      }
    },
    "/me/mailingList/subscribe": {
      "post": {
        "summary": "Subscribe an email to a restricted mailing list",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "Email you want to subscribe to"
                  },
                  "mailingList": {
                    "type": "string",
                    "description": "Mailing list"
                  }
                },
                "required": [
                  "email",
                  "mailingList"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/mailingList/subscribe",
            "required": true
          }
        ]
      }
    },
    "/me/manualDomainPayment": {
      "get": {
        "summary": "For domain reseller, get current status of your manual payment mode migration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.ManualDomainPaymentStatus"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/manualDomainPayment/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "For domain reseller, request migration of all your domain name services to a manual payment mode,",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/manualDomainPayment/create",
            "required": true
          }
        ]
      }
    },
    "/me/marketing": {
      "get": {
        "summary": "Retrieve user marketing consent details",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.marketing.Consent"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/marketing/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update user marketing consent",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.marketing.Consent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.marketing.Consent"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/marketing/edit",
            "required": true
          }
        ]
      }
    },
    "/me/migration": {
      "get": {
        "summary": "Retrieve all country migrations",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/migration/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeMigration"
      }
    },
    "/me/migration/{migrationId}": {
      "get": {
        "summary": "Retrieve information about a country migration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "migrationId",
            "description": "Migration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.Migration"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/migration/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/migration/{migrationId}/contract": {
      "get": {
        "summary": "Retrieve all contracts for a billing country migration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "migrationId",
            "description": "Migration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/migration/contract/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeMigrationContract"
      }
    },
    "/me/migration/{migrationId}/contract/{contractId}": {
      "get": {
        "summary": "Retrieve detail about a contract for a billing country migration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contractId",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "migrationId",
            "description": "Migration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.migration.Contract"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/migration/contract/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/migration/{migrationId}/contract/{contractId}/accept": {
      "post": {
        "summary": "Accept contract",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contractId",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "migrationId",
            "description": "Migration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.agreements.ContractAgreement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/migration/contract/accept",
            "required": true
          }
        ]
      }
    },
    "/me/migration/{migrationId}/contract/{contractId}/agreement": {
      "get": {
        "summary": "Retrieve agreement for this contract",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "contractId",
            "description": "Contract ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "migrationId",
            "description": "Migration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.agreements.ContractAgreement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/migration/contract/agreement/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/notification/email/history": {
      "get": {
        "summary": "Retrieve every email sent to you",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/notification/email/history/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleEmailNotification"
      }
    },
    "/me/notification/email/history/{id}": {
      "get": {
        "summary": "Retrieve information about an email",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.EmailNotification"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/notification/email/history/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/order": {
      "get": {
        "summary": "List of all the orders the logged account has",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingOrder"
      }
    },
    "/me/order/{orderId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/associatedObject": {
      "get": {
        "summary": "Return main data about the object the processing of the order generated",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.order.AssociatedObject"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/associatedObject/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/availablePaymentMean": {
      "get": {
        "summary": "Return available payment mean",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/billing.order.AvailablePaymentMean"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/availablePaymentMean/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/availableRegisteredPaymentMean": {
      "get": {
        "summary": "List of registered payment mean you can use to pay this order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/billing.order.RegisteredPaymentMean"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/availableRegisteredPaymentMean/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/balance": {
      "get": {
        "summary": "List credit balances applied on this Order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/balance/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingCreditBalance"
      },
      "post": {
        "summary": "Use a credit balance on this Order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "balanceName": {
                    "type": "string",
                    "description": "Balance name to use on this Order"
                  }
                },
                "required": [
                  "balanceName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.CreditBalance"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/balance/create",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/balance/{balanceName}": {
      "delete": {
        "summary": "Remove a credit balance from this Order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "balanceName",
            "description": "Credit balance name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/balance/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "balanceName",
            "description": "Credit balance name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.CreditBalance"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/balance/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/consumption/details": {
      "get": {
        "summary": "Retrieve order's detailed consumption information as a file",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fileFormat",
            "description": "Format of the file",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/consumption.ConsumptionExportFormatsEnum"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.order.ConsumptionDetails"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/consumption/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/debt": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Debt"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/debt/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/debt/operation": {
      "get": {
        "summary": "All operations related to these debts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "depositOrderId",
            "description": "Filter the value of depositOrderId property (=)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/debt/operation/get",
            "required": true
          }
        ],
        "x-expanded-response": "DebtOperation"
      }
    },
    "/me/order/{orderId}/debt/operation/{operationId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.Operation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/debt/operation/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/debt/operation/{operationId}/associatedObject": {
      "get": {
        "summary": "Return main data about the object related to this debt operation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "operationId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/debt.entry.AssociatedObject"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/debt/operation/associatedObject/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/debt/pay": {
      "post": {
        "summary": "Create an order in order to pay this order's debt",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/debt/pay",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/details": {
      "get": {
        "summary": "Give access to all entries of the order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingOrderDetail"
      }
    },
    "/me/order/{orderId}/details/{orderDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderDetailId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.OrderDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/details/{orderDetailId}/extension": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderDetailId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.ItemDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/details/extension/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/followUp": {
      "get": {
        "summary": "Return tracking of the order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/billing.order.FollowUp"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/followUp/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/pay": {
      "post": {
        "summary": "Pay with a payment method reference",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paymentMethod": {
                    "description": "Payment method informations for pay",
                    "$ref": "#/components/schemas/billing.order.PayWithPaymentMethod"
                  }
                },
                "required": [
                  "paymentMethod"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/pay",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/payWithRegisteredPaymentMean": {
      "post": {
        "summary": "Pay with an already registered payment mean",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paymentMean": {
                    "description": "The registered payment mean you want to use",
                    "$ref": "#/components/schemas/billing.ReusablePaymentMeanEnum"
                  },
                  "paymentMeanId": {
                    "type": "integer",
                    "description": "Id of registered payment mean, mandatory for bankAccount, creditCard and paypal"
                  }
                },
                "required": [
                  "paymentMean"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/payWithRegisteredPaymentMean",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/paymentMeans": {
      "get": {
        "summary": "Return main data about the object the processing of the order generated",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.order.PaymentMeans"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/paymentMeans/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/paymentMethods": {
      "get": {
        "summary": "List of registered payment method you can use to pay this order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.order.PaymentMethods"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/paymentMethods/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/retraction": {
      "post": {
        "summary": "Request retraction of order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "comment": {
                    "type": "string",
                    "description": "An optional comment of why you want to retract"
                  },
                  "reason": {
                    "description": "The reason why you want to retract",
                    "$ref": "#/components/schemas/billing.order.RetractionReasonEnum"
                  }
                },
                "required": [
                  "reason"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/retraction/create",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/status": {
      "get": {
        "summary": "Return status of order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.order.OrderStatusEnum"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/status/get",
            "required": true
          }
        ]
      }
    },
    "/me/order/{orderId}/waiveRetraction": {
      "post": {
        "summary": "Waive retraction period of order",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/order/waiveRetraction",
            "required": true
          }
        ]
      }
    },
    "/me/ovhAccount": {
      "get": {
        "summary": "List of OVH accounts the logged account has",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingOvhAccount"
      }
    },
    "/me/ovhAccount/{ovhAccountId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.OvhAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing.OvhAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/edit",
            "required": true
          }
        ]
      }
    },
    "/me/ovhAccount/{ovhAccountId}/creditOrder": {
      "post": {
        "summary": "Generate an order that can be paid in order to credit the OVH account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount in cents you want to credit your account of"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/creditOrder/create",
            "required": true
          }
        ]
      }
    },
    "/me/ovhAccount/{ovhAccountId}/movements": {
      "get": {
        "summary": "Details about an entry of the OVH account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/movements/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingMovement"
      }
    },
    "/me/ovhAccount/{ovhAccountId}/movements/{movementId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "movementId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Movement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/movements/get",
            "required": true
          }
        ]
      }
    },
    "/me/ovhAccount/{ovhAccountId}/movements/{movementId}/requestRefund": {
      "post": {
        "summary": "request a refund of this credit note to your original payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "movementId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount in cents you want to retrieve"
                  }
                },
                "required": [
                  "amount"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/movements/requestRefund",
            "required": true
          }
        ]
      }
    },
    "/me/ovhAccount/{ovhAccountId}/retrieveMoney": {
      "post": {
        "summary": "Transfer money from ovhAccount to your bank account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ovhAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "integer",
                    "description": "The amount in cents you want to transfer"
                  },
                  "bankAccountId": {
                    "type": "integer",
                    "description": "A valid bank account"
                  }
                },
                "required": [
                  "amount",
                  "bankAccountId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Order"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/ovhAccount/retrieveMoney",
            "required": true
          }
        ]
      }
    },
    "/me/partnerLevel": {
      "get": {
        "summary": "Fetch the partner level of the account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.partnerLevel.Level"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/partnerLevel/get",
            "required": true
          }
        ]
      }
    },
    "/me/passwordRecover": {
      "post": {
        "summary": "Request a password recover",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ovhCompany": {
                    "description": "Company of your OVH Account Id",
                    "$ref": "#/components/schemas/nichandle.OvhCompanyEnum"
                  },
                  "ovhId": {
                    "type": "string",
                    "description": "Your OVH Account Id"
                  }
                },
                "required": [
                  "ovhCompany",
                  "ovhId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ]
      }
    },
    "/me/payment/availableMethods": {
      "get": {
        "summary": "Retrieve available payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.payment.AvailablePaymentMethod"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/availableMethods/get",
            "required": true
          }
        ]
      }
    },
    "/me/payment/method": {
      "get": {
        "summary": "Retrieve payment method list",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "default",
            "description": "Filter on 'default' property",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "paymentType",
            "description": "Filter on 'paymentType' property",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter on 'status' property",
            "schema": {
              "$ref": "#/components/schemas/me.payment.method.StatusEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/get",
            "required": true
          }
        ],
        "x-expanded-response": "MePaymentPaymentMethod"
      },
      "post": {
        "summary": "Register a new payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.payment.method.Creation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.method.Validation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/create",
            "required": true
          }
        ]
      }
    },
    "/me/payment/method/{paymentMethodId}": {
      "delete": {
        "summary": "Delete a payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.PaymentMethod"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve a payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.PaymentMethod"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/get",
            "required": true
          }
        ],
        "x-response-identifier": "paymentMethodId"
      },
      "put": {
        "summary": "Edit payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.payment.PaymentMethod"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.PaymentMethod"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/edit",
            "required": true
          }
        ]
      }
    },
    "/me/payment/method/{paymentMethodId}/challenge": {
      "post": {
        "summary": "Challenge your payment method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.payment.method.Challenge"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/challenge",
            "required": true
          }
        ]
      }
    },
    "/me/payment/method/{paymentMethodId}/details": {
      "post": {
        "summary": "Add details to your payment method challenge",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.payment.method.Details"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.method.Validation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/details/create",
            "required": true
          }
        ]
      }
    },
    "/me/payment/method/{paymentMethodId}/finalize": {
      "post": {
        "summary": "Finalize a payment method registration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.payment.method.Finalize"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.PaymentMethod"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/method/finalize",
            "required": true
          }
        ]
      }
    },
    "/me/payment/transaction": {
      "get": {
        "summary": "Retrieve payment transaction list",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "paymentMethodId",
            "description": "Payment method ID",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Status",
            "schema": {
              "$ref": "#/components/schemas/me.payment.transaction.StatusEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/transaction/get",
            "required": true
          }
        ],
        "x-expanded-response": "MePaymentTransaction"
      }
    },
    "/me/payment/transaction/{transactionId}": {
      "get": {
        "summary": "Retrieve a transaction",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transactionId",
            "description": "Transaction ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.payment.Transaction"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/payment/transaction/get",
            "required": true
          }
        ],
        "x-response-identifier": "transactionId"
      }
    },
    "/me/paymentMean/bankAccount": {
      "get": {
        "summary": "List of bank accounts",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "Filter on 'status' property",
            "schema": {
              "$ref": "#/components/schemas/me.paymentMean.BankAccountStateEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/get",
            "required": true
          }
        ],
        "x-expanded-response": "MePaymentMeanBankAccount"
      },
      "post": {
        "summary": "Add a new payment mean bank account",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.BankAccountCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.BankAccountValidation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/create",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/bankAccount/{id}": {
      "delete": {
        "summary": "Disable payment through this account",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get bank account properties",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.BankAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      },
      "put": {
        "summary": "Alter this object properties",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.BankAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/edit",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/bankAccount/{id}/challenge": {
      "post": {
        "summary": "Challenge your bank account",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.BankAccountChallengeCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/challenge",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/bankAccount/{id}/chooseAsDefaultPaymentMean": {
      "post": {
        "summary": "Choose this bank account as your default payment mean. Will cancel the previous choice.",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/bankAccount/chooseAsDefaultPaymentMean",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/creditCard": {
      "get": {
        "summary": "List of payment mean credit cards",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/get",
            "required": true
          }
        ],
        "x-expanded-response": "MePaymentMeanCreditCard"
      },
      "post": {
        "summary": "Add a new payment mean credit card",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.CreditCardCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.CreditCardValidation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/create",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/creditCard/{id}": {
      "delete": {
        "summary": "Disable payment through this credit card",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get credit card properties",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.CreditCard"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      },
      "put": {
        "summary": "Alter this object properties",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.CreditCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/edit",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/creditCard/{id}/challenge": {
      "post": {
        "summary": "Challenge your credit card",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.CreditCardChallengeCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/challenge",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/creditCard/{id}/chooseAsDefaultPaymentMean": {
      "post": {
        "summary": "Choose this credit card as your default payment mean. Will cancel the previous choice.",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/creditCard/chooseAsDefaultPaymentMean",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/deferredPaymentAccount": {
      "get": {
        "summary": "List of payment mean deferred accounts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/deferredPaymentAccount/get",
            "required": true
          }
        ],
        "x-expanded-response": "MePaymentMeanDeferred"
      }
    },
    "/me/paymentMean/deferredPaymentAccount/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.Deferred"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/deferredPaymentAccount/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.Deferred"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/deferredPaymentAccount/edit",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/deferredPaymentAccount/{id}/chooseAsDefaultPaymentMean": {
      "post": {
        "summary": "Choose this deferred account as your default payment mean. Will cancel the previous choice.",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/deferredPaymentAccount/chooseAsDefaultPaymentMean",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/paypal": {
      "get": {
        "summary": "List of payment mean paypals",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/get",
            "required": true
          }
        ],
        "x-expanded-response": "MePaymentMeanPaypal"
      },
      "post": {
        "summary": "Add a new payment mean paypal",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.PaypalCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.PaypalValidation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/create",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/paypal/{id}": {
      "delete": {
        "summary": "Disable payment through this paypal",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get paypal properties",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.paymentMean.Paypal"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      },
      "put": {
        "summary": "Alter this object properties",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.Paypal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/edit",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/paypal/{id}/challenge": {
      "post": {
        "summary": "Challenge your paypal",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.paymentMean.PaypalChallengeCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/challenge",
            "required": true
          }
        ]
      }
    },
    "/me/paymentMean/paypal/{id}/chooseAsDefaultPaymentMean": {
      "post": {
        "summary": "Choose this paypal as your default payment mean. Will cancel the previous choice.",
        "deprecated": true,
        "x-deprecation-date": "2023-03-07T00:00:00Z",
        "x-deletion-date": "2023-09-07T00:00:00Z",
        "x-replacement-route": "/me/payment/method",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/paymentMean/paypal/chooseAsDefaultPaymentMean",
            "required": true
          }
        ]
      }
    },
    "/me/preferences/manager": {
      "get": {
        "summary": "Manager preferences",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-expanded-response": "NichandleManagerPreference"
      },
      "post": {
        "summary": "Add a preference",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "This preference key"
                  },
                  "value": {
                    "type": "string",
                    "description": "This preference value"
                  }
                },
                "required": [
                  "key",
                  "value"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ]
      }
    },
    "/me/preferences/manager/{key}": {
      "delete": {
        "summary": "Remove this preference",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "description": "This preference key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "description": "This preference key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.ManagerPreference"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "key",
            "description": "This preference key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.ManagerPreference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ]
      }
    },
    "/me/recommendations": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "max",
            "description": "Maximum number of recommendations to be returned",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "range",
            "description": "Filter recommendations by product range",
            "schema": {
              "$ref": "#/components/schemas/recommendations.productRangesEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recommendations.Recommendations"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Alpha version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/recommendations/get",
            "required": true
          }
        ]
      }
    },
    "/me/refund": {
      "get": {
        "summary": "List of all the refunds the logged account has",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "orderId",
            "description": "Filter the value of orderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/refund/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingRefund"
      }
    },
    "/me/refund/export": {
      "post": {
        "summary": "Exports a bundle of refunds",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "archiveType": {
                    "description": "The file type of the archive",
                    "$ref": "#/components/schemas/billing.ArchiveTypeEnum"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "End interval of the export",
                    "format": "date-time"
                  },
                  "ids": {
                    "type": "array",
                    "description": "A list of ids to export",
                    "items": {
                      "type": "string"
                    }
                  },
                  "startDate": {
                    "type": "string",
                    "description": "Start interval of the export",
                    "format": "date-time"
                  }
                },
                "required": [
                  "archiveType"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/refund/export",
            "required": true
          }
        ]
      }
    },
    "/me/refund/{refundId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "refundId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Refund"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/refund/get",
            "required": true
          }
        ]
      }
    },
    "/me/refund/{refundId}/details": {
      "get": {
        "summary": "Give access to all entries of the refund",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "refundId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/refund/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingRefundDetail"
      }
    },
    "/me/refund/{refundId}/details/{refundDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "refundDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "refundId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.RefundDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/refund/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/refund/{refundId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "refundId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/refund/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/repricing/fall22": {
      "get": {
        "summary": "Get price changes for your VPS and Bare Metal subscriptions",
        "description": "This endpoint will return a list of all of your active VPS and Bare Metal subscriptions (including Server and Eco Range) along with details about the current base price and the estimated price increase, excluding active deals and promotions. To estimate those prices, apply the associated discounts to the new pricing for all of your services.",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.repricing.Service"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-response-identifier": "serviceId"
      }
    },
    "/me/reverseBill": {
      "get": {
        "summary": "List all the bills sent by the current account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "orderId",
            "description": "Filter the value of orderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/reverseBill/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingReverseBill"
      }
    },
    "/me/reverseBill/{reverseBillId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reverseBillId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.ReverseBill"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/reverseBill/get",
            "required": true
          }
        ]
      }
    },
    "/me/reverseBill/{reverseBillId}/details": {
      "get": {
        "summary": "Give access to all entries of this withdrawal",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reverseBillId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/reverseBill/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingReversableBillDetail"
      }
    },
    "/me/reverseBill/{reverseBillId}/details/{reverseBillDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reverseBillDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "reverseBillId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.ReversableBillDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/reverseBill/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/reverseBill/{reverseBillId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reverseBillId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/reverseBill/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/sla": {
      "get": {
        "summary": "List active SLA",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sla/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingSlaOperation"
      }
    },
    "/me/sla/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.SlaOperation"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sla/get",
            "required": true
          }
        ]
      }
    },
    "/me/sla/{id}/apply": {
      "post": {
        "summary": "Ask for SLA application",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sla/apply",
            "required": true
          }
        ]
      }
    },
    "/me/sla/{id}/canBeApplied": {
      "get": {
        "summary": "Check whether this SLA can be applied on your services",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sla/canBeApplied/get",
            "required": true
          }
        ]
      }
    },
    "/me/sla/{id}/services": {
      "get": {
        "summary": "Get services impacted by this SLA",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/billing.SlaOperationService"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sla/services/get",
            "required": true
          }
        ]
      }
    },
    "/me/sla/{id}/status": {
      "get": {
        "summary": "Get the status request of this SLA",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sla/status/get",
            "required": true
          }
        ]
      }
    },
    "/me/sshKey": {
      "get": {
        "summary": "List of your public SSH keys",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sshKey/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleSshKey"
      },
      "post": {
        "summary": "Add a new public SSH key",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "key": {
                    "type": "string",
                    "description": "ASCII encoded public SSH key to add"
                  },
                  "keyName": {
                    "type": "string",
                    "description": "name of the new public SSH key"
                  }
                },
                "required": [
                  "key",
                  "keyName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sshKey/create",
            "required": true
          }
        ]
      }
    },
    "/me/sshKey/{keyName}": {
      "delete": {
        "summary": "Remove this public SSH key",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "keyName",
            "description": "Name of this public SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sshKey/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "keyName",
            "description": "Name of this public SSH key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.sshKey"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/sshKey/get",
            "required": true
          }
        ]
      }
    },
    "/me/subAccount": {
      "get": {
        "summary": "List of sub-accounts",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subAccount/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleSubAccount"
      },
      "post": {
        "summary": "Create a new sub-account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Description of the new sub-account"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subAccount/create",
            "required": true
          }
        ]
      }
    },
    "/me/subAccount/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.SubAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subAccount/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.SubAccount"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subAccount/edit",
            "required": true
          }
        ]
      }
    },
    "/me/subAccount/{id}/createConsumerKey": {
      "post": {
        "summary": "Create a consumer key for the current application",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id of the object",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.SubAccountConsumerKey"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subAccount/createConsumerKey",
            "required": true
          }
        ]
      }
    },
    "/me/subscription": {
      "get": {
        "summary": "List of all OVH things you can subscribe to",
        "deprecated": true,
        "x-deprecation-date": "2023-06-15T00:00:00Z",
        "x-deletion-date": "2023-07-15T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subscription/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleSubscription"
      }
    },
    "/me/subscription/{subscriptionType}": {
      "get": {
        "summary": "Get this object properties",
        "deprecated": true,
        "x-deprecation-date": "2023-06-15T00:00:00Z",
        "x-deletion-date": "2023-07-15T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionType",
            "description": "The type of subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.Subscription"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subscription/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Alter this object properties",
        "deprecated": true,
        "x-deprecation-date": "2023-06-15T00:00:00Z",
        "x-deletion-date": "2023-07-15T00:00:00Z",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "subscriptionType",
            "description": "The type of subscription",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.Subscription"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "red",
            "label": "Deprecated, will be removed"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/subscription/edit",
            "required": true
          }
        ]
      }
    },
    "/me/supportLevel": {
      "get": {
        "summary": "Fetch the support level of the account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.SupportLevel.Level"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/supportLevel/get",
            "required": true
          }
        ]
      }
    },
    "/me/tag": {
      "get": {
        "summary": "Retrieve customer tags list",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/tag/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeTagTag"
      },
      "post": {
        "summary": "Activate customer tag",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/me.tag.Creation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.tag.Tag"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/tag/create",
            "required": true
          }
        ]
      }
    },
    "/me/tag/available": {
      "get": {
        "summary": "Retrieve all available tags",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/me.tag.AvailableTag"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/tag/available/get",
            "required": true
          }
        ]
      }
    },
    "/me/tag/{tag}": {
      "delete": {
        "summary": "Delete a customer tag",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "description": "Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.tag.Tag"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/tag/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Retrieve a customer tag",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "tag",
            "description": "Tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.tag.Tag"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/tag/get",
            "required": true
          }
        ],
        "x-response-identifier": "tag"
      }
    },
    "/me/task/contactChange": {
      "get": {
        "summary": "List of service contact change tasks you are involved in",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "askingAccount",
            "description": "Filter the value of askingAccount property (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "state",
            "description": "Filter the value of state property (like)",
            "schema": {
              "$ref": "#/components/schemas/nichandle.changeContact.TaskStateEnum"
            }
          },
          {
            "in": "query",
            "name": "toAccount",
            "description": "Filter the value of toAccount property (like)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/contactChange/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleContactChangeTask"
      }
    },
    "/me/task/contactChange/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.contactChange.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/contactChange/get",
            "required": true
          }
        ]
      }
    },
    "/me/task/contactChange/{id}/accept": {
      "post": {
        "summary": "Accept this change request",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token you received by email for this request"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/contactChange/accept",
            "required": true
          }
        ]
      }
    },
    "/me/task/contactChange/{id}/refuse": {
      "post": {
        "summary": "Refuse this change request",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token you received by email for this request"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/contactChange/refuse",
            "required": true
          }
        ]
      }
    },
    "/me/task/contactChange/{id}/resendEmail": {
      "post": {
        "summary": "This call will send you a new email, containing a new token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/contactChange/resendEmail",
            "required": true
          }
        ]
      }
    },
    "/me/task/dns": {
      "get": {
        "summary": "List zone tasks",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "function",
            "schema": {
              "$ref": "#/components/schemas/domain.TaskFunctionEnum"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/domain.TaskStatusEnum"
            }
          },
          {
            "in": "query",
            "name": "zone",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/dns/get",
            "required": true
          }
        ],
        "x-expanded-response": "MeDnsTask"
      }
    },
    "/me/task/dns/{id}": {
      "get": {
        "summary": "Get a zone task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/me.dns.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/dns/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/task/dns/{id}/accelerate": {
      "post": {
        "summary": "Accelerate the task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/dns/accelerate",
            "required": true
          }
        ]
      }
    },
    "/me/task/dns/{id}/cancel": {
      "post": {
        "summary": "Cancel the task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/dns/cancel",
            "required": true
          }
        ]
      }
    },
    "/me/task/dns/{id}/relaunch": {
      "post": {
        "summary": "Relaunch the task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/dns/relaunch",
            "required": true
          }
        ]
      }
    },
    "/me/task/domain": {
      "get": {
        "summary": "List of domain tasks",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "domain",
            "description": "Filter the value of domain property (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "function",
            "description": "Filter the value of function property (like)",
            "schema": {
              "$ref": "#/components/schemas/domain.OperationFunctionEnum"
            }
          },
          {
            "in": "query",
            "name": "status",
            "description": "Filter the value of status property (=)",
            "schema": {
              "$ref": "#/components/schemas/domain.OperationStatusEnum"
            }
          },
          {
            "in": "query",
            "name": "type",
            "description": "Filter the value of type property (=)",
            "schema": {
              "$ref": "#/components/schemas/domain.OperationTypeEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/get",
            "required": true
          }
        ],
        "x-expanded-response": "DomainTask"
      }
    },
    "/me/task/domain/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domain.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/get",
            "required": true
          }
        ],
        "x-response-identifier": "id"
      }
    },
    "/me/task/domain/{id}/accelerate": {
      "post": {
        "summary": "Accelerate the task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/accelerate",
            "required": true
          }
        ]
      }
    },
    "/me/task/domain/{id}/argument": {
      "get": {
        "summary": "List of arguments",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/argument/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleDomainTaskArgument"
      }
    },
    "/me/task/domain/{id}/argument/{key}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "key",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.DomainTaskArgument"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/argument/get",
            "required": true
          }
        ],
        "x-response-identifier": "key"
      },
      "put": {
        "summary": "Alter this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "key",
            "description": "Key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/nichandle.DomainTaskArgument"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/argument/edit",
            "required": true
          }
        ]
      }
    },
    "/me/task/domain/{id}/cancel": {
      "post": {
        "summary": "Cancel the task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/cancel",
            "required": true
          }
        ]
      }
    },
    "/me/task/domain/{id}/progressbar": {
      "get": {
        "summary": "Show progress of a task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.DomainTaskProgressBar"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/progressbar/get",
            "required": true
          }
        ]
      }
    },
    "/me/task/domain/{id}/relaunch": {
      "post": {
        "summary": "Relaunch the task",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/domain/relaunch",
            "required": true
          }
        ]
      }
    },
    "/me/task/emailChange": {
      "get": {
        "summary": "List of email change tasks you are involved in",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "state",
            "description": "Filter the value of state property (like)",
            "schema": {
              "$ref": "#/components/schemas/nichandle.changeEmail.TaskStateEnum"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/emailChange/get",
            "required": true
          }
        ],
        "x-expanded-response": "NichandleEmailChangeTask"
      }
    },
    "/me/task/emailChange/{id}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.emailChange.Task"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/emailChange/get",
            "required": true
          }
        ]
      }
    },
    "/me/task/emailChange/{id}/accept": {
      "post": {
        "summary": "Accept this change request",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token you received by email for this request"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/emailChange/accept",
            "required": true
          }
        ]
      }
    },
    "/me/task/emailChange/{id}/refuse": {
      "post": {
        "summary": "Refuse this change request",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "The token you received by email for this request"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/task/emailChange/refuse",
            "required": true
          }
        ]
      }
    },
    "/me/telephony/defaultIpRestriction": {
      "get": {
        "summary": "The default SIP IP restictions for your future VoIP lines",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/telephony/defaultIpRestriction/get",
            "required": true
          }
        ],
        "x-expanded-response": "TelephonyDefaultIpRestriction"
      },
      "post": {
        "summary": "Create a default IP restriction for your future VoIP lines",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "subnet": {
                    "description": "The IPv4 subnet you want to allow",
                    "$ref": "#/components/schemas/ipv4Block"
                  },
                  "type": {
                    "description": "The protocol you want to restrict (sip/mgcp)",
                    "$ref": "#/components/schemas/telephony.ProtocolEnum"
                  }
                },
                "required": [
                  "subnet",
                  "type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telephony.DefaultIpRestriction"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/telephony/defaultIpRestriction/create",
            "required": true
          }
        ]
      }
    },
    "/me/telephony/defaultIpRestriction/{id}": {
      "delete": {
        "summary": "Delete a default IP restriction for your future VoIP lines",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/telephony/defaultIpRestriction/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telephony.DefaultIpRestriction"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/telephony/defaultIpRestriction/get",
            "required": true
          }
        ]
      }
    },
    "/me/telephony/settings": {
      "get": {
        "summary": "Get the telephony settings linked to the customer account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/telephony.Settings"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/telephony/settings/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Change the telephony settings linked to the customer account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "settings": {
                    "description": "Settings to be changed",
                    "$ref": "#/components/schemas/telephony.Settings"
                  }
                },
                "required": [
                  "settings"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/telephony/settings/create",
            "required": true
          }
        ]
      }
    },
    "/me/vipStatus": {
      "get": {
        "summary": "VIP Status of this account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.VipStatus"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/vipStatus/get",
            "required": true
          }
        ]
      }
    },
    "/me/voucher/checkValidity": {
      "post": {
        "summary": "Verify existing voucher",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "voucher": {
                    "type": "string",
                    "description": "Voucher value"
                  }
                },
                "required": [
                  "voucher"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/nichandle.VoucherStatus"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/voucher/checkValidity",
            "required": true
          }
        ]
      }
    },
    "/me/voucherAccount": {
      "get": {
        "summary": "List of voucher accounts the logged account has",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/voucherAccount/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingVoucherAccount"
      }
    },
    "/me/voucherAccount/{voucherAccountId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "voucherAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.VoucherAccount"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/voucherAccount/get",
            "required": true
          }
        ]
      }
    },
    "/me/voucherAccount/{voucherAccountId}/movements": {
      "get": {
        "summary": "Details about an entry of the voucher account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "path",
            "name": "voucherAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/voucherAccount/movements/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingVoucherMovement"
      }
    },
    "/me/voucherAccount/{voucherAccountId}/movements/{movementId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "movementId",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "path",
            "name": "voucherAccountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.VoucherMovement"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/voucherAccount/movements/get",
            "required": true
          }
        ]
      }
    },
    "/me/withdrawal": {
      "get": {
        "summary": "List of all the withdrawals made from your prepaid account",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date.from",
            "description": "Filter the value of date property (>=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "date.to",
            "description": "Filter the value of date property (<=)",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "in": "query",
            "name": "orderId",
            "description": "Filter the value of orderId property (=)",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/withdrawal/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingWithdrawal"
      }
    },
    "/me/withdrawal/{withdrawalId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "withdrawalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Withdrawal"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/withdrawal/get",
            "required": true
          }
        ]
      }
    },
    "/me/withdrawal/{withdrawalId}/details": {
      "get": {
        "summary": "Give access to all entries of this withdrawal",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "withdrawalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/withdrawal/details/get",
            "required": true
          }
        ],
        "x-expanded-response": "BillingWithdrawalDetail"
      }
    },
    "/me/withdrawal/{withdrawalId}/details/{withdrawalDetailId}": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "withdrawalDetailId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "withdrawalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.WithdrawalDetail"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/withdrawal/details/get",
            "required": true
          }
        ]
      }
    },
    "/me/withdrawal/{withdrawalId}/payment": {
      "get": {
        "summary": "Get this object properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "withdrawalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/billing.Payment"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/withdrawal/payment/get",
            "required": true
          }
        ]
      }
    },
    "/me/xdsl/setting": {
      "get": {
        "summary": "Get xdsl settings linked to the nichandle",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/xdsl.Setting"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/xdsl/setting/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Change xdsl settings linked to the nichandle",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "resellerFastModemShipping": {
                    "type": "boolean",
                    "description": "Send the modem as soon as possible, do not wait the xdsl line to be active"
                  },
                  "resellerModemBasicConfig": {
                    "type": "boolean",
                    "description": "Let the modem with vendor configuration. It prevent to apply the config managed by ovh manager"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "account:apiovh:me/xdsl/setting/create",
            "required": true
          }
        ]
      }
    }
  }
}
