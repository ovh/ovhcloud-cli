{
  "openapi": "3.0.0",
  "info": {
    "title": "OVHcloud API specification",
    "description": "Specification for OVHcloud API",
    "version": "1.0",
    "contact": {
      "name": "OVH",
      "email": "api@ml.ovh.net"
    }
  },
  "servers": [
    {
      "url": "https://eu.api.ovh.com/1.0"
    }
  ],
  "components": {
    "schemas": {
      "any": {
        "description": "Can be anything (text, int, bool, json, html, etc.)",
        "example": "This is a content of any type !"
      },
      "dbaas.logs.Alias": {
        "type": "object",
        "description": "Alias",
        "properties": {
          "aliasId": {
            "type": "string",
            "description": "Alias ID",
            "format": "uuid",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Input creation",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Alias description",
            "nullable": true,
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "description": "Indicates if you are allowed to edit entry",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Alias name",
            "readOnly": true
          },
          "nbIndex": {
            "type": "integer",
            "description": "Number of indices linked",
            "readOnly": true
          },
          "nbStream": {
            "type": "integer",
            "description": "Number of streams linked",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Input last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.Archive": {
        "type": "object",
        "description": "Stream archive",
        "properties": {
          "archiveId": {
            "type": "string",
            "description": "Archive ID",
            "format": "uuid",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Create date",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "filename": {
            "type": "string",
            "description": "Filename",
            "readOnly": true
          },
          "md5": {
            "type": "string",
            "description": "MD5 checksum",
            "readOnly": true
          },
          "retrievalDelay": {
            "type": "integer",
            "description": "Retrieval delay",
            "readOnly": true
          },
          "retrievalState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ArchiveRetrievalStateEnum"
              }
            ],
            "description": "Retrieval state",
            "readOnly": true
          },
          "sha256": {
            "type": "string",
            "description": "sha256 checksum",
            "readOnly": true
          },
          "size": {
            "type": "integer",
            "description": "File size in bytes",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.ArchiveRetrievalStateEnum": {
        "type": "string",
        "description": "Possible values for ArchiveRetrievalStateEnum",
        "enum": [
          "sealed",
          "unsealed",
          "unsealing"
        ]
      },
      "dbaas.logs.ArchiveUrl": {
        "type": "object",
        "description": "Stream archive url",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Temporary URL expiration date",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Temporary URL to get archive",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.CertificationLevelEnum": {
        "type": "string",
        "description": "Possible values for CertificationLevelEnum",
        "enum": [
          "HDS",
          "PCI_DSS",
          "SNC",
          "SOC2",
          "STANDARD",
          "TRUSTED_ZONE"
        ]
      },
      "dbaas.logs.Cluster": {
        "type": "object",
        "description": "Cluster",
        "properties": {
          "archiveAllowedNetworks": {
            "type": "array",
            "description": "Allowed networks for ARCHIVE flow type",
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            },
            "readOnly": true
          },
          "certificationLevel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.CertificationLevelEnum"
              }
            ],
            "description": "Certification level of the given cluster",
            "readOnly": true
          },
          "clusterId": {
            "type": "string",
            "description": "Cluster ID",
            "format": "uuid",
            "readOnly": true
          },
          "clusterType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ClusterClusterTypeEnum"
              }
            ],
            "description": "Cluster type",
            "readOnly": true
          },
          "dedicatedInputPEM": {
            "type": "string",
            "description": "PEM for dedicated inputs",
            "readOnly": true
          },
          "defaultRetentionId": {
            "type": "string",
            "description": "Retention ID used by default when none is given on new stream",
            "format": "uuid",
            "readOnly": true
          },
          "directInputAllowedNetworks": {
            "type": "array",
            "description": "Allowed networks for DIRECT_INPUT flow type",
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            },
            "readOnly": true
          },
          "directInputPEM": {
            "type": "string",
            "description": "PEM for direct inputs",
            "readOnly": true
          },
          "hostname": {
            "type": "string",
            "description": "Hostname",
            "readOnly": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "All content generated by given service will be placed on this cluster",
            "readOnly": true
          },
          "isUnlocked": {
            "type": "boolean",
            "description": "Allow given service to perform advanced operations on cluster",
            "readOnly": true
          },
          "queryAllowedNetworks": {
            "type": "array",
            "description": "Allowed networks for QUERY flow type",
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            },
            "readOnly": true
          },
          "region": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ClusterRegionEnum"
              }
            ],
            "description": "Data center localization",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.ClusterClusterTypeEnum": {
        "type": "string",
        "description": "Possible values for ClusterClusterTypeEnum",
        "enum": [
          "DEDICATED",
          "SHARED"
        ]
      },
      "dbaas.logs.ClusterRegionEnum": {
        "type": "string",
        "description": "Possible values for ClusterRegionEnum",
        "enum": [
          "BHS",
          "GRA",
          "P-19",
          "RBX",
          "SBG"
        ]
      },
      "dbaas.logs.ClusterRetention": {
        "type": "object",
        "description": "Cluster retention",
        "properties": {
          "duration": {
            "type": "string",
            "description": "Indexed duration expressed in ISO-8601 format",
            "nullable": true,
            "format": "duration",
            "readOnly": true
          },
          "isSupported": {
            "type": "boolean",
            "description": "Indicates if a new stream can use it",
            "readOnly": true
          },
          "retentionId": {
            "type": "string",
            "description": "Retention ID",
            "format": "uuid",
            "readOnly": true
          },
          "retentionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.RetentionTypeEnum"
              }
            ],
            "description": "Retention type",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.ClusterUpdate": {
        "type": "object",
        "description": "Cluster network acls",
        "properties": {
          "archiveAllowedNetworks": {
            "type": "array",
            "description": "Allowed networks for ARCHIVE flow type",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          },
          "directInputAllowedNetworks": {
            "type": "array",
            "description": "Allowed networks for DIRECT_INPUT flow type",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          },
          "queryAllowedNetworks": {
            "type": "array",
            "description": "Allowed networks for QUERY flow type",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          }
        }
      },
      "dbaas.logs.Dashboard": {
        "type": "object",
        "description": "Graylog dashboard",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Dashboard creation",
            "format": "date-time",
            "readOnly": true
          },
          "dashboardId": {
            "type": "string",
            "description": "Dashboard ID",
            "format": "uuid",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Dashboard description",
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "description": "Indicates if you are allowed to edit entry",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Dashboard description",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Dashboard last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.DeliveryStatusEnum": {
        "type": "string",
        "description": "Possible values for DeliveryStatusEnum",
        "enum": [
          "DELETING",
          "DELIVERING",
          "READY",
          "UPDATING"
        ]
      },
      "dbaas.logs.EncryptionKey": {
        "type": "object",
        "description": "Encryption key",
        "properties": {
          "algorithm": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.EncryptionKeyAlgorithmEnum"
              }
            ],
            "description": "Encryption Key algorithm",
            "readOnly": true
          },
          "content": {
            "type": "string",
            "description": "Encryption Key content",
            "format": "password"
          },
          "createdAt": {
            "type": "string",
            "description": "Encryption Key creation date",
            "format": "date-time",
            "readOnly": true
          },
          "encryptionKeyId": {
            "type": "string",
            "description": "Encryption Key ID",
            "format": "uuid",
            "readOnly": true
          },
          "fingerprint": {
            "type": "string",
            "description": "Encryption Key fingerprint"
          },
          "isEditable": {
            "type": "boolean",
            "description": "Indicates if you are allowed to edit entry",
            "readOnly": true
          },
          "nbArchive": {
            "type": "integer",
            "description": "Number of archives encrypted with this Encryption Key",
            "nullable": true,
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Encryption Key title"
          },
          "uid": {
            "type": "string",
            "description": "Encryption Key user ID",
            "readOnly": true
          }
        },
        "required": [
          "content",
          "fingerprint",
          "title"
        ]
      },
      "dbaas.logs.EncryptionKeyAlgorithmEnum": {
        "type": "string",
        "description": "Possible values for EncryptionKeyAlgorithmEnum",
        "enum": [
          "ECC25519",
          "RSA4096"
        ]
      },
      "dbaas.logs.Engine": {
        "type": "object",
        "description": "Input engine",
        "properties": {
          "engineId": {
            "type": "string",
            "description": "Input engine ID",
            "format": "uuid",
            "readOnly": true
          },
          "isDeprecated": {
            "type": "boolean",
            "description": "Indicates if engine will soon not be supported",
            "readOnly": true
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.EngineNameEnum"
              }
            ],
            "description": "Software name",
            "readOnly": true
          },
          "version": {
            "type": "string",
            "description": "Software version",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.EngineNameEnum": {
        "type": "string",
        "description": "Possible values for EngineNameEnum",
        "enum": [
          "FLOWGGER",
          "LOGSTASH",
          "TEST"
        ]
      },
      "dbaas.logs.FlowggerConfiguration": {
        "type": "object",
        "description": "Flowgger configuration",
        "properties": {
          "logFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.FlowggerConfigurationLogFormatEnum"
              }
            ],
            "description": "Type of format to decode",
            "readOnly": true
          },
          "logFraming": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.FlowggerConfigurationLogFramingEnum"
              }
            ],
            "description": "Indicates how messages are delimited",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.FlowggerConfigurationLogFormatEnum": {
        "type": "string",
        "description": "Possible values for FlowggerConfigurationLogFormatEnum",
        "enum": [
          "CAPNP",
          "GELF",
          "LTSV",
          "RFC5424"
        ]
      },
      "dbaas.logs.FlowggerConfigurationLogFramingEnum": {
        "type": "string",
        "description": "Possible values for FlowggerConfigurationLogFramingEnum",
        "enum": [
          "CAPNP",
          "LINE",
          "NUL",
          "SYSLEN"
        ]
      },
      "dbaas.logs.Helper": {
        "type": "object",
        "description": "Helper",
        "properties": {
          "description": {
            "type": "string",
            "description": "Helper description",
            "readOnly": true
          },
          "engineId": {
            "type": "string",
            "description": "Input engine UUID",
            "format": "uuid",
            "readOnly": true
          },
          "helperId": {
            "type": "string",
            "description": "Helper UUID",
            "format": "uuid",
            "readOnly": true
          },
          "sections": {
            "type": "array",
            "description": "Helper sections",
            "items": {
              "$ref": "#/components/schemas/dbaas.logs.HelperSection"
            },
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Helper title",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.HelperSection": {
        "type": "object",
        "description": "Helper section",
        "properties": {
          "content": {
            "type": "string",
            "description": "Section content",
            "readOnly": true
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.HelperSectionNameEnum"
              }
            ],
            "description": "Section name",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.HelperSectionNameEnum": {
        "type": "string",
        "description": "Possible values for HelperSectionName",
        "enum": [
          "LOGSTASH_FILTER",
          "LOGSTASH_INPUT",
          "LOGSTASH_PATTERN"
        ]
      },
      "dbaas.logs.Index": {
        "type": "object",
        "description": "Index",
        "properties": {
          "alertNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when size is near 80, 90 or 100 % of its maximum capacity",
            "nullable": true,
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Index creation",
            "format": "date-time",
            "readOnly": true
          },
          "currentSize": {
            "type": "integer",
            "description": "Current index size (in bytes)",
            "nullable": true,
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Index description",
            "nullable": true,
            "readOnly": true
          },
          "indexId": {
            "type": "string",
            "description": "Index ID",
            "format": "uuid",
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "description": "Indicates if you are allowed to edit entry",
            "readOnly": true
          },
          "maxSize": {
            "type": "integer",
            "description": "Maximum index size (in bytes)",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Index name",
            "readOnly": true
          },
          "nbShard": {
            "type": "integer",
            "description": "Number of shard",
            "nullable": true,
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Index last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.Input": {
        "type": "object",
        "description": "Input",
        "properties": {
          "allowedNetworks": {
            "type": "array",
            "description": "IP blocks",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            },
            "readOnly": true
          },
          "autoscale": {
            "type": "boolean",
            "description": "Whether the workload is auto-scaled",
            "nullable": true,
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Input creation",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Input description",
            "readOnly": true
          },
          "engineId": {
            "type": "string",
            "description": "Input engine ID",
            "format": "uuid",
            "readOnly": true
          },
          "exposedPort": {
            "type": "string",
            "description": "Port",
            "nullable": true,
            "readOnly": true
          },
          "hostname": {
            "type": "string",
            "description": "Hostname",
            "readOnly": true
          },
          "inputId": {
            "type": "string",
            "description": "Input ID",
            "format": "uuid",
            "readOnly": true
          },
          "isRestartRequired": {
            "type": "boolean",
            "description": "Indicate if input need to be restarted",
            "readOnly": true
          },
          "maxScaleInstance": {
            "type": "integer",
            "description": "Maximum number of instances in auto-scaled mode",
            "nullable": true,
            "readOnly": true
          },
          "minScaleInstance": {
            "type": "integer",
            "description": "Minimum number of instances in auto-scaled mode",
            "nullable": true,
            "readOnly": true
          },
          "nbInstance": {
            "type": "integer",
            "description": "Number of instance running",
            "nullable": true,
            "readOnly": true
          },
          "publicAddress": {
            "type": "string",
            "description": "Input IP address",
            "readOnly": true
          },
          "scalingNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when scaling happens",
            "nullable": true,
            "readOnly": true
          },
          "sslCertificate": {
            "type": "string",
            "description": "Input SSL certificate",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.InputStatusEnum"
              }
            ],
            "description": "init: configuration required, pending: ready to start, running: available",
            "readOnly": true
          },
          "streamId": {
            "type": "string",
            "description": "Associated Graylog stream",
            "format": "uuid",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Input title",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Input last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.InputAction": {
        "type": "object",
        "description": "Action on input",
        "properties": {
          "isAllowed": {
            "type": "boolean",
            "description": "Indicates if action is allowed",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.InputActionTypeEnum"
              }
            ],
            "description": "Action type",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.InputActionTypeEnum": {
        "type": "string",
        "description": "Possible values for InputActionTypeEnum",
        "enum": [
          "DESTROY",
          "END",
          "LOG",
          "RESTART",
          "START",
          "TEST"
        ]
      },
      "dbaas.logs.InputConfigurationFlowggerUpdate": {
        "type": "object",
        "description": "Flowgger configuration",
        "properties": {
          "logFormat": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.FlowggerConfigurationLogFormatEnum"
              }
            ],
            "description": "configuration log format"
          },
          "logFraming": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.FlowggerConfigurationLogFramingEnum"
              }
            ],
            "description": "Log framing"
          }
        },
        "required": [
          "logFormat",
          "logFraming"
        ]
      },
      "dbaas.logs.InputConfigurationLogstashUpdate": {
        "type": "object",
        "description": "Logstash configuration",
        "properties": {
          "filterSection": {
            "type": "string",
            "description": "Filter section",
            "nullable": true
          },
          "inputSection": {
            "type": "string",
            "description": "Input section"
          },
          "patternSection": {
            "type": "string",
            "description": "Pattern section",
            "nullable": true
          }
        },
        "required": [
          "inputSection"
        ]
      },
      "dbaas.logs.InputCreation": {
        "type": "object",
        "description": "Input configuration",
        "properties": {
          "allowedNetworks": {
            "type": "array",
            "description": "IP blocks",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          },
          "autoscale": {
            "type": "boolean",
            "description": "Whether the workload is auto-scaled",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "engineId": {
            "type": "string",
            "description": "Engine ID",
            "format": "uuid"
          },
          "exposedPort": {
            "type": "string",
            "description": "Exposed port",
            "nullable": true
          },
          "maxScaleInstance": {
            "type": "integer",
            "description": "Maximum number of instances in auto-scaled mode",
            "nullable": true
          },
          "minScaleInstance": {
            "type": "integer",
            "description": "Minimum number of instances in auto-scaled mode",
            "nullable": true
          },
          "nbInstance": {
            "type": "integer",
            "description": "Number of instance running",
            "nullable": true
          },
          "scalingNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when scaling happens",
            "nullable": true
          },
          "streamId": {
            "type": "string",
            "description": "Stream ID",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "description",
          "engineId",
          "streamId",
          "title"
        ]
      },
      "dbaas.logs.InputStatusEnum": {
        "type": "string",
        "description": "Possible values for InputStatusEnum",
        "enum": [
          "INIT",
          "PENDING",
          "PROCESSING",
          "RUNNING"
        ]
      },
      "dbaas.logs.InputUpdate": {
        "type": "object",
        "description": "Input configuration update",
        "properties": {
          "allowedNetworks": {
            "type": "array",
            "description": "IP blocks",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/ipBlock"
            }
          },
          "autoscale": {
            "type": "boolean",
            "description": "Whether the workload is auto-scaled",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "engineId": {
            "type": "string",
            "description": "Engine ID",
            "format": "uuid"
          },
          "exposedPort": {
            "type": "string",
            "description": "Exposed port",
            "nullable": true
          },
          "maxScaleInstance": {
            "type": "integer",
            "description": "Maximum number of instances in auto-scaled mode",
            "nullable": true
          },
          "minScaleInstance": {
            "type": "integer",
            "description": "Minimum number of instances in auto-scaled mode",
            "nullable": true
          },
          "nbInstance": {
            "type": "integer",
            "description": "Number of instance running",
            "nullable": true
          },
          "scalingNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when scaling happens",
            "nullable": true
          },
          "streamId": {
            "type": "string",
            "description": "Stream ID",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "description",
          "engineId",
          "streamId",
          "title"
        ]
      },
      "dbaas.logs.LogKind": {
        "type": "object",
        "description": "Log kind",
        "properties": {
          "additionalReturnedFields": {
            "type": "array",
            "description": "List of additional log fields managed in this log kind",
            "items": {
              "type": "string"
            },
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Creation date of the log kind",
            "format": "date-time",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Log kind display name",
            "readOnly": true
          },
          "kindId": {
            "type": "string",
            "description": "Log kind ID",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Log kind name",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date of the log kind",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogSubscription": {
        "type": "object",
        "description": "Log subscription",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Creation date of the subscription",
            "format": "date-time",
            "readOnly": true
          },
          "kind": {
            "type": "string",
            "description": "Log kind name of this subscription",
            "readOnly": true
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResource"
              }
            ],
            "description": "Subscribed resource, where the logs come from",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Name of the destination log service",
            "readOnly": true
          },
          "streamId": {
            "type": "string",
            "description": "Id of the destination log stream",
            "readOnly": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "format": "uuid",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date of the subscription",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogSubscriptionCreation": {
        "type": "object",
        "description": "Log subscription creation payload",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Log kind name to subscribe to"
          },
          "streamId": {
            "type": "string",
            "description": "Customer log stream ID",
            "format": "uuid"
          }
        },
        "required": [
          "kind",
          "streamId"
        ]
      },
      "dbaas.logs.LogSubscriptionResource": {
        "type": "object",
        "description": "Log subscription resource",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of subscribed resource",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "description": "Type of subscribed resource",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogSubscriptionResponse": {
        "type": "object",
        "description": "Asynchronous operation after subscribing or unsubscribing to a resource logs",
        "properties": {
          "operationId": {
            "type": "string",
            "description": "Identifier of the operation",
            "format": "uuid",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Operation owner's service name",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.LogUrlCreation": {
        "type": "object",
        "description": "Log temporary URL creation payload",
        "properties": {
          "kind": {
            "type": "string",
            "description": "Log kind name"
          }
        },
        "required": [
          "kind"
        ]
      },
      "dbaas.logs.LogstashConfiguration": {
        "type": "object",
        "description": "Logstash configuration",
        "properties": {
          "filterSection": {
            "type": "string",
            "description": "The filter section of logstash.conf",
            "nullable": true,
            "readOnly": true
          },
          "inputSection": {
            "type": "string",
            "description": "The filter section of logstash.conf",
            "readOnly": true
          },
          "patternSection": {
            "type": "string",
            "description": "The list of customs Grok patterns",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "dbaas.logs.Member": {
        "type": "object",
        "description": "Member",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Membership creation",
            "format": "date-time",
            "readOnly": true
          },
          "note": {
            "type": "string",
            "description": "Custom note",
            "nullable": true,
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Username on DBaaS Logs",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.MetricSubscription": {
        "type": "object",
        "description": "Metrics subscription",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Creation date of the subscription",
            "format": "date-time",
            "readOnly": true
          },
          "kind": {
            "type": "string",
            "description": "Metric kind name of this subscription",
            "readOnly": true
          },
          "resource": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.LogSubscriptionResource"
              }
            ],
            "description": "Subscribed resource, where the metrics come from",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Name of the destination /dbaas/logs service",
            "readOnly": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription ID",
            "format": "uuid",
            "readOnly": true
          },
          "tenantId": {
            "type": "string",
            "description": "Id of the destination metric tenant",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last update date of the subscription",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.MetricTenant": {
        "type": "object",
        "description": "Metric Tenant",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Metric tenant creation",
            "format": "date-time",
            "readOnly": true
          },
          "deliveryStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.DeliveryStatusEnum"
              }
            ],
            "description": "Status of the delivering process",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Metric tenant description",
            "readOnly": true
          },
          "maxSeries": {
            "type": "integer",
            "description": "Maximum number of time series inside the tenant",
            "readOnly": true
          },
          "retentionId": {
            "type": "string",
            "description": "Delete samples older than the specified retention period.",
            "format": "uuid",
            "readOnly": true
          },
          "tenantId": {
            "type": "string",
            "description": "The Id of the metric tenant",
            "format": "uuid",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Metric tenant title",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Metric tenant last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.NewMetricTenant": {
        "type": "object",
        "description": "New Metric Tenant",
        "properties": {
          "description": {
            "type": "string",
            "description": "Metric tenant description"
          },
          "maxSeries": {
            "type": "integer",
            "description": "Maximum number of time series inside the tenant"
          },
          "retentionId": {
            "type": "string",
            "description": "Delete samples older than the specified retention period.",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Metric tenant title"
          }
        },
        "required": [
          "description",
          "retentionId",
          "title"
        ]
      },
      "dbaas.logs.Operation": {
        "type": "object",
        "description": "Asynchronous operation",
        "properties": {
          "aliasId": {
            "type": "string",
            "description": "Alias used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Operation creation",
            "format": "date-time",
            "readOnly": true
          },
          "dashboardId": {
            "type": "string",
            "description": "Dashboard used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "encryptionKeyId": {
            "type": "string",
            "description": "Encryption key used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "indexId": {
            "type": "string",
            "description": "Index used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "inputId": {
            "type": "string",
            "description": "Input used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "operationId": {
            "type": "string",
            "description": "Operation ID",
            "format": "uuid",
            "readOnly": true
          },
          "osdId": {
            "type": "string",
            "description": "OpenSearch Dashboards used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "roleId": {
            "type": "string",
            "description": "Role used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Service name",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.OperationStateEnum"
              }
            ],
            "description": "Operation status",
            "readOnly": true
          },
          "streamId": {
            "type": "string",
            "description": "Stream used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "subscriptionId": {
            "type": "string",
            "description": "Subscription used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "tenantId": {
            "type": "string",
            "description": "Metrics tenant used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "tokenId": {
            "type": "string",
            "description": "Token used",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Operation last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.OperationStateEnum": {
        "type": "string",
        "description": "Possible values for OperationStateEnum",
        "enum": [
          "FAILURE",
          "PENDING",
          "RECEIVED",
          "RETRY",
          "REVOKED",
          "RUNNING",
          "STARTED",
          "SUCCESS"
        ]
      },
      "dbaas.logs.Osd": {
        "type": "object",
        "description": "OpenSearch Dashboards instance",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "OpenSearch Dashboards creation",
            "format": "date-time",
            "readOnly": true
          },
          "deliveryStatus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.DeliveryStatusEnum"
              }
            ],
            "description": "Status of the delivering process",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "OpenSearch Dashboards description",
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "description": "Indicates if you are allowed to edit entry",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "OpenSearch Dashboards name",
            "readOnly": true
          },
          "osdId": {
            "type": "string",
            "description": "OpenSearch Dashboards ID",
            "format": "uuid",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "OpenSearch Dashboards last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.OsdCreation": {
        "type": "object",
        "description": "Osd creation body",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "required": [
          "description"
        ]
      },
      "dbaas.logs.OsdUpdate": {
        "type": "object",
        "description": "OpenSearch Dashboards update",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "required": [
          "description"
        ]
      },
      "dbaas.logs.OutputGraylogDashboardCreation": {
        "type": "object",
        "description": "New Graylog dashboard",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "description",
          "title"
        ]
      },
      "dbaas.logs.OutputGraylogDashboardDuplicateCreation": {
        "type": "object",
        "description": "Clone given Graylog dashboard",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          },
          "streamId": {
            "type": "string",
            "description": "Stream ID",
            "nullable": true,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "description",
          "title"
        ]
      },
      "dbaas.logs.OutputGraylogDashboardUpdate": {
        "type": "object",
        "description": "Graylog dahsboard update",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "description",
          "title"
        ]
      },
      "dbaas.logs.OutputGraylogStreamAlertCreation": {
        "type": "object",
        "description": "New Graylog alert",
        "properties": {
          "backlog": {
            "type": "integer",
            "description": "Backlog"
          },
          "conditionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionConditionTypeEnum"
              }
            ],
            "description": "Condition type",
            "nullable": true
          },
          "constraintType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionConstraintTypeEnum"
              }
            ],
            "description": "Constraint type",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Field",
            "nullable": true
          },
          "grace": {
            "type": "integer",
            "description": "Grace period"
          },
          "queryFilter": {
            "type": "string",
            "description": "Query filter",
            "nullable": true
          },
          "repeatNotificationsEnabled": {
            "type": "boolean",
            "description": "Repeat notifications enabled",
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "description": "Threshold",
            "nullable": true
          },
          "thresholdType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionThresholdTypeEnum"
              }
            ],
            "description": "Threshold type",
            "nullable": true
          },
          "time": {
            "type": "integer",
            "description": "Time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "value": {
            "type": "string",
            "description": "Value",
            "nullable": true
          }
        },
        "required": [
          "backlog",
          "grace",
          "title"
        ]
      },
      "dbaas.logs.OutputGraylogStreamAlertUpdate": {
        "type": "object",
        "description": "Graylog alert update",
        "properties": {
          "backlog": {
            "type": "integer",
            "description": "Backlog"
          },
          "conditionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionConditionTypeEnum"
              }
            ],
            "description": "Condition type",
            "nullable": true
          },
          "constraintType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionConstraintTypeEnum"
              }
            ],
            "description": "Constraint type",
            "nullable": true
          },
          "field": {
            "type": "string",
            "description": "Field",
            "nullable": true
          },
          "grace": {
            "type": "integer",
            "description": "Grace period"
          },
          "queryFilter": {
            "type": "string",
            "description": "Query filter",
            "nullable": true
          },
          "repeatNotificationsEnabled": {
            "type": "boolean",
            "description": "Repeat notifications enabled",
            "nullable": true
          },
          "threshold": {
            "type": "integer",
            "description": "Threshold",
            "nullable": true
          },
          "thresholdType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionThresholdTypeEnum"
              }
            ],
            "description": "Threshold type",
            "nullable": true
          },
          "time": {
            "type": "integer",
            "description": "Time",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "value": {
            "type": "string",
            "description": "Value",
            "nullable": true
          }
        },
        "required": [
          "backlog",
          "grace",
          "title"
        ]
      },
      "dbaas.logs.OutputGraylogStreamCreation": {
        "type": "object",
        "description": "New Graylog stream",
        "properties": {
          "coldStorageCompression": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamColdStorageCompressionEnum"
              }
            ],
            "description": "Cold storage compression",
            "nullable": true
          },
          "coldStorageContent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamColdStorageContentEnum"
              }
            ],
            "description": "Cold storage archive content",
            "nullable": true
          },
          "coldStorageEnabled": {
            "type": "boolean",
            "description": "Cold storage enabled",
            "nullable": true
          },
          "coldStorageNotifyEnabled": {
            "type": "boolean",
            "description": "Cold storage notify enabled",
            "nullable": true
          },
          "coldStorageRetention": {
            "type": "integer",
            "description": "Cold storage retention time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "encryptionKeysIds": {
            "type": "array",
            "description": "Encryption keys used to encrypt stream archives",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "indexingEnabled": {
            "type": "boolean",
            "description": "ES indexing enabled",
            "nullable": true
          },
          "indexingMaxSize": {
            "type": "integer",
            "description": "Maximum indexing size (in GB)",
            "nullable": true
          },
          "indexingNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when size is near 80, 90 or 100 % of the maximum configured setting",
            "nullable": true
          },
          "parentStreamId": {
            "type": "string",
            "description": "Parent stream ID",
            "nullable": true,
            "format": "uuid"
          },
          "pauseIndexingOnMaxSize": {
            "type": "boolean",
            "description": "If set, pause indexing when maximum size is reach",
            "nullable": true
          },
          "retentionId": {
            "type": "string",
            "description": "Retention ID",
            "nullable": true,
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "webSocketEnabled": {
            "type": "boolean",
            "description": "Web Socket enabled",
            "nullable": true
          }
        },
        "required": [
          "description",
          "title"
        ]
      },
      "dbaas.logs.OutputGraylogStreamRuleCreation": {
        "type": "object",
        "description": "New rule on Graylog stream",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name"
          },
          "isInverted": {
            "type": "boolean",
            "description": "Invert condition",
            "nullable": true
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamRuleOperatorEnum"
              }
            ],
            "description": "Field operator"
          },
          "value": {
            "type": "string",
            "description": "Field value"
          }
        },
        "required": [
          "field",
          "operator",
          "value"
        ]
      },
      "dbaas.logs.OutputGraylogStreamUpdate": {
        "type": "object",
        "description": "Graylog stream update",
        "properties": {
          "coldStorageCompression": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamColdStorageCompressionEnum"
              }
            ],
            "description": "Cold storage compression",
            "nullable": true
          },
          "coldStorageContent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamColdStorageContentEnum"
              }
            ],
            "description": "Cold storage content",
            "nullable": true
          },
          "coldStorageEnabled": {
            "type": "boolean",
            "description": "Cold storage enabled",
            "nullable": true
          },
          "coldStorageNotifyEnabled": {
            "type": "boolean",
            "description": "Cold storage notify enabled",
            "nullable": true
          },
          "coldStorageRetention": {
            "type": "integer",
            "description": "Cold storage retention time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "encryptionKeysIds": {
            "type": "array",
            "description": "Encryption keys used to encrypt stream archives",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "indexingEnabled": {
            "type": "boolean",
            "description": "ES indexing enabled",
            "nullable": true
          },
          "indexingMaxSize": {
            "type": "integer",
            "description": "Maximum indexing size (in GB)",
            "nullable": true
          },
          "indexingNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when size is near 80, 90 or 100 % of the maximum configured setting",
            "nullable": true
          },
          "pauseIndexingOnMaxSize": {
            "type": "boolean",
            "description": "If set, pause indexing when maximum size is reach",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Title"
          },
          "webSocketEnabled": {
            "type": "boolean",
            "description": "Web socket enabled",
            "nullable": true
          }
        },
        "required": [
          "description",
          "title"
        ]
      },
      "dbaas.logs.OutputOpenSearchAliasCreation": {
        "type": "object",
        "description": "New OpenSearch alias",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          }
        },
        "required": [
          "description",
          "suffix"
        ]
      },
      "dbaas.logs.OutputOpenSearchAliasIndexCreation": {
        "type": "object",
        "description": "Link given OpenSearch index to alias",
        "properties": {
          "indexId": {
            "type": "string",
            "description": "Index ID",
            "format": "uuid"
          }
        },
        "required": [
          "indexId"
        ]
      },
      "dbaas.logs.OutputOpenSearchAliasStreamCreation": {
        "type": "object",
        "description": "Link given Graylog stream to alias",
        "properties": {
          "streamId": {
            "type": "string",
            "description": "Stream ID",
            "format": "uuid"
          }
        },
        "required": [
          "streamId"
        ]
      },
      "dbaas.logs.OutputOpenSearchAliasUpdate": {
        "type": "object",
        "description": "OpenSearch alias update",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "required": [
          "description"
        ]
      },
      "dbaas.logs.OutputOpenSearchIndexCreation": {
        "type": "object",
        "description": "OpenSearch index update",
        "properties": {
          "alertNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when size is near 80, 90 or 100 % of its maximum capacity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "nbShard": {
            "type": "integer",
            "description": "Number of shard",
            "nullable": true
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          }
        },
        "required": [
          "description",
          "suffix"
        ]
      },
      "dbaas.logs.OutputOpenSearchIndexUpdate": {
        "type": "object",
        "description": "OpenSearch index update",
        "properties": {
          "alertNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when size is near 80, 90 or 100 % of its maximum capacity",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description"
          }
        },
        "required": [
          "description"
        ]
      },
      "dbaas.logs.Permission": {
        "type": "object",
        "description": "Role permission",
        "properties": {
          "aliasId": {
            "type": "string",
            "description": "Associated Elasticsearch alias",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "dashboardId": {
            "type": "string",
            "description": "Associated Graylog dashboard",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "indexId": {
            "type": "string",
            "description": "Associated Elasticsearch index",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "osdId": {
            "type": "string",
            "description": "Associated OpenSearch Dashboards instance",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "permissionId": {
            "type": "string",
            "description": "Permission ID",
            "format": "uuid",
            "readOnly": true
          },
          "permissionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.PermissionTypeEnum"
              }
            ],
            "description": "Permission type",
            "nullable": true,
            "readOnly": true
          },
          "streamId": {
            "type": "string",
            "description": "Associated Graylog stream",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.PermissionTypeEnum": {
        "type": "string",
        "description": "Possible values for PermissionTypeEnum",
        "enum": [
          "READ_ONLY",
          "READ_WRITE"
        ]
      },
      "dbaas.logs.RetentionTypeEnum": {
        "type": "string",
        "description": "Possible values for RetentionTypeEnum",
        "enum": [
          "LOGS_COLD_STORAGE",
          "LOGS_INDEXING",
          "METRICS_TENANT"
        ]
      },
      "dbaas.logs.Role": {
        "type": "object",
        "description": "Role",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Role creation",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Role description",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Role name",
            "readOnly": true
          },
          "nbMember": {
            "type": "integer",
            "description": "Number of members",
            "readOnly": true
          },
          "nbPermission": {
            "type": "integer",
            "description": "Number of permissions",
            "readOnly": true
          },
          "roleId": {
            "type": "string",
            "description": "Role ID",
            "format": "uuid",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Role last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.RoleCreation": {
        "type": "object",
        "description": "New role",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "dbaas.logs.RoleMemberCreation": {
        "type": "object",
        "description": "Add given LDP account to role",
        "properties": {
          "note": {
            "type": "string",
            "description": "Custom note",
            "nullable": true
          },
          "username": {
            "type": "string",
            "description": "Username"
          }
        },
        "required": [
          "username"
        ]
      },
      "dbaas.logs.RoleMemberUpdate": {
        "type": "object",
        "description": "Update given role member",
        "properties": {
          "note": {
            "type": "string",
            "description": "Custom note",
            "nullable": true
          }
        }
      },
      "dbaas.logs.RolePermissionAliasCreation": {
        "type": "object",
        "description": "Attach given alias to role",
        "properties": {
          "aliasId": {
            "type": "string",
            "description": "Alias ID",
            "format": "uuid"
          }
        },
        "required": [
          "aliasId"
        ]
      },
      "dbaas.logs.RolePermissionDashboardCreation": {
        "type": "object",
        "description": "Attach given Graylog dashboard to role",
        "properties": {
          "dashboardId": {
            "type": "string",
            "description": "Dashboard ID",
            "format": "uuid"
          },
          "permissionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.PermissionTypeEnum"
              }
            ],
            "description": "Permission type",
            "nullable": true
          }
        },
        "required": [
          "dashboardId"
        ]
      },
      "dbaas.logs.RolePermissionIndexCreation": {
        "type": "object",
        "description": "Attach given index to role",
        "properties": {
          "indexId": {
            "type": "string",
            "description": "Index ID",
            "format": "uuid"
          },
          "permissionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.PermissionTypeEnum"
              }
            ],
            "description": "Permission type",
            "nullable": true
          }
        },
        "required": [
          "indexId"
        ]
      },
      "dbaas.logs.RolePermissionOsdCreation": {
        "type": "object",
        "description": "Attach given OpenSearch Dashboards to role",
        "properties": {
          "osdId": {
            "type": "string",
            "description": "Osd ID",
            "format": "uuid"
          },
          "permissionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.PermissionTypeEnum"
              }
            ],
            "description": "Permission type",
            "nullable": true
          }
        },
        "required": [
          "osdId"
        ]
      },
      "dbaas.logs.RolePermissionStreamCreation": {
        "type": "object",
        "description": "Attach given Graylog stream to role",
        "properties": {
          "streamId": {
            "type": "string",
            "description": "Stream ID",
            "format": "uuid"
          }
        },
        "required": [
          "streamId"
        ]
      },
      "dbaas.logs.RoleUpdate": {
        "type": "object",
        "description": "Role update",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "description": "Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "dbaas.logs.Service": {
        "type": "object",
        "description": "Service",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Service creation",
            "format": "date-time",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Service custom name",
            "nullable": true,
            "readOnly": true
          },
          "isClusterOwner": {
            "type": "boolean",
            "description": "If set, can perform extra action on cluster",
            "readOnly": true
          },
          "isIamEnabled": {
            "type": "boolean",
            "description": "Is IAM enabled for this service?",
            "readOnly": true
          },
          "plan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ServicePlanEnum"
              }
            ],
            "description": "Service plan",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Service name",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ServiceStateEnum"
              }
            ],
            "description": "Service state",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Service last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Username on DBaaS Logs",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.ServiceMetric": {
        "type": "object",
        "description": "Metrics access",
        "properties": {
          "host": {
            "type": "string",
            "description": "Metrics server url",
            "readOnly": true
          },
          "token": {
            "type": "string",
            "description": "Metrics credentials",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.ServicePlanEnum": {
        "type": "string",
        "description": "Possible values for ServicePlanEnum",
        "enum": [
          "ENTERPRISE",
          "STANDARD"
        ]
      },
      "dbaas.logs.ServiceStateEnum": {
        "type": "string",
        "description": "Possible values for ServiceStateEnum",
        "enum": [
          "DISABLED",
          "ENABLED",
          "INIT",
          "TO_CONFIG"
        ]
      },
      "dbaas.logs.ServiceWithIAM": {
        "type": "object",
        "description": "Service",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "Service creation",
            "format": "date-time",
            "readOnly": true
          },
          "displayName": {
            "type": "string",
            "description": "Service custom name",
            "nullable": true,
            "readOnly": true
          },
          "iam": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iam.ResourceMetadata"
              }
            ],
            "description": "IAM resource metadata",
            "nullable": true,
            "readOnly": true
          },
          "isClusterOwner": {
            "type": "boolean",
            "description": "If set, can perform extra action on cluster",
            "readOnly": true
          },
          "isIamEnabled": {
            "type": "boolean",
            "description": "Is IAM enabled for this service?",
            "readOnly": true
          },
          "plan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ServicePlanEnum"
              }
            ],
            "description": "Service plan",
            "readOnly": true
          },
          "serviceName": {
            "type": "string",
            "description": "Service name",
            "readOnly": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.ServiceStateEnum"
              }
            ],
            "description": "Service state",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Service last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "description": "Username on DBaaS Logs",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.Stream": {
        "type": "object",
        "description": "Graylog stream",
        "properties": {
          "canAlert": {
            "type": "boolean",
            "description": "Indicates if the current user can create alert on the stream",
            "readOnly": true
          },
          "clusterId": {
            "type": "string",
            "description": "Cluster ID",
            "format": "uuid",
            "readOnly": true
          },
          "coldStorageCompression": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamColdStorageCompressionEnum"
              }
            ],
            "description": "Cold storage compression method",
            "nullable": true,
            "readOnly": true
          },
          "coldStorageContent": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamColdStorageContentEnum"
              }
            ],
            "description": "ColdStorage content",
            "nullable": true,
            "readOnly": true
          },
          "coldStorageEnabled": {
            "type": "boolean",
            "description": "Is Cold storage enabled?",
            "nullable": true,
            "readOnly": true
          },
          "coldStorageNotifyEnabled": {
            "type": "boolean",
            "description": "Notify on new Cold storage archive",
            "nullable": true,
            "readOnly": true
          },
          "coldStorageRetention": {
            "type": "integer",
            "description": "Cold storage retention in year",
            "nullable": true,
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Stream creation",
            "format": "date-time",
            "readOnly": true
          },
          "description": {
            "type": "string",
            "description": "Stream description",
            "readOnly": true
          },
          "encryptionKeysIds": {
            "type": "array",
            "description": "Encryption keys used to encrypt stream archives",
            "nullable": true,
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "readOnly": true
          },
          "indexingCurrentSize": {
            "type": "integer",
            "description": "Indexing current size (in bytes)",
            "nullable": true,
            "readOnly": true
          },
          "indexingEnabled": {
            "type": "boolean",
            "description": "Enable ES indexing",
            "nullable": true,
            "readOnly": true
          },
          "indexingMaxSize": {
            "type": "integer",
            "description": "Maximum indexing size (in GB)",
            "nullable": true,
            "readOnly": true
          },
          "indexingNotifyEnabled": {
            "type": "boolean",
            "description": "If set, notify when size is near 80, 90 or 100 % of the maximum configured setting",
            "nullable": true,
            "readOnly": true
          },
          "isEditable": {
            "type": "boolean",
            "description": "Indicates if you are allowed to edit entry",
            "readOnly": true
          },
          "nbAlertCondition": {
            "type": "integer",
            "description": "Number of alert condition",
            "readOnly": true
          },
          "nbArchive": {
            "type": "integer",
            "description": "Number of coldstored archives",
            "readOnly": true
          },
          "nbSubscription": {
            "type": "integer",
            "description": "Number of subscriptions targeting this stream",
            "readOnly": true
          },
          "parentStreamId": {
            "type": "string",
            "description": "Parent stream ID",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "pauseIndexingOnMaxSize": {
            "type": "boolean",
            "description": "If set, pause indexing when maximum size is reach",
            "nullable": true,
            "readOnly": true
          },
          "retentionId": {
            "type": "string",
            "description": "Retention ID",
            "format": "uuid",
            "readOnly": true
          },
          "streamId": {
            "type": "string",
            "description": "Stream ID",
            "format": "uuid",
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Stream description",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Stream last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "webSocketEnabled": {
            "type": "boolean",
            "description": "Enable Websocket",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "dbaas.logs.StreamAlertCondition": {
        "type": "object",
        "description": "Alert condition",
        "properties": {
          "alertId": {
            "type": "string",
            "description": "Stream alert condition ID",
            "format": "uuid",
            "readOnly": true
          },
          "backlog": {
            "type": "integer",
            "description": "Backlog size",
            "readOnly": true
          },
          "conditionType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionConditionTypeEnum"
              }
            ],
            "description": "Alert condition type",
            "nullable": true,
            "readOnly": true
          },
          "constraintType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionConstraintTypeEnum"
              }
            ],
            "description": "Constraint type",
            "nullable": true,
            "readOnly": true
          },
          "field": {
            "type": "string",
            "description": "Field name",
            "nullable": true,
            "readOnly": true
          },
          "grace": {
            "type": "integer",
            "description": "Grace period in minutes",
            "readOnly": true
          },
          "queryFilter": {
            "type": "string",
            "description": "Query filter",
            "nullable": true,
            "readOnly": true
          },
          "repeatNotificationsEnabled": {
            "type": "boolean",
            "description": "Repeat notifications",
            "nullable": true,
            "readOnly": true
          },
          "threshold": {
            "type": "integer",
            "description": "Threshold",
            "nullable": true,
            "readOnly": true
          },
          "thresholdType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamAlertConditionThresholdTypeEnum"
              }
            ],
            "description": "Threshold condition",
            "nullable": true,
            "readOnly": true
          },
          "time": {
            "type": "integer",
            "description": "Time lapse in minutes",
            "nullable": true,
            "readOnly": true
          },
          "title": {
            "type": "string",
            "description": "Condition label",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "Field value",
            "nullable": true,
            "readOnly": true
          }
        }
      },
      "dbaas.logs.StreamAlertConditionConditionTypeEnum": {
        "type": "string",
        "description": "Possible values for StreamAlertConditionConditionTypeEnum",
        "enum": [
          "FIELD_CONTENT_VALUE",
          "FIELD_VALUE",
          "MESSAGE_COUNT"
        ]
      },
      "dbaas.logs.StreamAlertConditionConstraintTypeEnum": {
        "type": "string",
        "description": "Possible values for StreamAlertConditionConstraintTypeEnum",
        "enum": [
          "MAX",
          "MEAN",
          "MIN",
          "STDLABEU",
          "SUM"
        ]
      },
      "dbaas.logs.StreamAlertConditionThresholdTypeEnum": {
        "type": "string",
        "description": "Possible values for StreamAlertConditionThresholdTypeEnum",
        "enum": [
          "EQ",
          "GT",
          "GTE",
          "LT",
          "LTE"
        ]
      },
      "dbaas.logs.StreamColdStorageCompressionEnum": {
        "type": "string",
        "description": "Possible values for StreamColdStorageCompressionEnum",
        "enum": [
          "DEFLATED",
          "GZIP",
          "LZMA",
          "ZSTD"
        ]
      },
      "dbaas.logs.StreamColdStorageContentEnum": {
        "type": "string",
        "description": "Possible values for StreamColdStorageContentEnum",
        "enum": [
          "ALL",
          "GELF",
          "PLAIN"
        ]
      },
      "dbaas.logs.StreamRule": {
        "type": "object",
        "description": "Stream rule",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field name",
            "readOnly": true
          },
          "isInverted": {
            "type": "boolean",
            "description": "Invert condition",
            "nullable": true,
            "readOnly": true
          },
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.StreamRuleOperatorEnum"
              }
            ],
            "description": "Field operator",
            "nullable": true,
            "readOnly": true
          },
          "ruleId": {
            "type": "string",
            "description": "Stream rule ID",
            "format": "uuid",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "Field value",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.StreamRuleOperatorEnum": {
        "type": "string",
        "description": "Possible values for StreamRuleOperatorEnum",
        "enum": [
          "FIELD_PRESENCE",
          "GREATER_THAN",
          "MATCH_EXACTLY",
          "SMALLER_THAN"
        ]
      },
      "dbaas.logs.TemporaryLogsLink": {
        "type": "object",
        "description": "Temporary url information",
        "properties": {
          "expirationDate": {
            "type": "string",
            "description": "Temporary url expiration date",
            "format": "date-time",
            "readOnly": true
          },
          "url": {
            "type": "string",
            "description": "Temporary url",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.TestResult": {
        "type": "object",
        "description": "Config test results",
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether the given configuration pass the syntax test",
            "readOnly": true
          },
          "stderr": {
            "type": "string",
            "description": "Standard error",
            "nullable": true,
            "readOnly": true
          },
          "stdout": {
            "type": "string",
            "description": "Standard output",
            "nullable": true,
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Last config test update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.Token": {
        "type": "object",
        "description": "Token",
        "properties": {
          "clusterId": {
            "type": "string",
            "description": "Cluster ID",
            "nullable": true,
            "format": "uuid",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Token creation",
            "format": "date-time",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Token name",
            "readOnly": true
          },
          "tokenId": {
            "type": "string",
            "description": "Token ID",
            "format": "uuid",
            "readOnly": true
          },
          "updatedAt": {
            "type": "string",
            "description": "Token last update",
            "nullable": true,
            "format": "date-time",
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "Token value",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.TokenCreation": {
        "type": "object",
        "description": "New token",
        "properties": {
          "clusterId": {
            "type": "string",
            "description": "Cluster ID",
            "nullable": true,
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Token name"
          }
        },
        "required": [
          "name"
        ]
      },
      "dbaas.logs.Update": {
        "type": "object",
        "description": "Service update",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Service custom name",
            "nullable": true
          },
          "enableIam": {
            "type": "boolean",
            "description": "Enable IAM for this service",
            "nullable": true
          }
        }
      },
      "dbaas.logs.Url": {
        "type": "object",
        "description": "Web address",
        "properties": {
          "address": {
            "type": "string",
            "description": "Web URI",
            "readOnly": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/dbaas.logs.UrlTypeEnum"
              }
            ],
            "description": "Service type",
            "readOnly": true
          }
        }
      },
      "dbaas.logs.UrlTypeEnum": {
        "type": "string",
        "description": "Possible values for UrlTypeEnum",
        "enum": [
          "CONSOLE",
          "ELASTICSEARCH_API",
          "GRAYLOG_API",
          "GRAYLOG_WEBUI",
          "HTTP_GELF",
          "HTTP_TLS_GELF",
          "KIBANA_WEBUI",
          "OPENSEARCH_API",
          "OSD_WEBUI",
          "PROMETHEUS_API",
          "SERVICE_DOMAIN",
          "TCP_BEATS",
          "TCP_CAP_N_PROTO",
          "TCP_GELF",
          "TCP_LTSV_LINE",
          "TCP_LTSV_NUL",
          "TCP_RFC5424",
          "TCP_TLS_BEATS",
          "TCP_TLS_CAP_N_PROTO",
          "TCP_TLS_GELF",
          "TCP_TLS_LTSV_LINE",
          "TCP_TLS_LTSV_NUL",
          "TCP_TLS_RFC5424",
          "UDP_CAP_N_PROTO",
          "UDP_GELF",
          "UDP_LTSV_LINE",
          "UDP_LTSV_NUL",
          "UDP_RFC5424",
          "WEB_SOCKET"
        ]
      },
      "dbaas.logs.UserChangePasswordCreation": {
        "type": "object",
        "description": "Reset service password",
        "properties": {
          "password": {
            "type": "string",
            "description": "Password must be at least 12 characters long contain a number, an uppercase, a lowercase and a special letter",
            "format": "password"
          }
        },
        "required": [
          "password"
        ]
      },
      "duration": {
        "type": "string",
        "description": "Duration (e.g., P1Y2M3DT4H6M9S)",
        "example": "P1Y2M3DT4H6M9S"
      },
      "email": {
        "type": "string",
        "description": "Email address (e.g., api@ml.ovh.net)",
        "format": "email",
        "example": "api@ml.ovh.net"
      },
      "iam.ResourceMetadata": {
        "type": "object",
        "description": "IAM resource metadata embedded in services models",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Resource display name",
            "nullable": true,
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of the resource",
            "format": "uuid",
            "readOnly": true
          },
          "tags": {
            "type": "object",
            "description": "Resource tags. Tags that were internally computed are prefixed with ovh:",
            "nullable": true,
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          },
          "urn": {
            "type": "string",
            "description": "Unique resource name used in policies",
            "readOnly": true
          }
        }
      },
      "iam.resource.TagFilter": {
        "type": "object",
        "description": "Resource tag filter",
        "properties": {
          "operator": {
            "allOf": [
              {
                "$ref": "#/components/schemas/iam.resource.TagFilter.OperatorEnum"
              }
            ],
            "description": "Operator to use in order to filter on the value (defaults to 'EQ')",
            "nullable": true,
            "readOnly": true
          },
          "value": {
            "type": "string",
            "description": "Value to use in order to filter tags",
            "readOnly": true
          }
        }
      },
      "iam.resource.TagFilter.OperatorEnum": {
        "type": "string",
        "description": "Operator that can be used in order to filter resources tags",
        "enum": [
          "EQ",
          "EXISTS",
          "ILIKE",
          "LIKE",
          "NEQ",
          "NEXISTS"
        ]
      },
      "internationalPhoneNumber": {
        "type": "string",
        "description": "International phone number",
        "format": "phone-number"
      },
      "ip": {
        "type": "string",
        "description": "IP address (e.g., 192.0.2.0)",
        "format": "ipv4",
        "example": "192.0.2.0"
      },
      "ipBlock": {
        "type": "string",
        "description": "IP (v4 or v6) CIDR notation (e.g., 192.0.2.0/24)",
        "format": "ip-block",
        "example": "192.0.2.0/24"
      },
      "ipInterface": {
        "type": "string",
        "description": "IP address (e.g., 192.0.2.0)",
        "format": "ipv4",
        "example": "192.0.2.0"
      },
      "ipv4": {
        "type": "string",
        "description": "IPv4 address (e.g., 192.0.2.0)",
        "format": "ipv4",
        "example": "192.0.2.0"
      },
      "ipv4Block": {
        "type": "string",
        "description": "IPv4 CIDR notation (e.g., 192.0.2.0/24)",
        "format": "ipv4-block",
        "example": "192.0.2.0/24"
      },
      "ipv6": {
        "type": "string",
        "description": "IPv6 address (e.g., 2001:41d0:1:1994::1)",
        "format": "ipv6",
        "example": "2001:41d0:1:1994::1"
      },
      "ipv6Block": {
        "type": "string",
        "description": "IPv6 CIDR notation (e.g., 2001:41d0::/128)",
        "format": "ipv6-block",
        "example": "2001:41d0::/128"
      },
      "macAddress": {
        "type": "string",
        "description": "MAC address (e.g., 2001:4860:4860::8844)",
        "format": "mac-address",
        "example": "2001:4860:4860::8888. 2001:4860:4860::8844"
      },
      "phoneNumber": {
        "type": "string",
        "description": "Phone number",
        "format": "phone-number"
      },
      "service.RenewType": {
        "type": "object",
        "description": "Map a possible renew for a specific service",
        "properties": {
          "automatic": {
            "type": "boolean",
            "description": "The service is automatically renewed"
          },
          "deleteAtExpiration": {
            "type": "boolean",
            "description": "The service will be deleted at expiration"
          },
          "forced": {
            "type": "boolean",
            "description": "The service forced to be renewed"
          },
          "manualPayment": {
            "type": "boolean",
            "description": "The service needs to be manually renewed and paid",
            "nullable": true
          },
          "period": {
            "type": "integer",
            "description": "period of renew in month",
            "nullable": true
          }
        }
      },
      "service.RenewalTypeEnum": {
        "type": "string",
        "description": "Detailed renewal type of a service",
        "enum": [
          "automaticForcedProduct",
          "automaticV2012",
          "automaticV2014",
          "automaticV2016",
          "manual",
          "oneShot",
          "option"
        ]
      },
      "service.StateEnum": {
        "type": "string",
        "description": "service.StateEnum",
        "enum": [
          "autorenewInProgress",
          "expired",
          "inCreation",
          "ok",
          "pendingDebt",
          "unPaid"
        ]
      },
      "services.Service": {
        "type": "object",
        "description": "Details about a Service",
        "properties": {
          "canDeleteAtExpiration": {
            "type": "boolean",
            "description": "Indicates that the service can be set up to be deleted at expiration",
            "readOnly": true
          },
          "contactAdmin": {
            "type": "string",
            "readOnly": true
          },
          "contactBilling": {
            "type": "string",
            "readOnly": true
          },
          "contactTech": {
            "type": "string",
            "readOnly": true
          },
          "creation": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "domain": {
            "type": "string",
            "readOnly": true
          },
          "engagedUpTo": {
            "type": "string",
            "nullable": true,
            "format": "date",
            "readOnly": true
          },
          "expiration": {
            "type": "string",
            "format": "date",
            "readOnly": true
          },
          "possibleRenewPeriod": {
            "type": "array",
            "description": "All the possible renew period of your service in month",
            "nullable": true,
            "items": {
              "type": "integer"
            },
            "readOnly": true
          },
          "renew": {
            "allOf": [
              {
                "$ref": "#/components/schemas/service.RenewType"
              }
            ],
            "description": "Way of handling the renew",
            "nullable": true
          },
          "renewalType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/service.RenewalTypeEnum"
              }
            ],
            "readOnly": true
          },
          "serviceId": {
            "type": "integer",
            "readOnly": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/service.StateEnum"
              }
            ],
            "readOnly": true
          }
        }
      },
      "services.changeContact": {
        "type": "object",
        "description": "Service change contact payload",
        "properties": {
          "contactAdmin": {
            "type": "string",
            "description": "The contact to set as admin contact"
          },
          "contactBilling": {
            "type": "string",
            "description": "The contact to set as billing contact"
          },
          "contactTech": {
            "type": "string",
            "description": "The contact to set as tech contact"
          }
        }
      },
      "time": {
        "type": "string",
        "description": "Time (e.g., 15:04:05)",
        "format": "time",
        "example": "15:04:05"
      }
    },
    "securitySchemes": {
      "oAuth2AuthCode": {
        "type": "oauth2",
        "description": "Oauth2",
        "x-client-id": "1bb9c7df371741c0",
        "x-client-secret": "a5b4de870aca620d10fbf63cd18d205b",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://www.ovh.com/auth/oauth2/authorize",
            "tokenUrl": "https://www.ovh.com/auth/oauth2/token",
            "scopes": {
              "account/all": "Manage your account",
              "all": "Manage your whole account and all your services",
              "services/all": "Manage your services lifecycle and billing"
            }
          }
        }
      }
    }
  },
  "paths": {
    "/dbaas/logs": {
      "get": {
        "summary": "List available services",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "iamTags",
            "description": "Filter resources on IAM tags",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/iam.resource.TagFilter"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsServiceWithIAM"
      }
    },
    "/dbaas/logs/{serviceName}": {
      "get": {
        "summary": "Returns the service object of connected identity.",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.ServiceWithIAM"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceNotFound": {
                    "value": {
                      "class": "Client::NotFound::ServiceNotFound",
                      "message": "Cannot find service, neither 'serviceId' nor 'serviceName' found"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update the service properties",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMNoRevert": {
                    "value": {
                      "class": "Client::Forbidden::IAMNoRevert",
                      "message": "IAM has been already enabled on this service, you can't disable it."
                    }
                  },
                  "Client::Forbidden::IAMNotAllowed": {
                    "value": {
                      "class": "Client::Forbidden::IAMNotAllowed",
                      "message": "IAM migration is not allowed for this service"
                    }
                  },
                  "Client::Forbidden::ServiceEligibilityIAM": {
                    "value": {
                      "class": "Client::Forbidden::ServiceEligibilityIAM",
                      "message": "This service still has {{.nb}} {{.type}}(s), please delete them before migrating"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceNotFound": {
                    "value": {
                      "class": "Client::NotFound::ServiceNotFound",
                      "message": "Cannot find service, neither 'serviceId' nor 'serviceName' found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::ServiceAlreadyMigrated": {
                    "value": {
                      "class": "Client::Conflict::ServiceAlreadyMigrated",
                      "message": "Service already migrated, nothing to do!"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/changeContact": {
      "post": {
        "summary": "Launch a contact change procedure",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/services.changeContact"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:changeContact",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/cluster": {
      "get": {
        "summary": "Returns the list of allowed cluster",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "namePattern",
            "description": "Filter by name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:cluster/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsCluster"
      }
    },
    "/dbaas/logs/{serviceName}/cluster/{clusterId}": {
      "get": {
        "summary": "Returns details of an allowed cluster",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "Cluster ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Cluster"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ClusterDoesNotExists",
                      "message": "Cluster '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:cluster/get",
            "required": true
          }
        ],
        "x-response-identifier": "clusterId"
      },
      "put": {
        "summary": "Update details of an allowed cluster",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "Cluster ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.ClusterUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ServiceNotMigrated": {
                    "value": {
                      "class": "Client::Forbidden::ServiceNotMigrated",
                      "message": "Service '{{.serviceName}}' ({{.username}}) is not located on '{{.clusterId}}', please migrate it before"
                    }
                  },
                  "Client::Forbidden::TooManyActive": {
                    "value": {
                      "class": "Client::Forbidden::TooManyActive",
                      "message": "Too many active {{.targetType}} ({{.current}})"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ClusterDoesNotExists",
                      "message": "Cluster '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:cluster/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/cluster/{clusterId}/retention": {
      "get": {
        "summary": "List all the retention ID available for a given cluster",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "Cluster ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::AccessDenied": {
                    "value": {
                      "class": "Client::Forbidden::AccessDenied",
                      "message": "Cluster '{{.clusterId}}' access denied to {{.serviceName}}, message sent to admin"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ClusterDoesNotExists",
                      "message": "Cluster '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:cluster/retention/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsClusterRetention"
      }
    },
    "/dbaas/logs/{serviceName}/cluster/{clusterId}/retention/{retentionId}": {
      "get": {
        "summary": "Returns details of a retention",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "clusterId",
            "description": "Cluster ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "retentionId",
            "description": "Retention ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.ClusterRetention"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::AccessDenied": {
                    "value": {
                      "class": "Client::Forbidden::AccessDenied",
                      "message": "Cluster '{{.clusterId}}' access denied to {{.serviceName}}, message sent to admin"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ClusterDoesNotExists",
                      "message": "Cluster '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ClusterRetentionNotFound": {
                    "value": {
                      "class": "Client::NotFound::ClusterRetentionNotFound",
                      "message": "Cluster retention '{{.retentionId}}' not found for cluster '{{.clusterId}}'"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:cluster/retention/get",
            "required": true
          }
        ],
        "x-response-identifier": "retentionId"
      }
    },
    "/dbaas/logs/{serviceName}/encryptionKey": {
      "get": {
        "summary": "Return the list of registred encryption keys",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "titlePattern",
            "description": "Filter by title (like)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:encryptionKey/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsEncryptionKey"
      },
      "post": {
        "summary": "Add a new encryption key",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.EncryptionKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlreadyExists",
                      "message": "{{.targetType}} '{{.targetCriteria}}' already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:encryptionKey/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/encryptionKey/{encryptionKeyId}": {
      "delete": {
        "summary": "Delete the specified encryption key",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "encryptionKeyId",
            "description": "Encryption key ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::EncryptionKeyDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::EncryptionKeyDoesNotExists",
                      "message": "Encryption key '{{.criteria}}' does not exist or is not owned by you"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:encryptionKey/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Return details of an encryption key",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "encryptionKeyId",
            "description": "Encryption key ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.EncryptionKey"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::EncryptionKeyDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::EncryptionKeyDoesNotExists",
                      "message": "Encryption key '{{.criteria}}' does not exist or is not owned by you"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:encryptionKey/get",
            "required": true
          }
        ],
        "x-response-identifier": "encryptionKeyId"
      }
    },
    "/dbaas/logs/{serviceName}/input": {
      "get": {
        "summary": "Returns the list of registered input attached to the logged user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "titlePattern",
            "description": "Filter by title (like)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsInput"
      },
      "post": {
        "summary": "Register a new input object",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.InputCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::InputDenyForCluster": {
                    "value": {
                      "class": "Client::Forbidden::InputDenyForCluster",
                      "message": "Input order is denied on {{.cluster_type}} clusters"
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::NotOnSameCluster": {
                    "value": {
                      "class": "Client::Forbidden::NotOnSameCluster",
                      "message": "{{.item1Type}} does not belongs on the same cluster as the given {{.item2Type}} ('{{.item1Cluster}}' <-> '{{.item2Cluster}}')"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputEngineDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputEngineDoesNotExists",
                      "message": "Input engine '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/engine": {
      "get": {
        "summary": "Returns the list of available input engines",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/engine/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsEngine"
      }
    },
    "/dbaas/logs/{serviceName}/input/engine/{engineId}": {
      "get": {
        "summary": "Returns details of specified input engine",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "engineId",
            "description": "Engine ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Engine"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputEngineDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputEngineDoesNotExists",
                      "message": "Input engine '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/engine/get",
            "required": true
          }
        ],
        "x-response-identifier": "engineId"
      }
    },
    "/dbaas/logs/{serviceName}/input/engine/{engineId}/helper": {
      "get": {
        "summary": "Return the list of available helpers for the given input engine",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "engineId",
            "description": "Engine ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/engine/helper/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsHelper"
      }
    },
    "/dbaas/logs/{serviceName}/input/engine/{engineId}/helper/{helperId}": {
      "get": {
        "summary": "Returns details of specified input engine helper",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "engineId",
            "description": "Engine ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "helperId",
            "description": "Helper ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Helper"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::HelperDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::HelperDoesNotExists",
                      "message": "Helper '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/engine/helper/get",
            "required": true
          }
        ],
        "x-response-identifier": "helperId"
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}": {
      "delete": {
        "summary": "Remove the specified input object",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IncompatibleStatusForInput": {
                    "value": {
                      "class": "Client::Forbidden::IncompatibleStatusForInput",
                      "message": "Input status not compatible with the action '{{.action}}', allowed: {{.allowed}}"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Input"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/get",
            "required": true
          }
        ],
        "x-response-identifier": "inputId"
      },
      "put": {
        "summary": "Update information of specified input object",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.InputUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::NotOnSameCluster": {
                    "value": {
                      "class": "Client::Forbidden::NotOnSameCluster",
                      "message": "{{.item1Type}} does not belongs on the same cluster as the given {{.item2Type}} ('{{.item1Cluster}}' <-> '{{.item2Cluster}}')"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/action": {
      "get": {
        "summary": "Returns actions of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.InputAction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/action/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/configtest": {
      "post": {
        "summary": "Validate configuration of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/configtest/validate",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/configtest/result": {
      "get": {
        "summary": "Returns the config test operation result",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.TestResult"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/configtest/result/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/configuration/flowgger": {
      "get": {
        "summary": "Returns the flowgger configuration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.FlowggerConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::InvalidInputEngine": {
                    "value": {
                      "class": "Client::NotFound::InvalidInputEngine",
                      "message": "Input '{{.inputId}}' engine version mismatch ('{{.engine}}' <-> '{{.required}}')"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/configuration/flowgger/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update the flowgger configuration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.InputConfigurationFlowggerUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::InvalidInputEngine": {
                    "value": {
                      "class": "Client::NotFound::InvalidInputEngine",
                      "message": "Input '{{.inputId}}' engine version mismatch ('{{.engine}}' <-> '{{.required}}')"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/configuration/flowgger/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/configuration/logstash": {
      "get": {
        "summary": "Returns the logstash configuration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogstashConfiguration"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::InvalidInputEngine": {
                    "value": {
                      "class": "Client::NotFound::InvalidInputEngine",
                      "message": "Input '{{.inputId}}' engine version mismatch ('{{.engine}}' <-> '{{.required}}')"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/configuration/logstash/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update the logstash configuration",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.InputConfigurationLogstashUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::InputNotAvailable": {
                    "value": {
                      "class": "Client::Forbidden::InputNotAvailable",
                      "message": "Input '{{.inputId}}' is busy, An other action is under process. Please retry in a few seconds."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::InvalidInputEngine": {
                    "value": {
                      "class": "Client::NotFound::InvalidInputEngine",
                      "message": "Input '{{.inputId}}' engine version mismatch ('{{.engine}}' <-> '{{.required}}')"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/configuration/logstash/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/end": {
      "post": {
        "summary": "Schedule the end of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IncompatibleStatusForInput": {
                    "value": {
                      "class": "Client::Forbidden::IncompatibleStatusForInput",
                      "message": "Input status not compatible with the action '{{.action}}', allowed: {{.allowed}}"
                    }
                  },
                  "Client::Forbidden::InputNotAvailable": {
                    "value": {
                      "class": "Client::Forbidden::InputNotAvailable",
                      "message": "Input '{{.inputId}}' is busy, An other action is under process. Please retry in a few seconds."
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/end",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/logs/url": {
      "post": {
        "summary": "Generate a temporary url to retrieve input logs",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.TemporaryLogsLink"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/logs/url/generate",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/restart": {
      "post": {
        "summary": "Schedule the restart of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IncompatibleStatusForInput": {
                    "value": {
                      "class": "Client::Forbidden::IncompatibleStatusForInput",
                      "message": "Input status not compatible with the action '{{.action}}', allowed: {{.allowed}}"
                    }
                  },
                  "Client::Forbidden::InputNotAvailable": {
                    "value": {
                      "class": "Client::Forbidden::InputNotAvailable",
                      "message": "Input '{{.inputId}}' is busy, An other action is under process. Please retry in a few seconds."
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/restart",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/start": {
      "post": {
        "summary": "Schedule the start of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IncompatibleStatusForInput": {
                    "value": {
                      "class": "Client::Forbidden::IncompatibleStatusForInput",
                      "message": "Input status not compatible with the action '{{.action}}', allowed: {{.allowed}}"
                    }
                  },
                  "Client::Forbidden::InputNotAvailable": {
                    "value": {
                      "class": "Client::Forbidden::InputNotAvailable",
                      "message": "Input '{{.inputId}}' is busy, An other action is under process. Please retry in a few seconds."
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/start",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/input/{inputId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified input",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inputId",
            "description": "Input ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::InputDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::InputDoesNotExists",
                      "message": "Input '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:input/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/metrics": {
      "get": {
        "summary": "Returns Metrics credentials",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.ServiceMetric"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceNotFound": {
                    "value": {
                      "class": "Client::NotFound::ServiceNotFound",
                      "message": "Cannot find service, neither 'serviceId' nor 'serviceName' found"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:metrics/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/operation": {
      "get": {
        "summary": "Latest operations",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:operation/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsOperation"
      }
    },
    "/dbaas/logs/{serviceName}/operation/{operationId}": {
      "get": {
        "summary": "Returns details of specified operation",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "operationId",
            "description": "Operation ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::OperationDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::OperationDoesNotExists",
                      "message": "Operation '{{.operationId}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:operation/get",
            "required": true
          }
        ],
        "x-response-identifier": "operationId"
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/dashboard": {
      "get": {
        "summary": "Returns the list of graylog dashboards",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "titlePattern",
            "description": "Filter by title (like)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsDashboard"
      },
      "post": {
        "summary": "Register a new graylog dashboard",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogDashboardCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}": {
      "delete": {
        "summary": "Remove specified graylog dashboard",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "Dashboard ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::DashboardDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::DashboardDoesNotExists",
                      "message": "Dashboard '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified graylog dashboard",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "Dashboard ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Dashboard"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::DashboardDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::DashboardDoesNotExists",
                      "message": "Dashboard '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/get",
            "required": true
          }
        ],
        "x-response-identifier": "dashboardId"
      },
      "put": {
        "summary": "Update information of specified graylog dashboard",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "Dashboard ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogDashboardUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::DashboardDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::DashboardDoesNotExists",
                      "message": "Dashboard '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/duplicate": {
      "post": {
        "summary": "Copy all widgets from specified dashboard to a new one",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "Dashboard ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogDashboardDuplicateCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::DashboardDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::DashboardDoesNotExists",
                      "message": "Dashboard '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/duplicate",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/dashboard/{dashboardId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified graylog dashboard",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "dashboardId",
            "description": "Dashboard ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::DashboardDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::DashboardDoesNotExists",
                      "message": "Dashboard '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/dashboard/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream": {
      "get": {
        "summary": "Returns the list of graylog streams",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "titlePattern",
            "description": "Filter by title (like)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsStream"
      },
      "post": {
        "summary": "Register a new graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogStreamCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ColdStorageDenyForCluster": {
                    "value": {
                      "class": "Client::Forbidden::ColdStorageDenyForCluster",
                      "message": "Stream coldstorage is denied on {{.cluster_type}} clusters"
                    }
                  },
                  "Client::Forbidden::ColdStorageDenyWithoutKey": {
                    "value": {
                      "class": "Client::Forbidden::ColdStorageDenyWithoutKey",
                      "message": "Stream coldstorage is denied on {{.cluster_type}} clusters without encryption key"
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::ParentStreamLocked": {
                    "value": {
                      "class": "Client::Forbidden::ParentStreamLocked",
                      "message": "A locked stream cannot be used as a parent"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  },
                  "Client::Forbidden::SettingOnlyForCluster": {
                    "value": {
                      "class": "Client::Forbidden::SettingOnlyForCluster",
                      "message": "'{{.setting}}' can only be set on {{.cluster_type}} clusters"
                    }
                  },
                  "Client::Forbidden::SubStreamColdstorageAddRules": {
                    "value": {
                      "class": "Client::Forbidden::SubStreamColdstorageAddRules",
                      "message": "Substreams cannot be indexed immediately, please register some rules and then enable indexation by updating entry"
                    }
                  },
                  "Client::Forbidden::SubStreamColdstorageIndexingMaxSize": {
                    "value": {
                      "class": "Client::Forbidden::SubStreamColdstorageIndexingMaxSize",
                      "message": "Substreams cannot be indexed immediately, indexingMaxSize MUST be Null"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterRetentionNotFound": {
                    "value": {
                      "class": "Client::NotFound::ClusterRetentionNotFound",
                      "message": "Cluster retention '{{.retentionId}}' not found for cluster '{{.clusterId}}'"
                    }
                  },
                  "Client::NotFound::EncryptionKeyDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::EncryptionKeyDoesNotExists",
                      "message": "Encryption key '{{.criteria}}' does not exist or is not owned by you"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          },
          "501": {
            "description": "Error 501 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Server::NotImplemented::SubStreamColdstorage": {
                    "value": {
                      "class": "Server::NotImplemented::SubStreamColdstorage",
                      "message": "Coldstorage is not available yet on sub-streams"
                    }
                  },
                  "Server::NotImplemented::SubStreamColdstorageOnAccount": {
                    "value": {
                      "class": "Server::NotImplemented::SubStreamColdstorageOnAccount",
                      "message": "Cannot create substream on '{{.current}}' account, allowed on '{{.required}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}": {
      "delete": {
        "summary": "Remove specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  },
                  "Client::Forbidden::StreamIsParent": {
                    "value": {
                      "class": "Client::Forbidden::StreamIsParent",
                      "message": "Stream '{{.title}}' has {{.nbChildren}} child(ren): {{.children}}"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Stream"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/get",
            "required": true
          }
        ],
        "x-response-identifier": "streamId"
      },
      "put": {
        "summary": "Update information of specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogStreamUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ColdStorageDenyForCluster": {
                    "value": {
                      "class": "Client::Forbidden::ColdStorageDenyForCluster",
                      "message": "Stream coldstorage is denied on {{.cluster_type}} clusters"
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::NoRuleSet": {
                    "value": {
                      "class": "Client::Forbidden::NoRuleSet",
                      "message": "Cannot enable indexing if no rule set!"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterRetentionNotFound": {
                    "value": {
                      "class": "Client::NotFound::ClusterRetentionNotFound",
                      "message": "Cluster retention '{{.retentionId}}' not found for cluster '{{.clusterId}}'"
                    }
                  },
                  "Client::NotFound::EncryptionKeyDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::EncryptionKeyDoesNotExists",
                      "message": "Encryption key '{{.criteria}}' does not exist or is not owned by you"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert": {
      "get": {
        "summary": "Returns the list of configured alerts of specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/alert/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsStreamAlertCondition"
      },
      "post": {
        "summary": "Register a new alert on specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogStreamAlertCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlertAlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlertAlreadyExists",
                      "message": "An alert with the same criteria already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/alert/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/alert/{alertId}": {
      "delete": {
        "summary": "Remove alert from specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alertId",
            "description": "Alert ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AlertDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AlertDoesNotExists",
                      "message": "Stream alert '{{.alertId}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/alert/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified graylog stream alert",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alertId",
            "description": "Alert ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.StreamAlertCondition"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AlertDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AlertDoesNotExists",
                      "message": "Stream alert '{{.alertId}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/alert/get",
            "required": true
          }
        ],
        "x-response-identifier": "alertId"
      },
      "put": {
        "summary": "Update alert information of specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alertId",
            "description": "Alert ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogStreamAlertUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlertAlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlertAlreadyExists",
                      "message": "An alert with the same criteria already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/alert/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive": {
      "get": {
        "summary": "Returns the list of archives",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/archive/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsArchive"
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}": {
      "get": {
        "summary": "Returns details of specified archive",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "archiveId",
            "description": "Archive ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Archive"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ArchiveDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ArchiveDoesNotExists",
                      "message": "Archive '{{.archiveId}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/archive/get",
            "required": true
          }
        ],
        "x-response-identifier": "archiveId"
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/encryptionKey": {
      "get": {
        "summary": "Get the list of encryption keys used to encrypt the archive",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "archiveId",
            "description": "Archive ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ArchiveDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ArchiveDoesNotExists",
                      "message": "Archive '{{.archiveId}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/archive/encryptionKey/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/archive/{archiveId}/url": {
      "post": {
        "summary": "Get a public temporary URL to access the archive",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "archiveId",
            "description": "Archive ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.ArchiveUrl"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ArchiveDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ArchiveDoesNotExists",
                      "message": "Archive '{{.archiveId}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::URLDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::URLDoesNotExists",
                      "message": "URL '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/archive/url/generate",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule": {
      "get": {
        "summary": "Returns the list of rules of specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/rule/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsStreamRule"
      },
      "post": {
        "summary": "Register a new rule on specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputGraylogStreamRuleCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  },
                  "Client::Forbidden::StreamLocked": {
                    "value": {
                      "class": "Client::Forbidden::StreamLocked",
                      "message": "You are not allowed to act on this stream as long as it is locked"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::RuleAlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::RuleAlreadyExists",
                      "message": "A rule with the same parameters already exists ({{.ruleId}})"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/rule/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/rule/{ruleId}": {
      "delete": {
        "summary": "Remove specified graylog stream rule",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "description": "Rule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamRuleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamRuleDoesNotExists",
                      "message": "Stream '{{.streamId}}' rule '{{.ruleId}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/rule/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified graylog stream rule",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "ruleId",
            "description": "Rule ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.StreamRule"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamRuleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamRuleDoesNotExists",
                      "message": "Stream '{{.streamId}}' rule '{{.ruleId}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/rule/get",
            "required": true
          }
        ],
        "x-response-identifier": "ruleId"
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription": {
      "get": {
        "summary": "Returns the list of subscriptions targeting a specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "resourceName",
            "description": "Filter by resource name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resourceType",
            "description": "Filter by resource type (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/subscription/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsLogSubscription"
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/subscription/{subscriptionId}": {
      "delete": {
        "summary": "Delete a specified subscription targeting a specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::SubscriptionDoesNotExist": {
                    "value": {
                      "class": "Client::NotFound::SubscriptionDoesNotExist",
                      "message": "Subscription '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/subscription/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified graylog stream subscription",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.LogSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::SubscriptionDoesNotExist": {
                    "value": {
                      "class": "Client::NotFound::SubscriptionDoesNotExist",
                      "message": "Subscription '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "blue",
            "label": "Beta version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/subscription/get",
            "required": true
          }
        ],
        "x-response-identifier": "subscriptionId"
      }
    },
    "/dbaas/logs/{serviceName}/output/graylog/stream/{streamId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified graylog stream",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/graylog/stream/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/metric/tenant": {
      "get": {
        "summary": "List service's metric tenants",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsMetricTenant"
      },
      "post": {
        "summary": "Create a metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.NewMetricTenant"
              },
              "examples": {
                "standard": {
                  "value": {
                    "description": "Those are my business metrics",
                    "maxSeries": 100000,
                    "retentionId": "fd13fc68-70cb-4bfb-9e98-bbc32380a19d",
                    "title": "My metric tenant"
                  },
                  "summary": "Create a standard metric tenant"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/metric/tenant/{tenantId}": {
      "delete": {
        "summary": "Delete a metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::NoIAMService": {
                    "value": {
                      "class": "Client::Forbidden::NoIAMService",
                      "message": "IAM is disabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Get the details about a metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.MetricTenant"
                },
                "examples": {
                  "standard": {
                    "value": {
                      "createdAt": "2020-08-11T00:40:57.343148+02:00",
                      "deliveryStatus": "READY",
                      "description": "Those are my business metrics",
                      "maxSeries": 100000,
                      "retentionId": "fd13fc68-70cb-4bfb-9e98-bbc32380a19d",
                      "tenantId": "194509dc-6b30-4000-8dec-c9ace2c8db01",
                      "title": "My metric tenant",
                      "updatedAt": "2024-10-24T17:54:16.641669+02:00"
                    },
                    "summary": "A standard metric tenant"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/get",
            "required": true
          }
        ],
        "x-response-identifier": "tenantId"
      },
      "put": {
        "summary": "Update a metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.NewMetricTenant"
              },
              "examples": {
                "standard": {
                  "value": {
                    "description": "Those are my business metrics",
                    "maxSeries": 100000,
                    "retentionId": "fd13fc68-70cb-4bfb-9e98-bbc32380a19d",
                    "title": "My metric tenant"
                  },
                  "summary": "Update a standard metric tenant"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::MetricTenantIsBusy": {
                    "value": {
                      "class": "Client::Forbidden::MetricTenantIsBusy",
                      "message": "Metric tenant '{{.criteria}}' is busy. Please retry later."
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TitleAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TitleAlreadyUsed",
                      "message": "Title '{{.title}}' is already used"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/metric/tenant/{tenantId}/subscription": {
      "get": {
        "summary": "Returns the list of subscriptions targeting a specified metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "resourceName",
            "description": "Filter by resource name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "resourceType",
            "description": "Filter by resource type (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/subscription/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsMetricSubscription"
      }
    },
    "/dbaas/logs/{serviceName}/output/metric/tenant/{tenantId}/subscription/{subscriptionId}": {
      "delete": {
        "summary": "Delete a specified subscription targeting a specified metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::SubscriptionDoesNotExist": {
                    "value": {
                      "class": "Client::NotFound::SubscriptionDoesNotExist",
                      "message": "Subscription '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/subscription/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified metric tenant subscription",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "subscriptionId",
            "description": "Subscription ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.MetricSubscription"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::SubscriptionDoesNotExist": {
                    "value": {
                      "class": "Client::NotFound::SubscriptionDoesNotExist",
                      "message": "Subscription '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/subscription/get",
            "required": true
          }
        ],
        "x-response-identifier": "subscriptionId"
      }
    },
    "/dbaas/logs/{serviceName}/output/metric/tenant/{tenantId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified metric tenant",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tenantId",
            "description": "Tenant ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                },
                "examples": {
                  "standard": {
                    "value": [
                      {
                        "address": "https://tenant-q7jesjkp-gra1.logs.ovh.com",
                        "type": "PROMETHEUS_API"
                      }
                    ],
                    "summary": "A prometheus api url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::MetricTenantDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::MetricTenantDoesNotExists",
                      "message": "Metric tenant '{{.criteria}}' not found"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "orange",
            "label": "Internal use only"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/metric/tenant/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias": {
      "get": {
        "summary": "Returns the list of alias for connected user",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "namePattern",
            "description": "Filter by name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsAlias"
      },
      "post": {
        "summary": "Register a new OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputOpenSearchAliasCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ClusterDoesNotExists",
                      "message": "Cluster '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlreadyExists",
                      "message": "{{.targetType}} '{{.targetCriteria}}' already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}": {
      "delete": {
        "summary": "Remove specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Alias"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/get",
            "required": true
          }
        ],
        "x-response-identifier": "aliasId"
      },
      "put": {
        "summary": "Update specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputOpenSearchAliasUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index": {
      "get": {
        "summary": "Returns the list of OpenSearch indexes attached to specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/index/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Attach a OpenSearch index to specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputOpenSearchAliasIndexCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IndexAlreadyLinked": {
                    "value": {
                      "class": "Client::Forbidden::IndexAlreadyLinked",
                      "message": "Index '{{.indexId}}' is already linked to '{{.alias}}'"
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::NotOnSameCluster": {
                    "value": {
                      "class": "Client::Forbidden::NotOnSameCluster",
                      "message": "{{.item1Type}} does not belongs on the same cluster as the given {{.item2Type}} ('{{.item1Cluster}}' <-> '{{.item2Cluster}}')"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlreadyExists",
                      "message": "{{.targetType}} '{{.targetCriteria}}' already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/index/attach",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/index/{indexId}": {
      "delete": {
        "summary": "Detach a OpenSearch index from specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "indexId",
            "description": "Index ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/index/detach",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream": {
      "get": {
        "summary": "Returns the list of Graylog streams attached to specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/stream/get",
            "required": true
          }
        ]
      },
      "post": {
        "summary": "Attach a Graylog stream to specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputOpenSearchAliasStreamCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::NotOnSameCluster": {
                    "value": {
                      "class": "Client::Forbidden::NotOnSameCluster",
                      "message": "{{.item1Type}} does not belongs on the same cluster as the given {{.item2Type}} ('{{.item1Cluster}}' <-> '{{.item2Cluster}}')"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::StreamAlreadyLinked": {
                    "value": {
                      "class": "Client::Forbidden::StreamAlreadyLinked",
                      "message": "Stream '{{.streamId}}' is already linked to '{{.alias}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/stream/attach",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/stream/{streamId}": {
      "delete": {
        "summary": "Detach a Graylog stream from specified OpenSearch alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "streamId",
            "description": "Stream ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/stream/detach",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/alias/{aliasId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified alias",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "aliasId",
            "description": "Alias ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/alias/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/index": {
      "get": {
        "summary": "Returns the list of OpenSearch indexes",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "namePattern",
            "description": "Filter by name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/index/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsIndex"
      },
      "post": {
        "summary": "Register a new OpenSearch index",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputOpenSearchIndexCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlreadyExists",
                      "message": "{{.targetType}} '{{.targetCriteria}}' already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/index/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}": {
      "delete": {
        "summary": "Remove specified OpenSearch index",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexId",
            "description": "Index ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/index/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns specified OpenSearch index",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexId",
            "description": "Index ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Index"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/index/get",
            "required": true
          }
        ],
        "x-response-identifier": "indexId"
      },
      "put": {
        "summary": "Update specified OpenSearch index",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexId",
            "description": "Index ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OutputOpenSearchIndexUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/index/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/index/{indexId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified index",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "indexId",
            "description": "Index ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/index/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/osd": {
      "get": {
        "summary": "Returns the list of OpenSearch Dashboards instances",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/osd/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsOsd"
      },
      "post": {
        "summary": "Register a new OpenSearch Dashboards instance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OsdCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/osd/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}": {
      "delete": {
        "summary": "Remove specified OpenSearch Dashboards instance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "osdId",
            "description": "Osd ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/osd/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns specified OpenSearch Dashboards instance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "osdId",
            "description": "Osd ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Osd"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/osd/get",
            "required": true
          }
        ],
        "x-response-identifier": "osdId"
      },
      "put": {
        "summary": "Update specified OpenSearch Dashboards instance",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "osdId",
            "description": "Osd ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.OsdUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/osd/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/output/opensearch/osd/{osdId}/url": {
      "get": {
        "summary": "Returns the list of urls of specified OpenSearch Dashboards",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "osdId",
            "description": "Osd ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:output/opensearch/osd/url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role": {
      "get": {
        "summary": "Returns the list of roles",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "namePattern",
            "description": "Filter by name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsRole"
      },
      "post": {
        "summary": "Register a new role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RoleCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::ItemQuotaReached": {
                    "value": {
                      "class": "Client::Forbidden::ItemQuotaReached",
                      "message": "{{.targetType}} quota reached for service '{{.serviceName}}' owned by '{{.username}}'! ({{.current}}, allowed: {{.allowed}})"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::AlreadyExists": {
                    "value": {
                      "class": "Client::Conflict::AlreadyExists",
                      "message": "{{.targetType}} '{{.targetCriteria}}' already exists"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}": {
      "delete": {
        "summary": "Remove specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Role"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/get",
            "required": true
          }
        ],
        "x-response-identifier": "roleId"
      },
      "put": {
        "summary": "Update information of specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RoleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/member": {
      "get": {
        "summary": "Returns the member list of specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/member/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsMember"
      },
      "post": {
        "summary": "Append user into the member list of specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RoleMemberCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::ActionDisabledOnMySelf": {
                    "value": {
                      "class": "Client::Forbidden::ActionDisabledOnMySelf",
                      "message": "You are not allowed to perform this action on yourself"
                    }
                  },
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/member/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/member/{username}": {
      "delete": {
        "summary": "Remove user from the member list of specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "description": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::NotAMemberOfRole": {
                    "value": {
                      "class": "Client::NotFound::NotAMemberOfRole",
                      "message": "'{{.username}}' is not a member of '{{.roleId}}'"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/member/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns the member metadata",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "description": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Member"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::NotAMemberOfRole": {
                    "value": {
                      "class": "Client::NotFound::NotAMemberOfRole",
                      "message": "'{{.username}}' is not a member of '{{.roleId}}'"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/member/get",
            "required": true
          }
        ],
        "x-response-identifier": "username"
      },
      "put": {
        "summary": "Update the member metadata",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "username",
            "description": "Username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RoleMemberUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::NotAMemberOfRole": {
                    "value": {
                      "class": "Client::NotFound::NotAMemberOfRole",
                      "message": "'{{.username}}' is not a member of '{{.roleId}}'"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/member/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission": {
      "get": {
        "summary": "Returns the list of permissions of specified role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsPermission"
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission/alias": {
      "post": {
        "summary": "Append a elasticsearch alias permission to role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RolePermissionAliasCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::AliasDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::AliasDoesNotExists",
                      "message": "Alias '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::PermissionAlreadySet": {
                    "value": {
                      "class": "Client::Conflict::PermissionAlreadySet",
                      "message": "Permission to {{.targetType}} '{{.targetId}}' already set on role '{{.roleId}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/alias/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission/dashboard": {
      "post": {
        "summary": "Append a graylog dashboard permission to role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RolePermissionDashboardCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::DashboardDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::DashboardDoesNotExists",
                      "message": "Dashboard '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::PermissionAlreadySet": {
                    "value": {
                      "class": "Client::Conflict::PermissionAlreadySet",
                      "message": "Permission to {{.targetType}} '{{.targetId}}' already set on role '{{.roleId}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/dashboard/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission/index": {
      "post": {
        "summary": "Append a elasticsearch index permission to role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RolePermissionIndexCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::IndexDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::IndexDoesNotExists",
                      "message": "Index '{{.criteria}}' does not exists"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::PermissionAlreadySet": {
                    "value": {
                      "class": "Client::Conflict::PermissionAlreadySet",
                      "message": "Permission to {{.targetType}} '{{.targetId}}' already set on role '{{.roleId}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/index/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission/osd": {
      "post": {
        "summary": "Append a OpenSearch Dashboards permission to role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RolePermissionOsdCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::PermissionAlreadySet": {
                    "value": {
                      "class": "Client::Conflict::PermissionAlreadySet",
                      "message": "Permission to {{.targetType}} '{{.targetId}}' already set on role '{{.roleId}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/osd/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission/stream": {
      "post": {
        "summary": "Append a graylog stream permission to role",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.RolePermissionStreamCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::StreamDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::StreamDoesNotExists",
                      "message": "Stream '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::PermissionAlreadySet": {
                    "value": {
                      "class": "Client::Conflict::PermissionAlreadySet",
                      "message": "Permission to {{.targetType}} '{{.targetId}}' already set on role '{{.roleId}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/stream/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/role/{roleId}/permission/{permissionId}": {
      "delete": {
        "summary": "Remove specified permission",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "permissionId",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::PermissionDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::PermissionDoesNotExists",
                      "message": "Permission '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns details of specified permission",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "permissionId",
            "description": "Permission ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "roleId",
            "description": "Role ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Permission"
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::PermissionDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::PermissionDoesNotExists",
                      "message": "Permission '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::RoleDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::RoleDoesNotExists",
                      "message": "Role '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:role/permission/get",
            "required": true
          }
        ],
        "x-response-identifier": "permissionId"
      }
    },
    "/dbaas/logs/{serviceName}/serviceInfos": {
      "get": {
        "summary": "Get service information",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/services.Service"
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:serviceInfos/get",
            "required": true
          }
        ]
      },
      "put": {
        "summary": "Update service information",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/services.Service"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:serviceInfos/edit",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/token": {
      "get": {
        "summary": "Returns the list of service tokens",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "namePattern",
            "description": "Filter by name (like)",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:token/get",
            "required": true
          }
        ],
        "x-expanded-response": "DbaasLogsToken"
      },
      "post": {
        "summary": "Add a new token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.TokenCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::AccessDenied": {
                    "value": {
                      "class": "Client::Forbidden::AccessDenied",
                      "message": "Cluster '{{.clusterId}}' access denied to {{.serviceName}}, message sent to admin"
                    }
                  },
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ClusterDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ClusterDoesNotExists",
                      "message": "Cluster '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Error 409 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Conflict::TokenNameAlreadyUsed": {
                    "value": {
                      "class": "Client::Conflict::TokenNameAlreadyUsed",
                      "message": "Token name '{{.name}}' already used by '{{.serviceName}}'"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:token/create",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/token/{tokenId}": {
      "delete": {
        "summary": "Delete the specified token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tokenId",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  },
                  "Client::Forbidden::OnlyOwnerCanPerformAction": {
                    "value": {
                      "class": "Client::Forbidden::OnlyOwnerCanPerformAction",
                      "message": "Only the owner is allowed to perform this action"
                    }
                  },
                  "Client::Forbidden::ServiceUnavailable": {
                    "value": {
                      "class": "Client::Forbidden::ServiceUnavailable",
                      "message": "Service '{{.serviceName}}' unavailable, status is '{{.status}}'"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::TokenDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::TokenDoesNotExists",
                      "message": "Token '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:token/delete",
            "required": true
          }
        ]
      },
      "get": {
        "summary": "Returns the specified token",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "tokenId",
            "description": "Token ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Token"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::ServiceDoesNotExists",
                      "message": "Service '{{.criteria}}' doesn't exist"
                    }
                  },
                  "Client::NotFound::TokenDoesNotExists": {
                    "value": {
                      "class": "Client::NotFound::TokenDoesNotExists",
                      "message": "Token '{{.criteria}}' doesn't exist"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:token/get",
            "required": true
          }
        ],
        "x-response-identifier": "tokenId"
      }
    },
    "/dbaas/logs/{serviceName}/url": {
      "get": {
        "summary": "Returns platform useful urls",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dbaas.logs.Url"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceNotFound": {
                    "value": {
                      "class": "Client::NotFound::ServiceNotFound",
                      "message": "Cannot find service, neither 'serviceId' nor 'serviceName' found"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:url/get",
            "required": true
          }
        ]
      }
    },
    "/dbaas/logs/{serviceName}/user/changePassword": {
      "post": {
        "summary": "Initiate a password change procedure.",
        "security": [
          {
            "oAuth2AuthCode": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "serviceName",
            "description": "Service name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dbaas.logs.UserChangePasswordCreation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dbaas.logs.Operation"
                }
              }
            }
          },
          "403": {
            "description": "Error 403 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::Forbidden::Busy": {
                    "value": {
                      "class": "Client::Forbidden::Busy",
                      "message": "An operation is already running for this service: {{.operations}}. Please retry later."
                    }
                  },
                  "Client::Forbidden::IAMService": {
                    "value": {
                      "class": "Client::Forbidden::IAMService",
                      "message": "IAM is enabled on this service so this action is no more permitted"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Error 404 response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Common error model",
                  "properties": {
                    "class": {
                      "type": "string",
                      "description": "Class of the error"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message"
                    }
                  }
                },
                "examples": {
                  "Client::NotFound::ServiceNotFound": {
                    "value": {
                      "class": "Client::NotFound::ServiceNotFound",
                      "message": "Cannot find service, neither 'serviceId' nor 'serviceName' found"
                    }
                  }
                }
              }
            }
          }
        },
        "x-badges": [
          {
            "color": "green",
            "label": "Stable production version"
          }
        ],
        "x-iam-actions": [
          {
            "name": "ldp:apiovh:user/changePassword",
            "required": true
          }
        ]
      }
    }
  }
}
